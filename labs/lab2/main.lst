
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000324 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/cc8wXYmg.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800308c l       .text	00000000 LoopCopyDataInit
08003084 l       .text	00000000 CopyDataInit
080030a0 l       .text	00000000 LoopFillZerobss
0800309a l       .text	00000000 FillZerobss
080030b2 l       .text	00000000 LoopForever
080030c8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 ge_gpio.c
00000000 l    df *ABS*	00000000 ge_lcd.c
00000000 l    df *ABS*	00000000 ge_system.c
00000000 l    df *ABS*	00000000 ge_vcom.c
00000000 l    df *ABS*	00000000 HD44780_F3.c
08003178 l     O .text	00000004 CSWTCH.14
00000000 l    df *ABS*	00000000 usb_istr.c
00000000 l    df *ABS*	00000000 usb_prop.c
00000000 l    df *ABS*	00000000 usb_pwr.c
00000000 l    df *ABS*	00000000 usb_core.c
08000d20 l     F .text	000000ac DataStageIn
00000000 l    df *ABS*	00000000 usb_init.c
00000000 l    df *ABS*	00000000 usb_int.c
00000000 l    df *ABS*	00000000 usb_mem.c
00000000 l    df *ABS*	00000000 usb_regs.c
00000000 l    df *ABS*	00000000 usb_sil.c
00000000 l    df *ABS*	00000000 usb_endp.c
00000000 l    df *ABS*	00000000 stm32f30x_exti.c
00000000 l    df *ABS*	00000000 stm32f30x_gpio.c
00000000 l    df *ABS*	00000000 stm32f30x_misc.c
00000000 l    df *ABS*	00000000 stm32f30x_rcc.c
200002f8 l     O .data	00000010 APBAHBPrescTable
20000308 l     O .data	0000001a ADCPrescTable
00000000 l    df *ABS*	00000000 hw_config.c
08002c28 l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_stm32f30x.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 usb_desc.c
00000000 l    df *ABS*	00000000 /home/ned/ee155_tools/gcc-arm-none-eabi-4_9-2015q2/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /home/ned/ee155_tools/gcc-arm-none-eabi-4_9-2015q2/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
080030c8  w    F .text	00000002 RTC_Alarm_IRQHandler
08000270 g     F .text	00000020 gpio_write_pin
200004f6 g     O .bss	00000002 SaveRState
08001990 g     F .text	00000026 SetEPRxValid
080030c8  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
080003e4 g     F .text	0000000c vcom_available
0800264c g     F .text	0000000c RCC_HSICmd
080030c8  w    F .text	00000002 TIM8_CC_IRQHandler
08002678 g     F .text	00000018 RCC_LSEDriveConfig
08002de8 g     F .text	00000034 CDC_Send_DATA
08001cc4 g     F .text	00000020 GetEPRxCount
080026b4 g     F .text	0000000c RCC_PLLCmd
08001804 g     F .text	0000000c SetISTR
2000033c g     O .bss	00000004 remotewakeupon
08000658 g     F .text	00000024 HD44780_PutStr
080030c8  w    F .text	00000002 DebugMon_Handler
08002b1c g     F .text	00000018 RCC_AHBPeriphResetCmd
20000210 g     O .data	00000004 packet_sent
080024e4 g     F .text	00000028 GPIO_PinAFConfig
08000210 g     F .text	00000060 gpio_setup_pin
08002c1c g     F .text	0000000c RCC_ClearITPendingBit
08000f30 g     F .text	00000098 Standard_SetEndPointFeature
080024b8 g     F .text	0000000c GPIO_ReadOutputDataBit
0800155c g     F .text	00000038 USB_Init
080030c8  w    F .text	00000002 TIM1_CC_IRQHandler
08001ffc g     F .text	0000000a ByteSwap
20000348 g     O .bss	00000001 HSEStartUpStatus
080030c8  w    F .text	00000002 HardFault_Handler
08001810 g     F .text	0000000c GetISTR
20000338 g     O .bss	00000001 Request
08001a58 g     F .text	0000001e ClearEPDoubleBuff
08001bdc g     F .text	00000020 GetEPTxAddr
080030c8  w    F .text	00000002 USB_HP_IRQHandler
08000310 g     F .text	00000020 SysTick_Handler
080026e0 g     F .text	0000000c RCC_MCOConfig
08002520 g     F .text	00000070 NVIC_Init
080030c8  w    F .text	00000002 PVD_IRQHandler
20000000 g     O .data	000000ae _ge_pin_num
0800053c g     F .text	00000024 hd44780_wr_cmd
08003258 g       .text	00000000 _sidata
080030c8  w    F .text	00000002 PendSV_Handler
080030c8  w    F .text	00000002 NMI_Handler
08001c38 g     F .text	00000028 SetEPCountRxReg
08003258 g       .data	00000000 __exidx_end
080030c8  w    F .text	00000002 EXTI3_IRQHandler
08002b64 g     F .text	00000018 RCC_ITConfig
08001c1c g     F .text	0000001c SetEPTxCount
08000898 g     F .text	00000010 Virtual_Com_Port_Get_Interface_Setting
080001cc g     F .text	00000042 gpio_deinit
200004c4 g     O .bss	00000002 SaveState
200002a0 g     O .data	00000008 Device_Descriptor
20000268 g     O .data	00000008 linecoding
08003258 g       .text	00000000 _etext
20000324 g       .bss	00000000 _sbss
0800317c g     O .text	00000032 Virtual_Com_Port_StringProduct
080026ec g     F .text	00000014 RCC_SYSCLKConfig
080017ec g     F .text	0000000c SetCNTR
08002108 g     F .text	00000034 EXTI_DeInit
08002bc4 g     F .text	00000032 RCC_WaitForHSEStartUp
200004fc g     O .bss	00000004 Receive_length
080018ac g     F .text	00000032 SetEPTxStatus
20000230 g     O .data	0000001c pEpInt_OUT
08001f48 g     F .text	00000020 GetEPDblBuf1Count
08000fc8 g     F .text	00000024 Standard_SetDeviceFeature
08000584 g     F .text	00000002 hd44780_Delay
08002ac8 g     F .text	0000000c RCC_BackupResetCmd
08001ae0 g     F .text	0000001e ToggleDTOG_RX
08001914 g     F .text	0000002a SetDouBleBuffEPStall
08001ff4 g     F .text	00000006 ToWord
08002590 g     F .text	00000014 NVIC_SetVectorTable
08002d48 g     F .text	00000050 USB_Interrupts_Config
08001ce4 g     F .text	0000003c SetEPDblBuffAddr
080026d4 g     F .text	0000000c RCC_ClockSecuritySystemCmd
08000e58 g     F .text	000000d8 Standard_ClearFeature
080030c8  w    F .text	00000002 EXTI0_IRQHandler
08002058 g     F .text	00000024 USB_SIL_Read
080030c8  w    F .text	00000002 I2C2_EV_IRQHandler
08001d80 g     F .text	00000020 GetEPDblBuf1Addr
08002bf8 g     F .text	00000010 RCC_ClearFlag
080030c8  w    F .text	00000002 FPU_IRQHandler
08002088 g     F .text	00000080 EP3_OUT_Callback
20000334 g     O .bss	00000004 wCNTR
080030c8  w    F .text	00000002 EXTI2_TS_IRQHandler
080008d8 g     F .text	00000024 Virtual_Com_Port_init
08001da0 g     F .text	000000c8 SetEPDblBuffCount
080030c8  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800104c g     F .text	00000378 Setup0_Process
08002628 g     F .text	00000010 RCC_HSEConfig
2000020c g     O .data	00000004 _ge_usb_timeout
08001834 g     F .text	0000000c GetDADDR
08001ac8 g     F .text	00000016 ClearEP_CTR_TX
080030c8  w    F .text	00000002 UsageFault_Handler
08002aec g     F .text	00000018 RCC_APB2PeriphClockCmd
080030c8  w    F .text	00000002 ADC1_2_IRQHandler
080019d8 g     F .text	0000001e ClearEP_KIND
080023c4 g     F .text	000000ba GPIO_Init
0800269c g     F .text	00000018 RCC_PLLConfig
080002ac g     F .text	00000004 lcd_putc
080029d8 g     F .text	00000020 RCC_ADCCLKConfig
20000000 g       .data	00000000 _sdata
080030c8  w    F .text	00000002 SPI1_IRQHandler
08000330 g     F .text	00000044 vcom_init
2000049a g     O .bss	00000002 wIstr
080025bc g     F .text	00000018 SysTick_CLKSourceConfig
080024e0 g     F .text	00000004 GPIO_Write
080008c0 g     F .text	00000018 Virtual_Com_Port_SetLineCoding
080030c8  w    F .text	00000002 TIM6_DAC_IRQHandler
080024c4 g     F .text	00000006 GPIO_ReadOutputData
08002658 g     F .text	00000020 RCC_LSEConfig
200004c8 g     O .bss	00000004 pProperty
08002abc g     F .text	0000000c RCC_RTCCLKCmd
08000dcc g     F .text	0000003c Standard_SetConfiguration
080030c8  w    F .text	00000002 TIM8_UP_IRQHandler
08002b04 g     F .text	00000018 RCC_APB1PeriphClockCmd
08001b68 g     F .text	00000020 SetEPAddress
080002b0 g     F .text	00000004 lcd_goto
08002c08 g     F .text	00000014 RCC_GetITStatus
08003258 g       .data	00000000 __exidx_start
20000330 g     O .bss	00000004 esof_counter
2000024c g     O .data	0000001c pEpInt_IN
080030cc g     F .text	00000050 __libc_init_array
080030c8  w    F .text	00000002 DMA2_Channel2_IRQHandler
08002ad4 g     F .text	00000018 RCC_AHBPeriphClockCmd
080030c8  w    F .text	00000002 DMA1_Channel4_IRQHandler
08003220 g     O .text	00000012 Virtual_Com_Port_DeviceDescriptor
08001d60 g     F .text	00000020 GetEPDblBuf0Addr
080002b8 g     F .text	00000004 lcd_clear
200004cc g     O .bss	00000001 EPindex
080031d8 g     O .text	00000004 Virtual_Com_Port_StringLangID
08000290 g     F .text	00000018 gpio_read_pin
20000270 g     O .data	00000030 Device_Property
08003240 g     F .text	00000000 _init
08001ec8 g     F .text	00000060 SetEPDblBuf1Count
08000c94 g     F .text	0000008c Standard_GetStatus
08001d40 g     F .text	00000020 SetEPDblBuf1Addr
200002b0 g     O .data	00000020 String_Descriptor
08001b20 g     F .text	00000024 ClearDTOG_RX
080030c8  w    F .text	00000002 USART3_IRQHandler
080022e0 g     F .text	00000018 EXTI_ClearITPendingBit
080031b0 g     O .text	00000026 Virtual_Com_Port_StringVendor
20000500 g       .bss	00000000 _ebss
08001558 g     F .text	00000002 NOP_Process
20000324 g     O .bss	00000004 _ge_delay_time
080030c8  w    F .text	00000002 DMA1_Channel7_IRQHandler
08002cd8 g     F .text	00000016 Set_USBClock
08003080  w    F .text	00000034 Reset_Handler
080017f8 g     F .text	0000000c GetCNTR
080024b0 g     F .text	00000006 GPIO_ReadInputData
080030c8  w    F .text	00000002 CAN1_RX1_IRQHandler
08000e08 g     F .text	00000050 Standard_SetInterface
080030c8  w    F .text	00000002 UART5_IRQHandler
08001c60 g     F .text	00000044 SetEPRxCount
08002b7c g     F .text	00000048 RCC_GetFlagStatus
20000398 g     O .bss	00000100 _vcom_buf
080030c8  w    F .text	00000002 ADC3_IRQHandler
08002008 g     F .text	00000028 USB_SIL_Init
08001828 g     F .text	0000000c SetDADDR
08002ed4 g     F .text	00000046 led_on
080024cc g     F .text	00000004 GPIO_SetBits
08000a14 g     F .text	00000030 PowerOn
080030c8  w    F .text	00000002 TIM4_IRQHandler
08002280 g     F .text	00000020 EXTI_GetFlagStatus
08002700 g     F .text	00000010 RCC_GetSYSCLKSource
2000032a g     O .bss	00000001 _vcom_buf_corrupt
08000800 g     F .text	00000014 Virtual_Com_Port_Status_In
080024d4 g     F .text	0000000a GPIO_WriteBit
08001594 g     F .text	00000180 CTR_LP
080030c8  w    F .text	00000002 DMA2_Channel1_IRQHandler
080030c8  w    F .text	00000002 I2C1_EV_IRQHandler
200004f8 g     O .bss	00000002 SaveTState
08001940 g     F .text	00000012 GetEPTxStatus
08000874 g     F .text	00000024 Virtual_Com_Port_NoData_Setup
08000588 g     F .text	000000b0 HD44780_Init
08001840 g     F .text	00000010 SetBTABLE
0800274c g     F .text	0000028c RCC_GetClocksFreq
200002d0 g     O .data	00000024 User_Standard_Requests
080030c8  w    F .text	00000002 DMA1_Channel6_IRQHandler
080030c8  w    F .text	00000002 UART4_IRQHandler
080030c8  w    F .text	00000002 DMA2_Channel4_IRQHandler
08002260 g     F .text	00000020 EXTI_GenerateSWInterrupt
20000214 g     O .data	0000001a Virtual_Com_Port_StringSerial
08000a68 g     F .text	000000e4 Suspend
080030c8  w    F .text	00000002 TIM3_IRQHandler
080030c8  w    F .text	00000002 RCC_IRQHandler
200004d0 g     O .bss	0000001c Device_Info
0800181c g     F .text	0000000c GetFNR
20000324 g       .bss	00000000 _bss
080030c8  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000c44 g     F .text	00000028 Standard_GetConfiguration
200000b0 g     O .data	0000015c _ge_pin_port
080030c8 g       .text	00000002 Default_Handler
080030c8  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
080022a0 g     F .text	00000018 EXTI_ClearFlag
200004ec g     O .bss	00000004 pUser_Standard_Requests
08001d20 g     F .text	00000020 SetEPDblBuf0Addr
08002aa0 g     F .text	00000010 RCC_RTCCLKConfig
08002030 g     F .text	00000026 USB_SIL_Write
08001ab0 g     F .text	00000016 ClearEP_CTR_RX
0800063c g     F .text	0000001c HD44780_GotoXY
080030c8  w    F .text	00000002 EXTI15_10_IRQHandler
08001ca4 g     F .text	00000020 GetEPTxCount
08001f28 g     F .text	00000020 GetEPDblBuf0Count
0800213c g     F .text	00000114 EXTI_Init
2000034c g     O .bss	00000040 Receive_Buffer
080007dc g     F .text	00000018 Virtual_Com_Port_SetConfiguration
080014a8 g     F .text	00000040 SetDeviceAddress
080017cc g     F .text	00000020 PMAToUserBufferCopy
08001bbc g     F .text	00000020 SetEPRxAddr
080024d0 g     F .text	00000004 GPIO_ResetBits
080030c8  w    F .text	00000002 TIM7_IRQHandler
2000032c g     O .bss	00000001 bIntPackSOF
08001b88 g     F .text	00000012 GetEPAddress
08001a94 g     F .text	0000001c GetRxStallStatus
0800185c g     F .text	0000000e SetENDPOINT
080014e8 g     F .text	00000070 In0_Process
08000b4c g     F .text	00000020 Resume_Init
08000498 g     F .text	00000090 hd44780_wr_lo_nibble
080002b4 g     F .text	00000004 lcd_puts
080030c8  w    F .text	00000002 EXTI9_5_IRQHandler
080030c8  w    F .text	00000002 TAMPER_STAMP_IRQHandler
080030c8  w    F .text	00000002 RTC_WKUP_IRQHandler
200004c0 g     O .bss	00000002 StatusInfo
200004f0 g     O .bss	00000004 pInformation
0800187c g     F .text	0000001c SetEPType
08001954 g     F .text	00000012 GetEPRxStatus
2000049c g     O .bss	00000002 ResumeS
080022b8 g     F .text	00000028 EXTI_GetITStatus
080030c8  w    F .text	00000002 SPI2_IRQHandler
080030c8  w    F .text	00000002 MemManage_Handler
08002638 g     F .text	00000014 RCC_AdjustHSICalibrationValue
080002a8 g     F .text	00000004 lcd_init
08002f1c g     F .text	00000068 main
080002f8 g     F .text	00000018 delay_ms
08000638 g     F .text	00000004 HD44780_PutChar
080019b8 g     F .text	0000001e SetEP_KIND
0800067c g     F .text	00000006 HD44780_ClrScr
08000c6c g     F .text	00000028 Standard_GetInterface
080030c8  w    F .text	00000002 SVC_Handler
080008a8 g     F .text	00000018 Virtual_Com_Port_GetLineCoding
080030c8  w    F .text	00000002 DMA2_Channel5_IRQHandler
08000374 g     F .text	00000014 vcom_send
00000000  w      *UND*	00000000 __init_array_end
080007f4 g     F .text	0000000c Virtual_Com_Port_SetDeviceAddress
08002724 g     F .text	00000014 RCC_PCLK1Config
08001898 g     F .text	00000012 GetEPType
08002250 g     F .text	0000000e EXTI_StructInit
080030c8  w    F .text	00000002 DMA1_Channel5_IRQHandler
08002a94 g     F .text	0000000c RCC_USBCLKConfig
080030c8  w    F .text	00000002 USB_LP_IRQHandler
080030c8  w    F .text	00000002 EXTI4_IRQHandler
080003f0 g     F .text	00000004 USB_LP_CAN1_RX0_IRQHandler
08001850 g     F .text	0000000c GetBTABLE
08002738 g     F .text	00000014 RCC_PCLK2Config
08000388 g     F .text	00000030 vcom_read
08002f84 g     F .text	000000fc SystemInit
080022f8 g     F .text	000000cc GPIO_DeInit
0800324c g     F .text	00000000 _fini
08000818 g     F .text	0000005c Virtual_Com_Port_Data_Setup
080030c8  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08001714 g     F .text	00000080 CTR_HP
080030c8  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
080009f4 g     F .text	00000020 Virtual_Com_Port_GetStringDescriptor
080025d4 g     F .text	00000054 RCC_DeInit
08001b00 g     F .text	0000001e ToggleDTOG_TX
08002e8e g     F .text	00000046 led_off
080030c8  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000fec g     F .text	0000001c Standard_GetDescriptorData
0800186c g     F .text	00000010 GetENDPOINT
080030c8  w    F .text	00000002 ADC4_IRQHandler
08000408 g     F .text	00000090 hd44780_wr_hi_nibble
080025a4 g     F .text	00000018 NVIC_SystemLPConfig
00000000  w      *UND*	00000000 __preinit_array_end
080013c4 g     F .text	000000e4 Out0_Process
080030c8  w    F .text	00000002 WWDG_IRQHandler
08002b4c g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
080026c0 g     F .text	00000014 RCC_PREDIV1Config
08001a18 g     F .text	0000001e Set_Status_Out
0800207c g     F .text	0000000c EP1_IN_Callback
20000498 g     O .bss	00000002 _vcom_buf_available
08002cf0 g     F .text	00000058 Leave_LowPowerMode
080030c8  w    F .text	00000002 TIM2_IRQHandler
08001968 g     F .text	00000026 SetEPTxValid
08002480 g     F .text	00000014 GPIO_StructInit
08001f68 g     F .text	00000044 GetEPDblBufDir
080030c8  w    F .text	00000002 COMP7_IRQHandler
20008000 g       *ABS*	00000000 _estack
080030c8  w    F .text	00000002 COMP1_2_3_IRQHandler
080030c8  w    F .text	00000002 EXTI1_IRQHandler
08000560 g     F .text	00000024 hd44780_wr_data
20000344 g     O .bss	00000001 Data_Mul_MaxPacketSize
20000324 g       .data	00000000 _edata
080003b8 g     F .text	00000014 vcom_corrupt
080009e8 g     F .text	0000000c Virtual_Com_Port_GetConfigDescriptor
08001008 g     F .text	00000044 Post0_Process
08000a44 g     F .text	00000024 PowerOff
08000684 g     F .text	00000158 USB_Istr
080018e0 g     F .text	00000032 SetEPRxStatus
08002c50 g     F .text	00000088 Set_System
080031dc g     O .text	00000043 Virtual_Com_Port_ConfigDescriptor
08001e68 g     F .text	00000060 SetEPDblBuf0Count
08001fac g     F .text	00000046 FreeUserBuffer
080030c8  w    F .text	00000002 USART2_IRQHandler
080030c8  w    F .text	00000002 COMP4_5_6_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08001b44 g     F .text	00000024 ClearDTOG_TX
200004a0 g     O .bss	00000020 EP
08002a38 g     F .text	0000005c RCC_USARTCLKConfig
080002bc g     F .text	0000003c ge_init
08001b9c g     F .text	00000020 SetEPTxAddr
080030c8  w    F .text	00000002 I2C2_ER_IRQHandler
080030c8  w    F .text	00000002 DMA1_Channel2_IRQHandler
08002a18 g     F .text	00000020 RCC_TIMCLKConfig
2000038c g     O .bss	00000008 EXTI_InitStructure
08002db4 g     F .text	00000034 Get_SerialNum
08002e28 g     F .text	00000066 setup_led_gpio
080030c8  w    F .text	00000002 TIM8_BRK_IRQHandler
20000328 g     O .bss	00000001 _vcom_buf_head
00000000  w      *UND*	00000000 __init_array_start
080029f8 g     F .text	00000020 RCC_I2CCLKConfig
200002a8 g     O .data	00000008 Config_Descriptor
080019f8 g     F .text	0000001e Clear_Status_Out
080030c8  w    F .text	00000002 CAN1_SCE_IRQHandler
08002ab0 g     F .text	0000000c RCC_I2SCLKConfig
080030c8  w    F .text	00000002 FLASH_IRQHandler
08001794 g     F .text	00000036 UserToPMABufferCopy
08002494 g     F .text	00000010 GPIO_PinLockConfig
080030c8  w    F .text	00000002 BusFault_Handler
080030c8  w    F .text	00000002 USART1_IRQHandler
08002d98 g     F .text	0000001c USB_Cable_Config
08002690 g     F .text	0000000c RCC_LSICmd
08000814 g     F .text	00000002 Virtual_Com_Port_Status_Out
0800311c g     F .text	0000005c strlen
080030c8  w    F .text	00000002 SPI3_IRQHandler
08001a38 g     F .text	0000001e SetEPDoubleBuff
08002b34 g     F .text	00000018 RCC_APB2PeriphResetCmd
080030c8  w    F .text	00000002 I2C1_ER_IRQHandler
0800250c g     F .text	00000014 NVIC_PriorityGroupConfig
08000528 g     F .text	00000012 hd44780_write
20000340 g     O .bss	00000004 bDeviceState
08000b6c g     F .text	000000d8 Resume
200002f4 g     O .data	00000002 Device_Table
08000188 g     F .text	00000042 gpio_init
08002e1c g     F .text	0000000c CDC_Receive_DATA
080009dc g     F .text	0000000c Virtual_Com_Port_GetDeviceDescriptor
00000000  w      *UND*	00000000 __preinit_array_start
080003cc g     F .text	00000018 vcom_reset
080008fc g     F .text	000000e0 Virtual_Com_Port_Reset
20000394 g     O .bss	00000004 Send_length
080024a4 g     F .text	0000000c GPIO_ReadInputDataBit
200004f4 g     O .bss	00000002 wInterrupt_Mask
08001bfc g     F .text	00000020 GetEPRxAddr
08001a78 g     F .text	0000001c GetTxStallStatus
080003f4 g     F .text	00000012 USBWakeUp_IRQHandler
08002710 g     F .text	00000014 RCC_HCLKConfig
20000329 g     O .bss	00000001 _vcom_buf_tail
080030c8  w    F .text	00000002 DMA2_Channel3_IRQHandler
080030c8  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <gpio_init>:
 * @details Initializes all of the STM32 GPIO banks. The
 * method doesn't set them to any particular mode or value.
 * It just makes sure the peripherals are enabled and can
 * be set by later functions.
 */
void gpio_init() {
 8000188:	b508      	push	{r3, lr}
  //enable clocks for GPIO banks
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800018a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800018e:	2101      	movs	r1, #1
 8000190:	f002 fca0 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000194:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000198:	2101      	movs	r1, #1
 800019a:	f002 fc9b 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800019e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80001a2:	2101      	movs	r1, #1
 80001a4:	f002 fc96 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 80001a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80001ac:	2101      	movs	r1, #1
 80001ae:	f002 fc91 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 80001b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80001b6:	2101      	movs	r1, #1
 80001b8:	f002 fc8c 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80001bc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80001c0:	2101      	movs	r1, #1
}
 80001c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80001c6:	f002 bc85 	b.w	8002ad4 <RCC_AHBPeriphClockCmd>
 80001ca:	bf00      	nop

080001cc <gpio_deinit>:
 * @brief Deinitialize GPIO clocks
 * @details Turns off the clocks to the GPIO banks. This
 * function should only be called if you need to fully disable
 * the GPIO banks.
 */
void gpio_deinit() {
 80001cc:	b508      	push	{r3, lr}
  //disable clocks for GPIO banks
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80001ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001d2:	2100      	movs	r1, #0
 80001d4:	f002 fc7e 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 80001d8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80001dc:	2100      	movs	r1, #0
 80001de:	f002 fc79 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 80001e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80001e6:	2100      	movs	r1, #0
 80001e8:	f002 fc74 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 80001ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80001f0:	2100      	movs	r1, #0
 80001f2:	f002 fc6f 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 80001f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80001fa:	2100      	movs	r1, #0
 80001fc:	f002 fc6a 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8000200:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000204:	2100      	movs	r1, #0
}
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 800020a:	f002 bc63 	b.w	8002ad4 <RCC_AHBPeriphClockCmd>
 800020e:	bf00      	nop

08000210 <gpio_setup_pin>:
 * @param pin Specified pin name (i.e. PD1, PA12, etc.)
 * @param dir GPIO_INPUT or GPIO_OUTPUT
 * @param open_drain True sets output to open drain. False to push-pull
 * @param pull_up True enables an internal pull up resistor.
 */
void gpio_setup_pin(GPIOPin pin, int dir, bool open_drain, bool pull_up) {
 8000210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000212:	b083      	sub	sp, #12
 8000214:	4604      	mov	r4, r0
  //create initialization structure
  GPIO_InitTypeDef GPIO_init;
  GPIO_StructInit(&GPIO_init);
 8000216:	4668      	mov	r0, sp
 * @param pin Specified pin name (i.e. PD1, PA12, etc.)
 * @param dir GPIO_INPUT or GPIO_OUTPUT
 * @param open_drain True sets output to open drain. False to push-pull
 * @param pull_up True enables an internal pull up resistor.
 */
void gpio_setup_pin(GPIOPin pin, int dir, bool open_drain, bool pull_up) {
 8000218:	461e      	mov	r6, r3
 800021a:	460f      	mov	r7, r1
 800021c:	4615      	mov	r5, r2
  //create initialization structure
  GPIO_InitTypeDef GPIO_init;
  GPIO_StructInit(&GPIO_init);
 800021e:	f002 f92f 	bl	8002480 <GPIO_StructInit>

  GPIO_init.GPIO_Pin = _ge_pin_num[pin];
 8000222:	4812      	ldr	r0, [pc, #72]	; (800026c <gpio_setup_pin+0x5c>)
 8000224:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
 8000228:	9300      	str	r3, [sp, #0]
  //where the magic happens
  if (dir == GPIO_INPUT) {
 800022a:	b96f      	cbnz	r7, 8000248 <gpio_setup_pin+0x38>
    GPIO_init.GPIO_Mode = GPIO_Mode_IN;
 800022c:	f88d 7004 	strb.w	r7, [sp, #4]
    
    GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
  }

  //handle optional internal pull up
  if (pull_up) {
 8000230:	b9be      	cbnz	r6, 8000262 <gpio_setup_pin+0x52>
    GPIO_init.GPIO_PuPd = GPIO_PuPd_UP;
  } else {
    GPIO_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000232:	f88d 6007 	strb.w	r6, [sp, #7]
  }

  GPIO_Init(_ge_pin_port[pin], &GPIO_init);
 8000236:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800023a:	4669      	mov	r1, sp
 800023c:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 8000240:	f002 f8c0 	bl	80023c4 <GPIO_Init>
}
 8000244:	b003      	add	sp, #12
 8000246:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else {
    GPIO_init.GPIO_Mode = GPIO_Mode_OUT;
    
    //handle output type
    if (open_drain) {
      GPIO_init.GPIO_OType = GPIO_OType_OD;
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf18      	it	ne
 800024c:	2501      	movne	r5, #1
  GPIO_init.GPIO_Pin = _ge_pin_num[pin];
  //where the magic happens
  if (dir == GPIO_INPUT) {
    GPIO_init.GPIO_Mode = GPIO_Mode_IN;
  } else {
    GPIO_init.GPIO_Mode = GPIO_Mode_OUT;
 800024e:	2201      	movs	r2, #1
      GPIO_init.GPIO_OType = GPIO_OType_OD;
    } else {
      GPIO_init.GPIO_OType = GPIO_OType_PP;
    }
    
    GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
 8000250:	2303      	movs	r3, #3
  } else {
    GPIO_init.GPIO_Mode = GPIO_Mode_OUT;
    
    //handle output type
    if (open_drain) {
      GPIO_init.GPIO_OType = GPIO_OType_OD;
 8000252:	f88d 5006 	strb.w	r5, [sp, #6]
  GPIO_init.GPIO_Pin = _ge_pin_num[pin];
  //where the magic happens
  if (dir == GPIO_INPUT) {
    GPIO_init.GPIO_Mode = GPIO_Mode_IN;
  } else {
    GPIO_init.GPIO_Mode = GPIO_Mode_OUT;
 8000256:	f88d 2004 	strb.w	r2, [sp, #4]
      GPIO_init.GPIO_OType = GPIO_OType_OD;
    } else {
      GPIO_init.GPIO_OType = GPIO_OType_PP;
    }
    
    GPIO_init.GPIO_Speed = GPIO_Speed_50MHz;
 800025a:	f88d 3005 	strb.w	r3, [sp, #5]
  }

  //handle optional internal pull up
  if (pull_up) {
 800025e:	2e00      	cmp	r6, #0
 8000260:	d0e7      	beq.n	8000232 <gpio_setup_pin+0x22>
    GPIO_init.GPIO_PuPd = GPIO_PuPd_UP;
 8000262:	2301      	movs	r3, #1
 8000264:	f88d 3007 	strb.w	r3, [sp, #7]
 8000268:	e7e5      	b.n	8000236 <gpio_setup_pin+0x26>
 800026a:	bf00      	nop
 800026c:	20000000 	.word	0x20000000

08000270 <gpio_write_pin>:
 * 
 * @param pin Pin to write to
 * @param state GPIO_HIGH (1) or GPIO_LOW (0)
 */
void gpio_write_pin(GPIOPin pin, uint8_t state) {
  GPIO_WriteBit(_ge_pin_port[pin], _ge_pin_num[pin], state);
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <gpio_write_pin+0x1c>)
 * @details Sets the specified pin either high or low
 * 
 * @param pin Pin to write to
 * @param state GPIO_HIGH (1) or GPIO_LOW (0)
 */
void gpio_write_pin(GPIOPin pin, uint8_t state) {
 8000272:	b410      	push	{r4}
 8000274:	4604      	mov	r4, r0
  GPIO_WriteBit(_ge_pin_port[pin], _ge_pin_num[pin], state);
 8000276:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 * @details Sets the specified pin either high or low
 * 
 * @param pin Pin to write to
 * @param state GPIO_HIGH (1) or GPIO_LOW (0)
 */
void gpio_write_pin(GPIOPin pin, uint8_t state) {
 800027a:	460a      	mov	r2, r1
  GPIO_WriteBit(_ge_pin_port[pin], _ge_pin_num[pin], state);
 800027c:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
 8000280:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
}
 8000284:	f85d 4b04 	ldr.w	r4, [sp], #4
 * 
 * @param pin Pin to write to
 * @param state GPIO_HIGH (1) or GPIO_LOW (0)
 */
void gpio_write_pin(GPIOPin pin, uint8_t state) {
  GPIO_WriteBit(_ge_pin_port[pin], _ge_pin_num[pin], state);
 8000288:	f002 b924 	b.w	80024d4 <GPIO_WriteBit>
 800028c:	20000000 	.word	0x20000000

08000290 <gpio_read_pin>:
 * 
 * @param pin Pin to read from
 * @return Bit value of pin
 */
uint8_t gpio_read_pin(GPIOPin pin) {
  return GPIO_ReadInputDataBit(_ge_pin_port[pin], _ge_pin_num[pin]);
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <gpio_read_pin+0x14>)
 8000292:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000296:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800029a:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 800029e:	f002 b901 	b.w	80024a4 <GPIO_ReadInputDataBit>
 80002a2:	bf00      	nop
 80002a4:	20000000 	.word	0x20000000

080002a8 <lcd_init>:
/**
 * @brief Initializes the LCD
 * @details Initializes necessary IO and sets up the display
 */
void lcd_init(void) {
  HD44780_Init();
 80002a8:	f000 b96e 	b.w	8000588 <HD44780_Init>

080002ac <lcd_putc>:
 * @details Place a character on the LCD at the current position
 * 
 * @param char Character to display
 */
void lcd_putc(unsigned char c) {
  HD44780_PutChar(c);
 80002ac:	f000 b9c4 	b.w	8000638 <HD44780_PutChar>

080002b0 <lcd_goto>:
 * 
 * @param x X position
 * @param y Y position
 */
void lcd_goto(uint8_t x, uint8_t y) {
  HD44780_GotoXY((unsigned char) x, (unsigned char) y);
 80002b0:	f000 b9c4 	b.w	800063c <HD44780_GotoXY>

080002b4 <lcd_puts>:
 * position
 * 
 * @param str String to print
 */
void lcd_puts(char *str) {
  HD44780_PutStr(str);
 80002b4:	f000 b9d0 	b.w	8000658 <HD44780_PutStr>

080002b8 <lcd_clear>:
/**
 * @brief Clear the display
 * @details Clear the LCD display
 */
void lcd_clear(void) {
  HD44780_ClrScr();
 80002b8:	f000 b9e0 	b.w	800067c <HD44780_ClrScr>

080002bc <ge_init>:
/**
 * @brief Initialize dependancies for libraries
 * @details Initializes the SysTick timer for generating delays.
 * Must be called before using delay_ms.
 */
void ge_init() {
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	b091      	sub	sp, #68	; 0x44
  //Initialize SysTick for delays
  RCC_ClocksTypeDef RCC_clocks;
  RCC_GetClocksFreq(&RCC_clocks);
 80002c0:	a801      	add	r0, sp, #4
 80002c2:	f002 fa43 	bl	800274c <RCC_GetClocksFreq>
  SysTick_Config(RCC_clocks.HCLK_Frequency / GE_TICKS_S);
 80002c6:	9b02      	ldr	r3, [sp, #8]
 80002c8:	4908      	ldr	r1, [pc, #32]	; (80002ec <ge_init+0x30>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002ca:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <ge_init+0x34>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002cc:	4c09      	ldr	r4, [pc, #36]	; (80002f4 <ge_init+0x38>)
 80002ce:	fba1 1303 	umull	r1, r3, r1, r3
 80002d2:	099b      	lsrs	r3, r3, #6
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002d4:	3b01      	subs	r3, #1
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002d6:	25f0      	movs	r5, #240	; 0xf0
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002da:	2107      	movs	r1, #7
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80002dc:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002de:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002e2:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e4:	6011      	str	r1, [r2, #0]
}
 80002e6:	b011      	add	sp, #68	; 0x44
 80002e8:	bd30      	pop	{r4, r5, pc}
 80002ea:	bf00      	nop
 80002ec:	10624dd3 	.word	0x10624dd3
 80002f0:	e000e010 	.word	0xe000e010
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <delay_ms>:
 * @details Sets a counter that is decremented every SysTick
 * and blocks until fully decremented.
 * 
 * @param uint32_t How long in ms to delay.
 */
void delay_ms(__IO uint32_t ms) {
 80002f8:	b082      	sub	sp, #8
  _ge_delay_time = ms;
 80002fa:	4a04      	ldr	r2, [pc, #16]	; (800030c <delay_ms+0x14>)
 * @details Sets a counter that is decremented every SysTick
 * and blocks until fully decremented.
 * 
 * @param uint32_t How long in ms to delay.
 */
void delay_ms(__IO uint32_t ms) {
 80002fc:	9001      	str	r0, [sp, #4]
  _ge_delay_time = ms;
 80002fe:	9b01      	ldr	r3, [sp, #4]
 8000300:	6013      	str	r3, [r2, #0]

  while (_ge_delay_time != 0);
 8000302:	6813      	ldr	r3, [r2, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1fc      	bne.n	8000302 <delay_ms+0xa>
}
 8000308:	b002      	add	sp, #8
 800030a:	4770      	bx	lr
 800030c:	20000324 	.word	0x20000324

08000310 <SysTick_Handler>:
/**
 * @brief Interrupt handler for the SysTick
 * @details Interrupt handler for the SysTick
 */
void SysTick_Handler(void) {
  if (_ge_delay_time != 0)
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <SysTick_Handler+0x18>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	b112      	cbz	r2, 800031c <SysTick_Handler+0xc>
    _ge_delay_time--;
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	3a01      	subs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]

  _ge_usb_timeout--;
 800031c:	4a03      	ldr	r2, [pc, #12]	; (800032c <SysTick_Handler+0x1c>)
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	3b01      	subs	r3, #1
 8000322:	6013      	str	r3, [r2, #0]
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000324 	.word	0x20000324
 800032c:	2000020c 	.word	0x2000020c

08000330 <vcom_init>:
/**
 * @brief Initialize the VCOM interface
 * @details Enables the USB device on the STM board and configures
 * it as a virtual COM port.
 */
void vcom_init() {
 8000330:	b508      	push	{r3, lr}
  Set_System();
 8000332:	f002 fc8d 	bl	8002c50 <Set_System>
  Set_USBClock();
 8000336:	f002 fccf 	bl	8002cd8 <Set_USBClock>
  USB_Interrupts_Config();
 800033a:	f002 fd05 	bl	8002d48 <USB_Interrupts_Config>

  USB_Init();
 800033e:	f001 f90d 	bl	800155c <USB_Init>

  _ge_usb_timeout = 100;
 8000342:	4a09      	ldr	r2, [pc, #36]	; (8000368 <vcom_init+0x38>)
 8000344:	4909      	ldr	r1, [pc, #36]	; (800036c <vcom_init+0x3c>)
 8000346:	2364      	movs	r3, #100	; 0x64
 8000348:	6013      	str	r3, [r2, #0]

  while ((bDeviceState != CONFIGURED) && (_ge_usb_timeout != 0))
 800034a:	e001      	b.n	8000350 <vcom_init+0x20>
 800034c:	6813      	ldr	r3, [r2, #0]
 800034e:	b113      	cbz	r3, 8000356 <vcom_init+0x26>
 8000350:	680b      	ldr	r3, [r1, #0]
 8000352:	2b05      	cmp	r3, #5
 8000354:	d1fa      	bne.n	800034c <vcom_init+0x1c>
  {}

  //initialize positions
  _vcom_buf_head = 0;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <vcom_init+0x40>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
  _vcom_buf_tail = 0;
 800035c:	705a      	strb	r2, [r3, #1]
  _vcom_buf_corrupt = 0;
 800035e:	709a      	strb	r2, [r3, #2]

  //enable receive channel
  CDC_Receive_DATA();
}
 8000360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  _vcom_buf_head = 0;
  _vcom_buf_tail = 0;
  _vcom_buf_corrupt = 0;

  //enable receive channel
  CDC_Receive_DATA();
 8000364:	f002 bd5a 	b.w	8002e1c <CDC_Receive_DATA>
 8000368:	2000020c 	.word	0x2000020c
 800036c:	20000340 	.word	0x20000340
 8000370:	20000328 	.word	0x20000328

08000374 <vcom_send>:
 * @details Sends a string over the VCOM port. The string
 * must be less than 255 characters and terminated by '\0'
 * 
 * @param data String to send
 */
void vcom_send(char *data) {
 8000374:	b510      	push	{r4, lr}
 8000376:	4604      	mov	r4, r0
  //calculate string length
  uint8_t str_len = strlen(data);
 8000378:	f002 fed0 	bl	800311c <strlen>

  //send data
  CDC_Send_DATA((uint8_t *)data, str_len);
 800037c:	b2c1      	uxtb	r1, r0
 800037e:	4620      	mov	r0, r4
}
 8000380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void vcom_send(char *data) {
  //calculate string length
  uint8_t str_len = strlen(data);

  //send data
  CDC_Send_DATA((uint8_t *)data, str_len);
 8000384:	f002 bd30 	b.w	8002de8 <CDC_Send_DATA>

08000388 <vcom_read>:
 * and removes it from the buffer.
 * @return The top character in the buffer.
 */
char vcom_read() {
  //check if any data available and return 0 if not
  if(!_vcom_buf_available--) return 0;
 8000388:	4a08      	ldr	r2, [pc, #32]	; (80003ac <vcom_read+0x24>)
 800038a:	8810      	ldrh	r0, [r2, #0]
 800038c:	b280      	uxth	r0, r0
 800038e:	1e43      	subs	r3, r0, #1
 8000390:	b29b      	uxth	r3, r3
 8000392:	8013      	strh	r3, [r2, #0]
 8000394:	b140      	cbz	r0, 80003a8 <vcom_read+0x20>

  return _vcom_buf[_vcom_buf_head++];
 8000396:	4906      	ldr	r1, [pc, #24]	; (80003b0 <vcom_read+0x28>)
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <vcom_read+0x2c>)
 800039a:	780b      	ldrb	r3, [r1, #0]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	1c5a      	adds	r2, r3, #1
 80003a0:	b2d2      	uxtb	r2, r2
 80003a2:	700a      	strb	r2, [r1, #0]
 80003a4:	5cc0      	ldrb	r0, [r0, r3]
 80003a6:	b2c0      	uxtb	r0, r0
}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000498 	.word	0x20000498
 80003b0:	20000328 	.word	0x20000328
 80003b4:	20000398 	.word	0x20000398

080003b8 <vcom_corrupt>:
 * @details Checks the buffer corrupt flag and returns its state.
 * To clear the flag, call @ref vcom_reset
 * @return True if corrupt.
 */
bool vcom_corrupt() {
  return _vcom_buf_corrupt == 1;
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <vcom_corrupt+0x10>)
 80003ba:	7898      	ldrb	r0, [r3, #2]
}
 80003bc:	f1a0 0001 	sub.w	r0, r0, #1
 80003c0:	fab0 f080 	clz	r0, r0
 80003c4:	0940      	lsrs	r0, r0, #5
 80003c6:	4770      	bx	lr
 80003c8:	20000328 	.word	0x20000328

080003cc <vcom_reset>:
/**
 * @brief Resets the receive buffer
 * @details Resets the receive buffer. Any data inside will be lost.
 */
void vcom_reset() {
  _vcom_buf_head = 0;
 80003cc:	4a03      	ldr	r2, [pc, #12]	; (80003dc <vcom_reset+0x10>)
  _vcom_buf_tail = 0;
  _vcom_buf_available = 0;
 80003ce:	4904      	ldr	r1, [pc, #16]	; (80003e0 <vcom_reset+0x14>)
/**
 * @brief Resets the receive buffer
 * @details Resets the receive buffer. Any data inside will be lost.
 */
void vcom_reset() {
  _vcom_buf_head = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	7013      	strb	r3, [r2, #0]
  _vcom_buf_tail = 0;
 80003d4:	7053      	strb	r3, [r2, #1]
  _vcom_buf_available = 0;
 80003d6:	800b      	strh	r3, [r1, #0]
  _vcom_buf_corrupt = 0;
 80003d8:	7093      	strb	r3, [r2, #2]
 80003da:	4770      	bx	lr
 80003dc:	20000328 	.word	0x20000328
 80003e0:	20000498 	.word	0x20000498

080003e4 <vcom_available>:
 * @details Returns the number of available bytes. Make sure to
 * check this before calling vcom_read()
 * @return Number of available bytes
 */
uint16_t vcom_available() {
  return (uint8_t) _vcom_buf_available;
 80003e4:	4b01      	ldr	r3, [pc, #4]	; (80003ec <vcom_available+0x8>)
 80003e6:	8818      	ldrh	r0, [r3, #0]
}
 80003e8:	b2c0      	uxtb	r0, r0
 80003ea:	4770      	bx	lr
 80003ec:	20000498 	.word	0x20000498

080003f0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
#elif defined (USB_INT_REMAP)
void USB_LP_IRQHandler(void)
#endif
{
   USB_Istr();
 80003f0:	f000 b948 	b.w	8000684 <USB_Istr>

080003f4 <USBWakeUp_IRQHandler>:
#if defined (USB_INT_DEFAULT)
void USBWakeUp_IRQHandler(void)
#elif defined (USB_INT_REMAP)
void USBWakeUp_RMP_IRQHandler(void)
#endif
{
 80003f4:	b508      	push	{r3, lr}
  /* Initiate external resume sequence (1 step) */
  Resume(RESUME_EXTERNAL);  
 80003f6:	2000      	movs	r0, #0
 80003f8:	f000 fbb8 	bl	8000b6c <Resume>
  EXTI_ClearITPendingBit(EXTI_Line18);
 80003fc:	2012      	movs	r0, #18
}
 80003fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void USBWakeUp_RMP_IRQHandler(void)
#endif
{
  /* Initiate external resume sequence (1 step) */
  Resume(RESUME_EXTERNAL);  
  EXTI_ClearITPendingBit(EXTI_Line18);
 8000402:	f001 bf6d 	b.w	80022e0 <EXTI_ClearITPendingBit>
 8000406:	bf00      	nop

08000408 <hd44780_wr_hi_nibble>:
#define hd44780_write_char( c )                   hd44780_wr_data( c & 0xff )

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble( unsigned char data )
{
 8000408:	b510      	push	{r4, lr}
 800040a:	4604      	mov	r4, r0
	if ( data & 0x10 ) {
 800040c:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 800040e:	4821      	ldr	r0, [pc, #132]	; (8000494 <hd44780_wr_hi_nibble+0x8c>)
 8000410:	f04f 0110 	mov.w	r1, #16

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble( unsigned char data )
{
	if ( data & 0x10 ) {
 8000414:	d525      	bpl.n	8000462 <hd44780_wr_hi_nibble+0x5a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 8000416:	f002 f859 	bl	80024cc <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	}
	if ( data & 0x20 ) {
 800041a:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 800041c:	481d      	ldr	r0, [pc, #116]	; (8000494 <hd44780_wr_hi_nibble+0x8c>)
 800041e:	f04f 0120 	mov.w	r1, #32
	if ( data & 0x10 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	}
	if ( data & 0x20 ) {
 8000422:	d525      	bpl.n	8000470 <hd44780_wr_hi_nibble+0x68>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000424:	f002 f852 	bl	80024cc <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	}
	if ( data & 0x40 ) {
 8000428:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 800042a:	481a      	ldr	r0, [pc, #104]	; (8000494 <hd44780_wr_hi_nibble+0x8c>)
 800042c:	f04f 0140 	mov.w	r1, #64	; 0x40
	if ( data & 0x20 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	}
	if ( data & 0x40 ) {
 8000430:	d525      	bpl.n	800047e <hd44780_wr_hi_nibble+0x76>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8000432:	f002 f84b 	bl	80024cc <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	}
	if ( data & 0x80 ) {
 8000436:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000438:	4816      	ldr	r0, [pc, #88]	; (8000494 <hd44780_wr_hi_nibble+0x8c>)
 800043a:	f04f 0180 	mov.w	r1, #128	; 0x80
	if ( data & 0x40 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	}
	if ( data & 0x80 ) {
 800043e:	d425      	bmi.n	800048c <hd44780_wr_hi_nibble+0x84>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000440:	f002 f846 	bl	80024d0 <GPIO_ResetBits>
	}

    /* set the EN signal */
    hd44780_EN_On();
 8000444:	2104      	movs	r1, #4
 8000446:	2201      	movs	r2, #1
 8000448:	4812      	ldr	r0, [pc, #72]	; (8000494 <hd44780_wr_hi_nibble+0x8c>)
 800044a:	f002 f843 	bl	80024d4 <GPIO_WriteBit>

    /* wait */
    hd44780_EN_high_delay();
 800044e:	2002      	movs	r0, #2
 8000450:	f7ff ff52 	bl	80002f8 <delay_ms>

    /* reset the EN signal */
    hd44780_EN_Off();
 8000454:	480f      	ldr	r0, [pc, #60]	; (8000494 <hd44780_wr_hi_nibble+0x8c>)
 8000456:	2104      	movs	r1, #4
 8000458:	2200      	movs	r2, #0
}
 800045a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* wait */
    hd44780_EN_high_delay();

    /* reset the EN signal */
    hd44780_EN_Off();
 800045e:	f002 b839 	b.w	80024d4 <GPIO_WriteBit>
void hd44780_wr_hi_nibble( unsigned char data )
{
	if ( data & 0x10 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 8000462:	f002 f835 	bl	80024d0 <GPIO_ResetBits>
	}
	if ( data & 0x20 ) {
 8000466:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000468:	480a      	ldr	r0, [pc, #40]	; (8000494 <hd44780_wr_hi_nibble+0x8c>)
 800046a:	f04f 0120 	mov.w	r1, #32
	if ( data & 0x10 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	}
	if ( data & 0x20 ) {
 800046e:	d4d9      	bmi.n	8000424 <hd44780_wr_hi_nibble+0x1c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000470:	f002 f82e 	bl	80024d0 <GPIO_ResetBits>
	}
	if ( data & 0x40 ) {
 8000474:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8000476:	4807      	ldr	r0, [pc, #28]	; (8000494 <hd44780_wr_hi_nibble+0x8c>)
 8000478:	f04f 0140 	mov.w	r1, #64	; 0x40
	if ( data & 0x20 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	}
	if ( data & 0x40 ) {
 800047c:	d4d9      	bmi.n	8000432 <hd44780_wr_hi_nibble+0x2a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 800047e:	f002 f827 	bl	80024d0 <GPIO_ResetBits>
	}
	if ( data & 0x80 ) {
 8000482:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <hd44780_wr_hi_nibble+0x8c>)
 8000486:	f04f 0180 	mov.w	r1, #128	; 0x80
	if ( data & 0x40 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	}
	if ( data & 0x80 ) {
 800048a:	d5d9      	bpl.n	8000440 <hd44780_wr_hi_nibble+0x38>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 800048c:	f002 f81e 	bl	80024cc <GPIO_SetBits>
 8000490:	e7d8      	b.n	8000444 <hd44780_wr_hi_nibble+0x3c>
 8000492:	bf00      	nop
 8000494:	48000c00 	.word	0x48000c00

08000498 <hd44780_wr_lo_nibble>:


#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble( unsigned char data )
{
 8000498:	b510      	push	{r4, lr}
 800049a:	4604      	mov	r4, r0
	if ( data & 0x01 ) {
 800049c:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 800049e:	4821      	ldr	r0, [pc, #132]	; (8000524 <hd44780_wr_lo_nibble+0x8c>)
 80004a0:	f04f 0110 	mov.w	r1, #16

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble( unsigned char data )
{
	if ( data & 0x01 ) {
 80004a4:	d525      	bpl.n	80004f2 <hd44780_wr_lo_nibble+0x5a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 80004a6:	f002 f811 	bl	80024cc <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	}
	if ( data & 0x02 ) {
 80004aa:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 80004ac:	481d      	ldr	r0, [pc, #116]	; (8000524 <hd44780_wr_lo_nibble+0x8c>)
 80004ae:	f04f 0120 	mov.w	r1, #32
	if ( data & 0x01 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	}
	if ( data & 0x02 ) {
 80004b2:	d525      	bpl.n	8000500 <hd44780_wr_lo_nibble+0x68>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 80004b4:	f002 f80a 	bl	80024cc <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	}
	if ( data & 0x04 ) {
 80004b8:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 80004ba:	481a      	ldr	r0, [pc, #104]	; (8000524 <hd44780_wr_lo_nibble+0x8c>)
 80004bc:	f04f 0140 	mov.w	r1, #64	; 0x40
	if ( data & 0x02 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	}
	if ( data & 0x04 ) {
 80004c0:	d525      	bpl.n	800050e <hd44780_wr_lo_nibble+0x76>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 80004c2:	f002 f803 	bl	80024cc <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	}
	if ( data & 0x08 ) {
 80004c6:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 80004c8:	4816      	ldr	r0, [pc, #88]	; (8000524 <hd44780_wr_lo_nibble+0x8c>)
 80004ca:	f04f 0180 	mov.w	r1, #128	; 0x80
	if ( data & 0x04 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	}
	if ( data & 0x08 ) {
 80004ce:	d425      	bmi.n	800051c <hd44780_wr_lo_nibble+0x84>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 80004d0:	f001 fffe 	bl	80024d0 <GPIO_ResetBits>
	}

    /* set the EN signal */
    hd44780_EN_On();
 80004d4:	2104      	movs	r1, #4
 80004d6:	2201      	movs	r2, #1
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <hd44780_wr_lo_nibble+0x8c>)
 80004da:	f001 fffb 	bl	80024d4 <GPIO_WriteBit>

    /* wait */
    hd44780_EN_high_delay();
 80004de:	2002      	movs	r0, #2
 80004e0:	f7ff ff0a 	bl	80002f8 <delay_ms>

    /* reset the EN signal */
    hd44780_EN_Off();
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <hd44780_wr_lo_nibble+0x8c>)
 80004e6:	2104      	movs	r1, #4
 80004e8:	2200      	movs	r2, #0
}
 80004ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* wait */
    hd44780_EN_high_delay();

    /* reset the EN signal */
    hd44780_EN_Off();
 80004ee:	f001 bff1 	b.w	80024d4 <GPIO_WriteBit>
void hd44780_wr_lo_nibble( unsigned char data )
{
	if ( data & 0x01 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 80004f2:	f001 ffed 	bl	80024d0 <GPIO_ResetBits>
	}
	if ( data & 0x02 ) {
 80004f6:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 80004f8:	480a      	ldr	r0, [pc, #40]	; (8000524 <hd44780_wr_lo_nibble+0x8c>)
 80004fa:	f04f 0120 	mov.w	r1, #32
	if ( data & 0x01 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
	}
	if ( data & 0x02 ) {
 80004fe:	d4d9      	bmi.n	80004b4 <hd44780_wr_lo_nibble+0x1c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8000500:	f001 ffe6 	bl	80024d0 <GPIO_ResetBits>
	}
	if ( data & 0x04 ) {
 8000504:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <hd44780_wr_lo_nibble+0x8c>)
 8000508:	f04f 0140 	mov.w	r1, #64	; 0x40
	if ( data & 0x02 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
	}
	if ( data & 0x04 ) {
 800050c:	d4d9      	bmi.n	80004c2 <hd44780_wr_lo_nibble+0x2a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 800050e:	f001 ffdf 	bl	80024d0 <GPIO_ResetBits>
	}
	if ( data & 0x08 ) {
 8000512:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <hd44780_wr_lo_nibble+0x8c>)
 8000516:	f04f 0180 	mov.w	r1, #128	; 0x80
	if ( data & 0x04 ) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
	}
	if ( data & 0x08 ) {
 800051a:	d5d9      	bpl.n	80004d0 <hd44780_wr_lo_nibble+0x38>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 800051c:	f001 ffd6 	bl	80024cc <GPIO_SetBits>
 8000520:	e7d8      	b.n	80004d4 <hd44780_wr_lo_nibble+0x3c>
 8000522:	bf00      	nop
 8000524:	48000c00 	.word	0x48000c00

08000528 <hd44780_write>:
    hd44780_EN_Off();
}

/* 4bit bus version */
void hd44780_write( unsigned char data )
{
 8000528:	b510      	push	{r4, lr}
 800052a:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble( data );
 800052c:	f7ff ff6c 	bl	8000408 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble( data );
 8000530:	4620      	mov	r0, r4
}
 8000532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/* 4bit bus version */
void hd44780_write( unsigned char data )
{
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble( data );
	hd44780_wr_lo_nibble( data );
 8000536:	f7ff bfaf 	b.w	8000498 <hd44780_wr_lo_nibble>
 800053a:	bf00      	nop

0800053c <hd44780_wr_cmd>:
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */


void hd44780_wr_cmd( unsigned char cmd )
{
 800053c:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 800053e:	2101      	movs	r1, #1
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */


void hd44780_wr_cmd( unsigned char cmd )
{
 8000540:	4604      	mov	r4, r0
	hd44780_RS_Off();
 8000542:	2200      	movs	r2, #0
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <hd44780_wr_cmd+0x20>)
 8000546:	f001 ffc5 	bl	80024d4 <GPIO_WriteBit>

/* 4bit bus version */
void hd44780_write( unsigned char data )
{
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble( data );
 800054a:	4620      	mov	r0, r4
 800054c:	f7ff ff5c 	bl	8000408 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble( data );
 8000550:	4620      	mov	r0, r4

void hd44780_wr_cmd( unsigned char cmd )
{
	hd44780_RS_Off();
	hd44780_write( cmd );
}
 8000552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/* 4bit bus version */
void hd44780_write( unsigned char data )
{
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble( data );
	hd44780_wr_lo_nibble( data );
 8000556:	f7ff bf9f 	b.w	8000498 <hd44780_wr_lo_nibble>
 800055a:	bf00      	nop
 800055c:	48000c00 	.word	0x48000c00

08000560 <hd44780_wr_data>:
	hd44780_write( cmd );
}


void hd44780_wr_data( unsigned char data )
{
 8000560:	b510      	push	{r4, lr}
	hd44780_RS_On();
 8000562:	2101      	movs	r1, #1
	hd44780_write( cmd );
}


void hd44780_wr_data( unsigned char data )
{
 8000564:	4604      	mov	r4, r0
	hd44780_RS_On();
 8000566:	460a      	mov	r2, r1
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <hd44780_wr_data+0x20>)
 800056a:	f001 ffb3 	bl	80024d4 <GPIO_WriteBit>

/* 4bit bus version */
void hd44780_write( unsigned char data )
{
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble( data );
 800056e:	4620      	mov	r0, r4
 8000570:	f7ff ff4a 	bl	8000408 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble( data );
 8000574:	4620      	mov	r0, r4

void hd44780_wr_data( unsigned char data )
{
	hd44780_RS_On();
	hd44780_write( data );
}
 8000576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/* 4bit bus version */
void hd44780_write( unsigned char data )
{
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble( data );
	hd44780_wr_lo_nibble( data );
 800057a:	f7ff bf8d 	b.w	8000498 <hd44780_wr_lo_nibble>
 800057e:	bf00      	nop
 8000580:	48000c00 	.word	0x48000c00

08000584 <hd44780_Delay>:

Parameters			: del		-	32-bit value to represent the delay cycles
Return value		: NONE
*********************************************************************************************/
void hd44780_Delay(unsigned long del)
{
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HD44780_Init>:

Parameters			: NONE
Return value		: NONE
*********************************************************************************************/
void HD44780_Init(void)
{
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_DATABIT7 | HD44780_DATABIT6 | HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 800058a:	4e2a      	ldr	r6, [pc, #168]	; (8000634 <HD44780_Init+0xac>)

Parameters			: NONE
Return value		: NONE
*********************************************************************************************/
void HD44780_Init(void)
{
 800058c:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;	
	
	/* Configure the peripheral clocks for the HD44780 data and control lines */
	RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
 800058e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000592:	2101      	movs	r1, #1
 8000594:	f002 fa9e 	bl	8002ad4 <RCC_AHBPeriphClockCmd>

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_DATABIT7 | HD44780_DATABIT6 | HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
 8000598:	2401      	movs	r4, #1
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800059a:	2500      	movs	r5, #0
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 800059c:	4630      	mov	r0, r6
 800059e:	4669      	mov	r1, sp
	
	/* Configure the peripheral clocks for the HD44780 data and control lines */
	RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_DATABIT7 | HD44780_DATABIT6 | HD44780_DATABIT5 | HD44780_DATABIT4;
 80005a0:	23f0      	movs	r3, #240	; 0xf0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005a2:	2703      	movs	r7, #3
	
	/* Configure the peripheral clocks for the HD44780 data and control lines */
	RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_DATABIT7 | HD44780_DATABIT6 | HD44780_DATABIT5 | HD44780_DATABIT4;
 80005a4:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
 80005a6:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005aa:	f88d 5006 	strb.w	r5, [sp, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005ae:	f88d 7005 	strb.w	r7, [sp, #5]
	GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80005b2:	f001 ff07 	bl	80023c4 <GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_RS_BIT | HD44780_RW_BIT | HD44780_EN_BIT;
 80005b6:	2307      	movs	r3, #7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80005b8:	4669      	mov	r1, sp
 80005ba:	4630      	mov	r0, r6
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStructure.GPIO_Pin = HD44780_RS_BIT | HD44780_RW_BIT | HD44780_EN_BIT;
 80005bc:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;									
 80005be:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005c2:	f88d 5006 	strb.w	r5, [sp, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005c6:	f88d 7005 	strb.w	r7, [sp, #5]
	GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80005ca:	f001 fefb 	bl	80023c4 <GPIO_Init>

  /* clear control bits */
	hd44780_EN_Off();
 80005ce:	4630      	mov	r0, r6
 80005d0:	462a      	mov	r2, r5
 80005d2:	2104      	movs	r1, #4
 80005d4:	f001 ff7e 	bl	80024d4 <GPIO_WriteBit>
	hd44780_RS_Off();
 80005d8:	4630      	mov	r0, r6
 80005da:	4621      	mov	r1, r4
 80005dc:	462a      	mov	r2, r5
 80005de:	f001 ff79 	bl	80024d4 <GPIO_WriteBit>
	hd44780_RW_Off();
 80005e2:	462a      	mov	r2, r5
 80005e4:	2102      	movs	r1, #2
 80005e6:	4630      	mov	r0, r6
 80005e8:	f001 ff74 	bl	80024d4 <GPIO_WriteBit>
	
	/* wait initial delay for LCD to settle */
  /* reset procedure - 3 function calls resets the device */
  hd44780_init_delay();
 80005ec:	2010      	movs	r0, #16
 80005ee:	f7ff fe83 	bl	80002f8 <delay_ms>
  hd44780_wr_hi_nibble( HD44780_CMD_RESET );
 80005f2:	2030      	movs	r0, #48	; 0x30
 80005f4:	f7ff ff08 	bl	8000408 <hd44780_wr_hi_nibble>
  hd44780_init_delay2();
 80005f8:	2005      	movs	r0, #5
 80005fa:	f7ff fe7d 	bl	80002f8 <delay_ms>
  hd44780_wr_hi_nibble( HD44780_CMD_RESET );
 80005fe:	2030      	movs	r0, #48	; 0x30
 8000600:	f7ff ff02 	bl	8000408 <hd44780_wr_hi_nibble>
  hd44780_init_delay3();
 8000604:	4620      	mov	r0, r4
 8000606:	f7ff fe77 	bl	80002f8 <delay_ms>
  hd44780_wr_hi_nibble( HD44780_CMD_RESET );
 800060a:	2030      	movs	r0, #48	; 0x30
 800060c:	f7ff fefc 	bl	8000408 <hd44780_wr_hi_nibble>
		
	#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
    /* 4bit interface */
  hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION );
 8000610:	2020      	movs	r0, #32
 8000612:	f7ff fef9 	bl	8000408 <hd44780_wr_hi_nibble>
  #endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

  /* sets the configured values - can be set again only after reset */
  hd44780_function( HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT );
 8000616:	2028      	movs	r0, #40	; 0x28
 8000618:	f7ff ff90 	bl	800053c <hd44780_wr_cmd>

  /* turn the display on with no cursor or blinking */
	hd44780_display( HD44780_DISP_ON, HD44780_DISP_CURS_OFF, HD44780_DISP_BLINK_OFF );
 800061c:	200c      	movs	r0, #12
 800061e:	f7ff ff8d 	bl	800053c <hd44780_wr_cmd>
	
  /* clear the display */
  hd44780_clear();
 8000622:	4620      	mov	r0, r4
 8000624:	f7ff ff8a 	bl	800053c <hd44780_wr_cmd>

  /* addr increment, shift cursor */
	hd44780_entry( HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS );
 8000628:	2006      	movs	r0, #6
 800062a:	f7ff ff87 	bl	800053c <hd44780_wr_cmd>

}
 800062e:	b003      	add	sp, #12
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	bf00      	nop
 8000634:	48000c00 	.word	0x48000c00

08000638 <HD44780_PutChar>:

Return value		: NONE
*********************************************************************************************/
void HD44780_PutChar(unsigned char c)
{
	hd44780_wr_data(c & 0xff);
 8000638:	f7ff bf92 	b.w	8000560 <hd44780_wr_data>

0800063c <HD44780_GotoXY>:
	
  if(x > (HD44780_DISP_LENGTH-1))
		x = 0;

	if(y > (HD44780_DISP_ROWS-1))
		y = 0;
 800063c:	2903      	cmp	r1, #3
 800063e:	bf88      	it	hi
 8000640:	2100      	movhi	r1, #0
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HD44780_GotoXY+0x18>)
		case 0:  copy_y = 0x80; break;
		case 1:  copy_y = 0xc0; break;
		case 2:  copy_y = 0x94; break;
		case 3:  copy_y = 0xd4; break;
  }
	hd44780_wr_cmd(x + copy_y);
 8000644:	5c5b      	ldrb	r3, [r3, r1]
void HD44780_GotoXY(unsigned char x, unsigned char y)
{
  unsigned char copy_y=0;
	
  if(x > (HD44780_DISP_LENGTH-1))
		x = 0;
 8000646:	2813      	cmp	r0, #19
 8000648:	bf88      	it	hi
 800064a:	2000      	movhi	r0, #0
		case 0:  copy_y = 0x80; break;
		case 1:  copy_y = 0xc0; break;
		case 2:  copy_y = 0x94; break;
		case 3:  copy_y = 0xd4; break;
  }
	hd44780_wr_cmd(x + copy_y);
 800064c:	4418      	add	r0, r3
 800064e:	b2c0      	uxtb	r0, r0
 8000650:	f7ff bf74 	b.w	800053c <hd44780_wr_cmd>
 8000654:	08003178 	.word	0x08003178

08000658 <HD44780_PutStr>:
Parameters			: str			-	string (char array) to print

Return value		: NONE
*********************************************************************************************/
void HD44780_PutStr(char *str)
{
 8000658:	b510      	push	{r4, lr}
 800065a:	b082      	sub	sp, #8
	__IO unsigned int i=0;
 800065c:	2300      	movs	r3, #0
Parameters			: str			-	string (char array) to print

Return value		: NONE
*********************************************************************************************/
void HD44780_PutStr(char *str)
{
 800065e:	4604      	mov	r4, r0
	__IO unsigned int i=0;
 8000660:	9301      	str	r3, [sp, #4]

	do
	{
		HD44780_PutChar(str[i]);
 8000662:	9b01      	ldr	r3, [sp, #4]

Return value		: NONE
*********************************************************************************************/
void HD44780_PutChar(unsigned char c)
{
	hd44780_wr_data(c & 0xff);
 8000664:	5ce0      	ldrb	r0, [r4, r3]
 8000666:	f7ff ff7b 	bl	8000560 <hd44780_wr_data>
	__IO unsigned int i=0;

	do
	{
		HD44780_PutChar(str[i]);
		i++;
 800066a:	9b01      	ldr	r3, [sp, #4]
 800066c:	3301      	adds	r3, #1
 800066e:	9301      	str	r3, [sp, #4]
	}while(str[i]!='\0');
 8000670:	9b01      	ldr	r3, [sp, #4]
 8000672:	5ce3      	ldrb	r3, [r4, r3]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f4      	bne.n	8000662 <HD44780_PutStr+0xa>
}
 8000678:	b002      	add	sp, #8
 800067a:	bd10      	pop	{r4, pc}

0800067c <HD44780_ClrScr>:
Parameters			: NONE
Return value		: NONE
*********************************************************************************************/
void HD44780_ClrScr(void)
{
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff bf5d 	b.w	800053c <hd44780_wr_cmd>
 8000682:	bf00      	nop

08000684 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000684:	494d      	ldr	r1, [pc, #308]	; (80007bc <USB_Istr+0x138>)
 8000686:	680b      	ldr	r3, [r1, #0]
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void USB_Istr(void)
{
 8000688:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800068a:	4c4d      	ldr	r4, [pc, #308]	; (80007c0 <USB_Istr+0x13c>)

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800068c:	4d4d      	ldr	r5, [pc, #308]	; (80007c4 <USB_Istr+0x140>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800068e:	b29b      	uxth	r3, r3
 8000690:	8023      	strh	r3, [r4, #0]

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000692:	8822      	ldrh	r2, [r4, #0]
 8000694:	882b      	ldrh	r3, [r5, #0]
 8000696:	401a      	ands	r2, r3
 8000698:	0592      	lsls	r2, r2, #22
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void USB_Istr(void)
{
 800069a:	b089      	sub	sp, #36	; 0x24
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800069c:	d507      	bpl.n	80006ae <USB_Istr+0x2a>
  {
    _SetISTR((uint16_t)CLR_SOF);
 800069e:	f64f 52ff 	movw	r2, #65023	; 0xfdff
    bIntPackSOF++;
 80006a2:	4849      	ldr	r0, [pc, #292]	; (80007c8 <USB_Istr+0x144>)
  wIstr = _GetISTR();

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_SOF);
 80006a4:	600a      	str	r2, [r1, #0]
    bIntPackSOF++;
 80006a6:	7802      	ldrb	r2, [r0, #0]
 80006a8:	3201      	adds	r2, #1
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	7002      	strb	r2, [r0, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80006ae:	8822      	ldrh	r2, [r4, #0]
 80006b0:	401a      	ands	r2, r3
 80006b2:	0410      	lsls	r0, r2, #16
 80006b4:	d439      	bmi.n	800072a <USB_Istr+0xa6>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80006b6:	8822      	ldrh	r2, [r4, #0]
 80006b8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80006bc:	4213      	tst	r3, r2
 80006be:	d12b      	bne.n	8000718 <USB_Istr+0x94>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 80006c0:	8822      	ldrh	r2, [r4, #0]
 80006c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80006c6:	4213      	tst	r3, r2
 80006c8:	d003      	beq.n	80006d2 <USB_Istr+0x4e>
  {
    _SetISTR((uint16_t)CLR_ERR);
 80006ca:	4a3c      	ldr	r2, [pc, #240]	; (80007bc <USB_Istr+0x138>)
 80006cc:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 80006d0:	6011      	str	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 80006d2:	8822      	ldrh	r2, [r4, #0]
 80006d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80006d8:	4213      	tst	r3, r2
 80006da:	d114      	bne.n	8000706 <USB_Istr+0x82>
//   }
// #endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 80006dc:	8822      	ldrh	r2, [r4, #0]
 80006de:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80006e2:	4213      	tst	r3, r2
 80006e4:	d00d      	beq.n	8000702 <USB_Istr+0x7e>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80006e6:	4a35      	ldr	r2, [pc, #212]	; (80007bc <USB_Istr+0x138>)
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80006e8:	4b38      	ldr	r3, [pc, #224]	; (80007cc <USB_Istr+0x148>)

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80006ea:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 80006ee:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	0419      	lsls	r1, r3, #16
 80006f4:	d41d      	bmi.n	8000732 <USB_Istr+0xae>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 80006f6:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <USB_Istr+0x144>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 80006fc:	2007      	movs	r0, #7
 80006fe:	f000 fa35 	bl	8000b6c <Resume>
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8000702:	b009      	add	sp, #36	; 0x24
 8000704:	bd30      	pop	{r4, r5, pc}
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <USB_Istr+0x138>)
 8000708:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800070c:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 fa2c 	bl	8000b6c <Resume>
 8000714:	882b      	ldrh	r3, [r5, #0]
 8000716:	e7e1      	b.n	80006dc <USB_Istr+0x58>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_RESET);
 8000718:	4a28      	ldr	r2, [pc, #160]	; (80007bc <USB_Istr+0x138>)
    Device_Property.Reset();
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <USB_Istr+0x14c>)
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_RESET);
 800071c:	f64f 31ff 	movw	r1, #64511	; 0xfbff
    Device_Property.Reset();
 8000720:	685b      	ldr	r3, [r3, #4]
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_RESET);
 8000722:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 8000724:	4798      	blx	r3
 8000726:	882b      	ldrh	r3, [r5, #0]
 8000728:	e7ca      	b.n	80006c0 <USB_Istr+0x3c>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 800072a:	f000 ff33 	bl	8001594 <CTR_LP>
 800072e:	882b      	ldrh	r3, [r5, #0]
 8000730:	e7c1      	b.n	80006b6 <USB_Istr+0x32>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8000732:	4925      	ldr	r1, [pc, #148]	; (80007c8 <USB_Istr+0x144>)
 8000734:	684b      	ldr	r3, [r1, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	604b      	str	r3, [r1, #4]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 800073a:	684b      	ldr	r3, [r1, #4]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d9dd      	bls.n	80006fc <USB_Istr+0x78>
 8000740:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8000744:	f013 0308 	ands.w	r3, r3, #8
 8000748:	f1a2 0204 	sub.w	r2, r2, #4
 800074c:	d1d6      	bne.n	80006fc <USB_Istr+0x78>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800074e:	6812      	ldr	r2, [r2, #0]
 8000750:	4820      	ldr	r0, [pc, #128]	; (80007d4 <USB_Istr+0x150>)
 8000752:	b292      	uxth	r2, r2
 8000754:	608a      	str	r2, [r1, #8]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8000756:	f850 2b04 	ldr.w	r2, [r0], #4
 800075a:	ac08      	add	r4, sp, #32
 800075c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000760:	3301      	adds	r3, #1
 8000762:	b292      	uxth	r2, r2
 8000764:	2b08      	cmp	r3, #8
 8000766:	f844 2c20 	str.w	r2, [r4, #-32]
 800076a:	d1f4      	bne.n	8000756 <USB_Istr+0xd2>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 800076c:	688b      	ldr	r3, [r1, #8]
        _SetCNTR(wCNTR);
 800076e:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <USB_Istr+0x154>)
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8000770:	4812      	ldr	r0, [pc, #72]	; (80007bc <USB_Istr+0x138>)
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	608b      	str	r3, [r1, #8]
        _SetCNTR(wCNTR);
 8000778:	688b      	ldr	r3, [r1, #8]
 800077a:	b29b      	uxth	r3, r3
 800077c:	6013      	str	r3, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 800077e:	688b      	ldr	r3, [r1, #8]
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	608b      	str	r3, [r1, #8]
        _SetCNTR(wCNTR);
 8000786:	688b      	ldr	r3, [r1, #8]
 8000788:	b29b      	uxth	r3, r3
 800078a:	6013      	str	r3, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 800078c:	6803      	ldr	r3, [r0, #0]
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <USB_Istr+0x138>)
 8000790:	055b      	lsls	r3, r3, #21
 8000792:	d5fb      	bpl.n	800078c <USB_Istr+0x108>
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8000794:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <USB_Istr+0x150>)
 800079a:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800079c:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 800079e:	aa08      	add	r2, sp, #32
 80007a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        while((_GetISTR()&ISTR_RESET) == 0);
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 80007a4:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 80007a6:	f852 2c20 	ldr.w	r2, [r2, #-32]
        while((_GetISTR()&ISTR_RESET) == 0);
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 80007aa:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 80007ac:	b292      	uxth	r2, r2
 80007ae:	f840 2b04 	str.w	r2, [r0], #4
        while((_GetISTR()&ISTR_RESET) == 0);
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 80007b2:	d1f4      	bne.n	800079e <USB_Istr+0x11a>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	604b      	str	r3, [r1, #4]
 80007b8:	e7a0      	b.n	80006fc <USB_Istr+0x78>
 80007ba:	bf00      	nop
 80007bc:	40005c44 	.word	0x40005c44
 80007c0:	2000049a 	.word	0x2000049a
 80007c4:	200004f4 	.word	0x200004f4
 80007c8:	2000032c 	.word	0x2000032c
 80007cc:	40005c48 	.word	0x40005c48
 80007d0:	20000270 	.word	0x20000270
 80007d4:	40005c00 	.word	0x40005c00
 80007d8:	40005c40 	.word	0x40005c40

080007dc <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <Virtual_Com_Port_SetConfiguration+0x10>)
 80007de:	7a9b      	ldrb	r3, [r3, #10]
 80007e0:	b113      	cbz	r3, 80007e8 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80007e2:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <Virtual_Com_Port_SetConfiguration+0x14>)
 80007e4:	2205      	movs	r2, #5
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200004d0 	.word	0x200004d0
 80007f0:	20000340 	.word	0x20000340

080007f4 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 80007f4:	4b01      	ldr	r3, [pc, #4]	; (80007fc <Virtual_Com_Port_SetDeviceAddress+0x8>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	4770      	bx	lr
 80007fc:	20000340 	.word	0x20000340

08000800 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <Virtual_Com_Port_Status_In+0x10>)
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	2a20      	cmp	r2, #32
  {
    Request = 0;
 8000806:	bf04      	itt	eq
 8000808:	2200      	moveq	r2, #0
 800080a:	701a      	strbeq	r2, [r3, #0]
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000338 	.word	0x20000338

08000814 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8000818:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 800081a:	b510      	push	{r4, lr}
 800081c:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800081e:	d003      	beq.n	8000828 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8000820:	2820      	cmp	r0, #32
 8000822:	d010      	beq.n	8000846 <Virtual_Com_Port_Data_Setup+0x2e>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8000824:	2002      	movs	r0, #2
 8000826:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <Virtual_Com_Port_Data_Setup+0x4c>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	7813      	ldrb	r3, [r2, #0]
 800082e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000832:	2b21      	cmp	r3, #33	; 0x21
 8000834:	d1f6      	bne.n	8000824 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8000836:	490c      	ldr	r1, [pc, #48]	; (8000868 <Virtual_Com_Port_Data_Setup+0x50>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000838:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800083a:	2400      	movs	r4, #0
 800083c:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800083e:	4620      	mov	r0, r4
 8000840:	4788      	blx	r1
  return USB_SUCCESS;
 8000842:	4620      	mov	r0, r4
 8000844:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000846:	4a07      	ldr	r2, [pc, #28]	; (8000864 <Virtual_Com_Port_Data_Setup+0x4c>)
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	7811      	ldrb	r1, [r2, #0]
 800084c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000850:	2921      	cmp	r1, #33	; 0x21
 8000852:	d003      	beq.n	800085c <Virtual_Com_Port_Data_Setup+0x44>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <Virtual_Com_Port_Data_Setup+0x54>)
 8000856:	7013      	strb	r3, [r2, #0]
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8000858:	2002      	movs	r0, #2

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 800085a:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <Virtual_Com_Port_Data_Setup+0x54>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <Virtual_Com_Port_Data_Setup+0x58>)
    }
    Request = SET_LINE_CODING;
 8000860:	7003      	strb	r3, [r0, #0]
 8000862:	e7e9      	b.n	8000838 <Virtual_Com_Port_Data_Setup+0x20>
 8000864:	200004f0 	.word	0x200004f0
 8000868:	080008a9 	.word	0x080008a9
 800086c:	20000338 	.word	0x20000338
 8000870:	080008c1 	.word	0x080008c1

08000874 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <Virtual_Com_Port_NoData_Setup+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800087e:	2b21      	cmp	r3, #33	; 0x21
 8000880:	d001      	beq.n	8000886 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8000882:	2002      	movs	r0, #2
}
 8000884:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8000886:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800088a:	2802      	cmp	r0, #2
    {
      return USB_SUCCESS;
 800088c:	bf14      	ite	ne
 800088e:	2002      	movne	r0, #2
 8000890:	2000      	moveq	r0, #0
 8000892:	4770      	bx	lr
 8000894:	200004f0 	.word	0x200004f0

08000898 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8000898:	b109      	cbz	r1, 800089e <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800089a:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 800089c:	4770      	bx	lr
{
  if (AlternateSetting > 0)
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
 800089e:	2801      	cmp	r0, #1
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 80008a0:	bf8c      	ite	hi
 80008a2:	2002      	movhi	r0, #2
 80008a4:	2000      	movls	r0, #0
 80008a6:	4770      	bx	lr

080008a8 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80008a8:	b108      	cbz	r0, 80008ae <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80008aa:	4803      	ldr	r0, [pc, #12]	; (80008b8 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 80008ac:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <Virtual_Com_Port_GetLineCoding+0x14>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2208      	movs	r2, #8
 80008b4:	821a      	strh	r2, [r3, #16]
    return NULL;
 80008b6:	4770      	bx	lr
 80008b8:	20000268 	.word	0x20000268
 80008bc:	200004f0 	.word	0x200004f0

080008c0 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80008c0:	b108      	cbz	r0, 80008c6 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 80008c4:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80008c6:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <Virtual_Com_Port_SetLineCoding+0x14>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2208      	movs	r2, #8
 80008cc:	821a      	strh	r2, [r3, #16]
    return NULL;
 80008ce:	4770      	bx	lr
 80008d0:	20000268 	.word	0x20000268
 80008d4:	200004f0 	.word	0x200004f0

080008d8 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 80008d8:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 80008da:	f002 fa6b 	bl	8002db4 <Get_SerialNum>

  pInformation->Current_Configuration = 0;
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <Virtual_Com_Port_init+0x1c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2400      	movs	r4, #0
 80008e4:	729c      	strb	r4, [r3, #10]

  /* Connect the device */
  PowerOn();
 80008e6:	f000 f895 	bl	8000a14 <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 80008ea:	f001 fb8d 	bl	8002008 <USB_SIL_Init>

  bDeviceState = UNCONNECTED;
 80008ee:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <Virtual_Com_Port_init+0x20>)
 80008f0:	601c      	str	r4, [r3, #0]
 80008f2:	bd10      	pop	{r4, pc}
 80008f4:	200004f0 	.word	0x200004f0
 80008f8:	20000340 	.word	0x20000340

080008fc <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <Virtual_Com_Port_Reset+0xd0>)

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80008fe:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <Virtual_Com_Port_Reset+0xd4>)
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000900:	681b      	ldr	r3, [r3, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000902:	79d2      	ldrb	r2, [r2, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8000904:	b510      	push	{r4, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000906:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000908:	725a      	strb	r2, [r3, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800090a:	729c      	strb	r4, [r3, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 800090c:	72dc      	strb	r4, [r3, #11]

  SetBTABLE(BTABLE_ADDRESS);
 800090e:	4620      	mov	r0, r4
 8000910:	f000 ff96 	bl	8001840 <SetBTABLE>

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8000914:	4620      	mov	r0, r4
 8000916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091a:	f000 ffaf 	bl	800187c <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800091e:	4620      	mov	r0, r4
 8000920:	2110      	movs	r1, #16
 8000922:	f000 ffc3 	bl	80018ac <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000926:	4620      	mov	r0, r4
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	f001 f947 	bl	8001bbc <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	4620      	mov	r0, r4
 8000932:	f001 f933 	bl	8001b9c <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 8000936:	4620      	mov	r0, r4
 8000938:	f001 f85e 	bl	80019f8 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <Virtual_Com_Port_Reset+0xd8>)
 800093e:	4620      	mov	r0, r4
 8000940:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8000944:	f001 f98c 	bl	8001c60 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 8000948:	4620      	mov	r0, r4
 800094a:	f001 f821 	bl	8001990 <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 800094e:	4621      	mov	r1, r4
 8000950:	2001      	movs	r0, #1
 8000952:	f000 ff93 	bl	800187c <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8000956:	2001      	movs	r0, #1
 8000958:	21c0      	movs	r1, #192	; 0xc0
 800095a:	f001 f91f 	bl	8001b9c <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800095e:	2001      	movs	r0, #1
 8000960:	2120      	movs	r1, #32
 8000962:	f000 ffa3 	bl	80018ac <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8000966:	4621      	mov	r1, r4
 8000968:	2001      	movs	r0, #1
 800096a:	f000 ffb9 	bl	80018e0 <SetEPRxStatus>

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 800096e:	2002      	movs	r0, #2
 8000970:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000974:	f000 ff82 	bl	800187c <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8000978:	2002      	movs	r0, #2
 800097a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097e:	f001 f90d 	bl	8001b9c <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8000982:	4621      	mov	r1, r4
 8000984:	2002      	movs	r0, #2
 8000986:	f000 ffab 	bl	80018e0 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800098a:	2002      	movs	r0, #2
 800098c:	2120      	movs	r1, #32
 800098e:	f000 ff8d 	bl	80018ac <SetEPTxStatus>

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8000992:	4621      	mov	r1, r4
 8000994:	2003      	movs	r0, #3
 8000996:	f000 ff71 	bl	800187c <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800099a:	2003      	movs	r0, #3
 800099c:	f44f 7188 	mov.w	r1, #272	; 0x110
 80009a0:	f001 f90c 	bl	8001bbc <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 80009a4:	2003      	movs	r0, #3
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	f001 f95a 	bl	8001c60 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009b2:	f000 ff95 	bl	80018e0 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 80009b6:	4621      	mov	r1, r4
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 ff77 	bl	80018ac <SetEPTxStatus>

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 80009be:	4620      	mov	r0, r4
 80009c0:	f000 fd72 	bl	80014a8 <SetDeviceAddress>
  
  bDeviceState = ATTACHED;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <Virtual_Com_Port_Reset+0xdc>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	bd10      	pop	{r4, pc}
 80009cc:	200004f0 	.word	0x200004f0
 80009d0:	080031dc 	.word	0x080031dc
 80009d4:	20000268 	.word	0x20000268
 80009d8:	20000340 	.word	0x20000340

080009dc <Virtual_Com_Port_GetDeviceDescriptor>:
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 80009dc:	4901      	ldr	r1, [pc, #4]	; (80009e4 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 80009de:	f000 bb05 	b.w	8000fec <Standard_GetDescriptorData>
 80009e2:	bf00      	nop
 80009e4:	200002a0 	.word	0x200002a0

080009e8 <Virtual_Com_Port_GetConfigDescriptor>:
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 80009e8:	4901      	ldr	r1, [pc, #4]	; (80009f0 <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 80009ea:	f000 baff 	b.w	8000fec <Standard_GetDescriptorData>
 80009ee:	bf00      	nop
 80009f0:	200002a8 	.word	0x200002a8

080009f4 <Virtual_Com_Port_GetStringDescriptor>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <Virtual_Com_Port_GetStringDescriptor+0x18>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d804      	bhi.n	8000a08 <Virtual_Com_Port_GetStringDescriptor+0x14>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80009fe:	4904      	ldr	r1, [pc, #16]	; (8000a10 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8000a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8000a04:	f000 baf2 	b.w	8000fec <Standard_GetDescriptorData>
  }
}
 8000a08:	2000      	movs	r0, #0
 8000a0a:	4770      	bx	lr
 8000a0c:	200004f0 	.word	0x200004f0
 8000a10:	200002b0 	.word	0x200002b0

08000a14 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8000a14:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f002 f9be 	bl	8002d98 <USB_Cable_Config>

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8000a1c:	4d06      	ldr	r5, [pc, #24]	; (8000a38 <PowerOn+0x24>)
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <PowerOn+0x28>)
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8000a20:	4c07      	ldr	r4, [pc, #28]	; (8000a40 <PowerOn+0x2c>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8000a22:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8000a24:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8000a2c:	601a      	str	r2, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8000a2e:	4610      	mov	r0, r2

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8000a30:	602a      	str	r2, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8000a32:	8021      	strh	r1, [r4, #0]
  _SetCNTR(wInterrupt_Mask);
 8000a34:	6019      	str	r1, [r3, #0]
  
  return USB_SUCCESS;
}
 8000a36:	bd38      	pop	{r3, r4, r5, pc}
 8000a38:	40005c44 	.word	0x40005c44
 8000a3c:	40005c40 	.word	0x40005c40
 8000a40:	200004f4 	.word	0x200004f4

08000a44 <PowerOff>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
 8000a44:	b538      	push	{r3, r4, r5, lr}
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 8000a46:	4d06      	ldr	r5, [pc, #24]	; (8000a60 <PowerOff+0x1c>)
  /* clear interrupt status register */
  _SetISTR(0);
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <PowerOff+0x20>)
 8000a4a:	2400      	movs	r4, #0
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	602a      	str	r2, [r5, #0]
  /* clear interrupt status register */
  _SetISTR(0);
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 8000a50:	4620      	mov	r0, r4
RESULT PowerOff()
{
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
  /* clear interrupt status register */
  _SetISTR(0);
 8000a52:	601c      	str	r4, [r3, #0]
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 8000a54:	f002 f9a0 	bl	8002d98 <USB_Cable_Config>
  /* switch-off device */
  _SetCNTR(CNTR_FRES + CNTR_PDWN);
 8000a58:	2303      	movs	r3, #3
  /* sw variables reset */
  /* ... */

  return USB_SUCCESS;
}
 8000a5a:	4620      	mov	r0, r4
  /* clear interrupt status register */
  _SetISTR(0);
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
  /* switch-off device */
  _SetCNTR(CNTR_FRES + CNTR_PDWN);
 8000a5c:	602b      	str	r3, [r5, #0]
  /* sw variables reset */
  /* ... */

  return USB_SUCCESS;
}
 8000a5e:	bd38      	pop	{r3, r4, r5, pc}
 8000a60:	40005c40 	.word	0x40005c40
 8000a64:	40005c44 	.word	0x40005c44

08000a68 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8000a68:	b470      	push	{r4, r5, r6}
 8000a6a:	b083      	sub	sp, #12
  uint32_t i =0;
  uint16_t wCNTR;
  uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8000a6c:	2300      	movs	r3, #0
  /* suspend preparation */
  /* ... */
  
  /*Store CNTR value */
  wCNTR = _GetCNTR();  
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <Suspend+0xcc>)
void Suspend(void)
{
  uint32_t i =0;
  uint16_t wCNTR;
  uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8000a70:	9301      	str	r3, [sp, #4]
  /* suspend preparation */
  /* ... */
  
  /*Store CNTR value */
  wCNTR = _GetCNTR();  
 8000a72:	6814      	ldr	r4, [r2, #0]
 8000a74:	4930      	ldr	r1, [pc, #192]	; (8000b38 <Suspend+0xd0>)
 8000a76:	4831      	ldr	r0, [pc, #196]	; (8000b3c <Suspend+0xd4>)
 8000a78:	b2a4      	uxth	r4, r4

    /* This a sequence to apply a force RESET to handle a robustness case */
    
  /*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8000a7a:	f851 2b04 	ldr.w	r2, [r1], #4
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8000a84:	3301      	adds	r3, #1
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d1f7      	bne.n	8000a7a <Suspend+0x12>
  /*apply FRES */
  wCNTR|=CNTR_FRES;
  _SetCNTR(wCNTR);
  
  /*clear FRES*/
  wCNTR&=~CNTR_FRES;
 8000a8a:	f024 0501 	bic.w	r5, r4, #1
  /*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
  
  /* unmask RESET flag */
  wCNTR|=CNTR_RESETM;
  _SetCNTR(wCNTR);
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <Suspend+0xcc>)
  /*clear FRES*/
  wCNTR&=~CNTR_FRES;
  _SetCNTR(wCNTR);
  
  /*poll for RESET flag in ISTR*/
  while((_GetISTR()&ISTR_RESET) == 0);
 8000a90:	492b      	ldr	r1, [pc, #172]	; (8000b40 <Suspend+0xd8>)
  wCNTR|=CNTR_RESETM;
  _SetCNTR(wCNTR);
  
  /*apply FRES */
  wCNTR|=CNTR_FRES;
  _SetCNTR(wCNTR);
 8000a92:	f444 6280 	orr.w	r2, r4, #1024	; 0x400
  
  /*clear FRES*/
  wCNTR&=~CNTR_FRES;
 8000a96:	b2ad      	uxth	r5, r5
  /*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
  
  /* unmask RESET flag */
  wCNTR|=CNTR_RESETM;
  _SetCNTR(wCNTR);
 8000a98:	4614      	mov	r4, r2
  wCNTR|=CNTR_FRES;
  _SetCNTR(wCNTR);
  
  /*clear FRES*/
  wCNTR&=~CNTR_FRES;
  _SetCNTR(wCNTR);
 8000a9a:	f445 6680 	orr.w	r6, r5, #1024	; 0x400
  wCNTR|=CNTR_RESETM;
  _SetCNTR(wCNTR);
  
  /*apply FRES */
  wCNTR|=CNTR_FRES;
  _SetCNTR(wCNTR);
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
  /*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
  
  /* unmask RESET flag */
  wCNTR|=CNTR_RESETM;
  _SetCNTR(wCNTR);
 8000aa2:	601c      	str	r4, [r3, #0]
  
  /*apply FRES */
  wCNTR|=CNTR_FRES;
  _SetCNTR(wCNTR);
 8000aa4:	601a      	str	r2, [r3, #0]
  
  /*clear FRES*/
  wCNTR&=~CNTR_FRES;
  _SetCNTR(wCNTR);
 8000aa6:	601e      	str	r6, [r3, #0]
  
  /*poll for RESET flag in ISTR*/
  while((_GetISTR()&ISTR_RESET) == 0);
 8000aa8:	680b      	ldr	r3, [r1, #0]
 8000aaa:	4a25      	ldr	r2, [pc, #148]	; (8000b40 <Suspend+0xd8>)
 8000aac:	055c      	lsls	r4, r3, #21
 8000aae:	d5fb      	bpl.n	8000aa8 <Suspend+0x40>
  
  /* clear RESET flag in ISTR */
  _SetISTR((uint16_t)CLR_RESET);
 8000ab0:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000ab4:	4920      	ldr	r1, [pc, #128]	; (8000b38 <Suspend+0xd0>)
 8000ab6:	6013      	str	r3, [r2, #0]
  
  /*restore Enpoints*/
  for (i=0;i<8;i++)
 8000ab8:	2300      	movs	r3, #0
  _SetENDPOINT(i, EP[i]);
 8000aba:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  
  /* clear RESET flag in ISTR */
  _SetISTR((uint16_t)CLR_RESET);
  
  /*restore Enpoints*/
  for (i=0;i<8;i++)
 8000abe:	3301      	adds	r3, #1
  _SetENDPOINT(i, EP[i]);
 8000ac0:	b292      	uxth	r2, r2
  
  /* clear RESET flag in ISTR */
  _SetISTR((uint16_t)CLR_RESET);
  
  /*restore Enpoints*/
  for (i=0;i<8;i++)
 8000ac2:	2b08      	cmp	r3, #8
  _SetENDPOINT(i, EP[i]);
 8000ac4:	f841 2b04 	str.w	r2, [r1], #4
  
  /* clear RESET flag in ISTR */
  _SetISTR((uint16_t)CLR_RESET);
  
  /*restore Enpoints*/
  for (i=0;i<8;i++)
 8000ac8:	d1f7      	bne.n	8000aba <Suspend+0x52>
  _SetENDPOINT(i, EP[i]);
  
  /* Now it is safe to enter macrocell in suspend mode */
  wCNTR |= CNTR_FSUSP;
  _SetCNTR(wCNTR);
 8000aca:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <Suspend+0xcc>)
  wCNTR |= CNTR_LPMODE;
  _SetCNTR(wCNTR);
  
  /*prepare entry in low power mode (STOP mode)*/
  /* Select the regulator state in STOP mode*/
  savePWR_CR = PWR->CR;
 8000acc:	481d      	ldr	r0, [pc, #116]	; (8000b44 <Suspend+0xdc>)
  tmpreg |= PWR_Regulator_LowPower;
  /* Store the new value */
  PWR->CR = tmpreg;
  /* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8000ace:	491e      	ldr	r1, [pc, #120]	; (8000b48 <Suspend+0xe0>)
#else
        SCB->SCR |= SCB_SCR_SLEEPDEEP;       
#endif
  /* enter system in STOP mode, only when wakeup flag in not set */
  if((_GetISTR()&ISTR_WKUP)==0)
 8000ad0:	4c1b      	ldr	r4, [pc, #108]	; (8000b40 <Suspend+0xd8>)
  for (i=0;i<8;i++)
  _SetENDPOINT(i, EP[i]);
  
  /* Now it is safe to enter macrocell in suspend mode */
  wCNTR |= CNTR_FSUSP;
  _SetCNTR(wCNTR);
 8000ad2:	f445 6581 	orr.w	r5, r5, #1032	; 0x408
 8000ad6:	6015      	str	r5, [r2, #0]
  
  /* force low-power mode in the macrocell */
  wCNTR = _GetCNTR();
 8000ad8:	6813      	ldr	r3, [r2, #0]
 8000ada:	b29b      	uxth	r3, r3
  wCNTR |= CNTR_LPMODE;
  _SetCNTR(wCNTR);
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6013      	str	r3, [r2, #0]
  
  /*prepare entry in low power mode (STOP mode)*/
  /* Select the regulator state in STOP mode*/
  savePWR_CR = PWR->CR;
 8000ae2:	6803      	ldr	r3, [r0, #0]
 8000ae4:	9301      	str	r3, [sp, #4]
  tmpreg = PWR->CR;
 8000ae6:	6803      	ldr	r3, [r0, #0]
  /* Clear PDDS and LPDS bits */
  tmpreg &= ((uint32_t)0xFFFFFFFC);
 8000ae8:	f023 0303 	bic.w	r3, r3, #3
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator_LowPower;
 8000aec:	f043 0301 	orr.w	r3, r3, #1
  /* Store the new value */
  PWR->CR = tmpreg;
 8000af0:	6003      	str	r3, [r0, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8000af2:	690b      	ldr	r3, [r1, #16]
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	610b      	str	r3, [r1, #16]
#else
        SCB->SCR |= SCB_SCR_SLEEPDEEP;       
#endif
  /* enter system in STOP mode, only when wakeup flag in not set */
  if((_GetISTR()&ISTR_WKUP)==0)
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	04db      	lsls	r3, r3, #19
 8000afe:	d510      	bpl.n	8000b22 <Suspend+0xba>
#endif
  }
  else
  {
    /* Clear Wakeup flag */
    _SetISTR(CLR_WKUP);
 8000b00:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000b04:	6023      	str	r3, [r4, #0]
    /* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8000b06:	6814      	ldr	r4, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
        _SetCNTR(wCNTR);
 8000b08:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000b0c:	4023      	ands	r3, r4
 8000b0e:	6013      	str	r3, [r2, #0]
    
    /*restore sleep mode configuration */ 
    /* restore Power regulator config in sleep mode*/
    PWR->CR = savePWR_CR;
 8000b10:	9b01      	ldr	r3, [sp, #4]
 8000b12:	6003      	str	r3, [r0, #0]
    
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)    
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8000b14:	690b      	ldr	r3, [r1, #16]
 8000b16:	f023 0304 	bic.w	r3, r3, #4
 8000b1a:	610b      	str	r3, [r1, #16]
#else
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
#endif
              
    }
}
 8000b1c:	b003      	add	sp, #12
 8000b1e:	bc70      	pop	{r4, r5, r6}
 8000b20:	4770      	bx	lr
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000b22:	bf30      	wfi
  if((_GetISTR()&ISTR_WKUP)==0)
  {
    __WFI();
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
 8000b24:	690b      	ldr	r3, [r1, #16]
 8000b26:	f023 0304 	bic.w	r3, r3, #4
 8000b2a:	610b      	str	r3, [r1, #16]
#else
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
#endif
              
    }
}
 8000b2c:	b003      	add	sp, #12
 8000b2e:	bc70      	pop	{r4, r5, r6}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40005c40 	.word	0x40005c40
 8000b38:	40005c00 	.word	0x40005c00
 8000b3c:	200004a0 	.word	0x200004a0
 8000b40:	40005c44 	.word	0x40005c44
 8000b44:	40007000 	.word	0x40007000
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8000b4c:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8000b4e:	4c06      	ldr	r4, [pc, #24]	; (8000b68 <Resume_Init+0x1c>)
 8000b50:	6822      	ldr	r2, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8000b52:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000b56:	4013      	ands	r3, r2
 8000b58:	6023      	str	r3, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8000b5a:	f002 f8c9 	bl	8002cf0 <Leave_LowPowerMode>

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8000b5e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8000b62:	6023      	str	r3, [r4, #0]
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	bf00      	nop
 8000b68:	40005c40 	.word	0x40005c40

08000b6c <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8000b6c:	b538      	push	{r3, r4, r5, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8000b6e:	4c32      	ldr	r4, [pc, #200]	; (8000c38 <Resume+0xcc>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8000b70:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8000b72:	bf18      	it	ne
 8000b74:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8000b76:	7823      	ldrb	r3, [r4, #0]
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d84b      	bhi.n	8000c14 <Resume+0xa8>
 8000b7c:	e8df f003 	tbb	[pc, r3]
 8000b80:	35301f18 	.word	0x35301f18
 8000b84:	033f      	.short	0x033f
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8000b86:	7863      	ldrb	r3, [r4, #1]
 8000b88:	492b      	ldr	r1, [pc, #172]	; (8000c38 <Resume+0xcc>)
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8000b90:	7863      	ldrb	r3, [r4, #1]
 8000b92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d13e      	bne.n	8000c18 <Resume+0xac>
      {
        wCNTR = _GetCNTR();
 8000b9a:	4828      	ldr	r0, [pc, #160]	; (8000c3c <Resume+0xd0>)
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
        remotewakeupon = 0;
 8000b9c:	4c28      	ldr	r4, [pc, #160]	; (8000c40 <Resume+0xd4>)
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 8000b9e:	6805      	ldr	r5, [r0, #0]
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8000ba0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8000ba4:	402b      	ands	r3, r5
        ResumeS.eState = RESUME_OFF;
 8000ba6:	2506      	movs	r5, #6
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8000ba8:	6003      	str	r3, [r0, #0]
        ResumeS.eState = RESUME_OFF;
 8000baa:	700d      	strb	r5, [r1, #0]
        remotewakeupon = 0;
 8000bac:	6022      	str	r2, [r4, #0]
 8000bae:	bd38      	pop	{r3, r4, r5, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <Resume+0xd4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d030      	beq.n	8000c1a <Resume+0xae>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8000bb8:	2305      	movs	r3, #5
 8000bba:	7023      	strb	r3, [r4, #0]
 8000bbc:	bd38      	pop	{r3, r4, r5, pc}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8000bbe:	4d1f      	ldr	r5, [pc, #124]	; (8000c3c <Resume+0xd0>)
 8000bc0:	682a      	ldr	r2, [r5, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8000bc2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	602b      	str	r3, [r5, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8000bca:	f002 f891 	bl	8002cf0 <Leave_LowPowerMode>
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <Resume+0xd4>)
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8000bd0:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8000bd4:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8000bd6:	2201      	movs	r2, #1
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8000bd8:	6028      	str	r0, [r5, #0]
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8000bda:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8000bdc:	601a      	str	r2, [r3, #0]
      break;
 8000bde:	bd38      	pop	{r3, r4, r5, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8000be0:	2202      	movs	r2, #2
      ResumeS.eState = RESUME_WAIT;
 8000be2:	2303      	movs	r3, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8000be4:	7062      	strb	r2, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8000be6:	7023      	strb	r3, [r4, #0]
      break;
 8000be8:	bd38      	pop	{r3, r4, r5, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8000bea:	7863      	ldrb	r3, [r4, #1]
 8000bec:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <Resume+0xcc>)
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8000bf4:	7863      	ldrb	r3, [r4, #1]
 8000bf6:	b97b      	cbnz	r3, 8000c18 <Resume+0xac>
        ResumeS.eState = RESUME_START;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	7013      	strb	r3, [r2, #0]
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <Resume+0xd0>)
 8000c00:	6813      	ldr	r3, [r2, #0]
 8000c02:	b29b      	uxth	r3, r3
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8000c04:	f043 0310 	orr.w	r3, r3, #16
      ResumeS.eState = RESUME_ON;
 8000c08:	2005      	movs	r0, #5
      ResumeS.bESOFcnt = 10;
 8000c0a:	210a      	movs	r1, #10
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8000c0c:	6013      	str	r3, [r2, #0]
      ResumeS.eState = RESUME_ON;
 8000c0e:	7020      	strb	r0, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8000c10:	7061      	strb	r1, [r4, #1]
      break;
 8000c12:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8000c14:	2306      	movs	r3, #6
 8000c16:	7023      	strb	r3, [r4, #0]
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8000c1a:	4d08      	ldr	r5, [pc, #32]	; (8000c3c <Resume+0xd0>)
 8000c1c:	682a      	ldr	r2, [r5, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8000c1e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000c22:	4013      	ands	r3, r2
 8000c24:	602b      	str	r3, [r5, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8000c26:	f002 f863 	bl	8002cf0 <Leave_LowPowerMode>

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8000c2a:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
 8000c2e:	2306      	movs	r3, #6
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8000c30:	602a      	str	r2, [r5, #0]
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
 8000c32:	7023      	strb	r3, [r4, #0]
 8000c34:	bd38      	pop	{r3, r4, r5, pc}
 8000c36:	bf00      	nop
 8000c38:	2000049c 	.word	0x2000049c
 8000c3c:	40005c40 	.word	0x40005c40
 8000c40:	2000033c 	.word	0x2000033c

08000c44 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8000c44:	b508      	push	{r3, lr}
  if (Length == 0)
 8000c46:	b138      	cbz	r0, 8000c58 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <Standard_GetConfiguration+0x20>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <Standard_GetConfiguration+0x24>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	300a      	adds	r0, #10
}
 8000c56:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <Standard_GetConfiguration+0x24>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8000c60:	bd08      	pop	{r3, pc}
 8000c62:	bf00      	nop
 8000c64:	200004ec 	.word	0x200004ec
 8000c68:	200004f0 	.word	0x200004f0

08000c6c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8000c6c:	b508      	push	{r3, lr}
  if (Length == 0)
 8000c6e:	b138      	cbz	r0, 8000c80 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <Standard_GetInterface+0x20>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <Standard_GetInterface+0x24>)
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	300c      	adds	r0, #12
}
 8000c7e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <Standard_GetInterface+0x24>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2201      	movs	r2, #1
 8000c86:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8000c88:	bd08      	pop	{r3, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200004ec 	.word	0x200004ec
 8000c90:	200004f0 	.word	0x200004f0

08000c94 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8000c94:	b508      	push	{r3, lr}
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <Standard_GetStatus+0x80>)
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d032      	beq.n	8000d02 <Standard_GetStatus+0x6e>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <Standard_GetStatus+0x84>)

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000c9e:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000ca4:	7813      	ldrb	r3, [r2, #0]
 8000ca6:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8000caa:	d016      	beq.n	8000cda <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d027      	beq.n	8000d00 <Standard_GetStatus+0x6c>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d124      	bne.n	8000cfe <Standard_GetStatus+0x6a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8000cb4:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8000cb6:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cc0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8000cc4:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8000cc6:	681b      	ldr	r3, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8000cc8:	d41f      	bmi.n	8000d0a <Standard_GetStatus+0x76>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8000cca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8000cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cd2:	d10e      	bne.n	8000cf2 <Standard_GetStatus+0x5e>
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	7003      	strb	r3, [r0, #0]
 8000cd8:	e00b      	b.n	8000cf2 <Standard_GetStatus+0x5e>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8000cda:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8000cdc:	0693      	lsls	r3, r2, #26
 8000cde:	bf54      	ite	pl
 8000ce0:	7803      	ldrbpl	r3, [r0, #0]
 8000ce2:	2302      	movmi	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8000ce4:	0651      	lsls	r1, r2, #25
    {
      SetBit(StatusInfo0, 0);
 8000ce6:	bf4c      	ite	mi
 8000ce8:	f043 0301 	orrmi.w	r3, r3, #1
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 8000cec:	f023 0301 	bicpl.w	r3, r3, #1
 8000cf0:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <Standard_GetStatus+0x88>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <Standard_GetStatus+0x84>)
 8000cfc:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 8000cfe:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8000d00:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2202      	movs	r2, #2
 8000d06:	821a      	strh	r2, [r3, #16]
    return 0;
 8000d08:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8000d0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000d0e:	2b10      	cmp	r3, #16
 8000d10:	d1ef      	bne.n	8000cf2 <Standard_GetStatus+0x5e>
 8000d12:	e7df      	b.n	8000cd4 <Standard_GetStatus+0x40>
 8000d14:	200004f0 	.word	0x200004f0
 8000d18:	200004c0 	.word	0x200004c0
 8000d1c:	200004ec 	.word	0x200004ec

08000d20 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8000d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8000d24:	4f23      	ldr	r7, [pc, #140]	; (8000db4 <DataStageIn+0x94>)
 8000d26:	683c      	ldr	r4, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8000d28:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 8000d2a:	7a26      	ldrb	r6, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8000d2c:	b923      	cbnz	r3, 8000d38 <DataStageIn+0x18>
 8000d2e:	2e04      	cmp	r6, #4
 8000d30:	d02a      	beq.n	8000d88 <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8000d32:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8000d34:	2604      	movs	r6, #4
 8000d36:	e003      	b.n	8000d40 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8000d38:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8000d3a:	42ab      	cmp	r3, r5
 8000d3c:	d9fa      	bls.n	8000d34 <DataStageIn+0x14>
 8000d3e:	2602      	movs	r6, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8000d40:	429d      	cmp	r5, r3
 8000d42:	bf28      	it	cs
 8000d44:	461d      	movcs	r5, r3
 8000d46:	4628      	mov	r0, r5
 8000d48:	69a3      	ldr	r3, [r4, #24]
 8000d4a:	4798      	blx	r3
 8000d4c:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 ff44 	bl	8001bdc <GetEPTxAddr>
 8000d54:	462a      	mov	r2, r5
 8000d56:	4601      	mov	r1, r0
 8000d58:	4640      	mov	r0, r8
 8000d5a:	f000 fd1b 	bl	8001794 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 8000d5e:	4629      	mov	r1, r5
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 ff5b 	bl	8001c1c <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8000d66:	8a63      	ldrh	r3, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8000d68:	8a22      	ldrh	r2, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8000d6a:	4813      	ldr	r0, [pc, #76]	; (8000db8 <DataStageIn+0x98>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8000d6c:	4913      	ldr	r1, [pc, #76]	; (8000dbc <DataStageIn+0x9c>)
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8000d6e:	1b52      	subs	r2, r2, r5
  pEPinfo->Usb_wOffset += Length;
 8000d70:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 8000d72:	2330      	movs	r3, #48	; 0x30
 8000d74:	8003      	strh	r3, [r0, #0]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8000d76:	8222      	strh	r2, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8000d78:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8000d7a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d7e:	683c      	ldr	r4, [r7, #0]
 8000d80:	800b      	strh	r3, [r1, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8000d82:	7226      	strb	r6, [r4, #8]
 8000d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == true)
 8000d88:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <DataStageIn+0xa0>)
 8000d8a:	780a      	ldrb	r2, [r1, #0]
 8000d8c:	b162      	cbz	r2, 8000da8 <DataStageIn+0x88>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <DataStageIn+0xa4>)
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <DataStageIn+0xa8>)
 8000d92:	6800      	ldr	r0, [r0, #0]
 8000d94:	4d08      	ldr	r5, [pc, #32]	; (8000db8 <DataStageIn+0x98>)
 8000d96:	b280      	uxth	r0, r0
 8000d98:	4402      	add	r2, r0
 8000d9a:	0052      	lsls	r2, r2, #1
 8000d9c:	2030      	movs	r0, #48	; 0x30
 8000d9e:	8013      	strh	r3, [r2, #0]
 8000da0:	8053      	strh	r3, [r2, #2]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = false;
 8000da2:	700b      	strb	r3, [r1, #0]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == true)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8000da4:	8028      	strh	r0, [r5, #0]
 8000da6:	e7ec      	b.n	8000d82 <DataStageIn+0x62>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <DataStageIn+0x98>)
 8000daa:	2210      	movs	r2, #16
 8000dac:	801a      	strh	r2, [r3, #0]
 8000dae:	2607      	movs	r6, #7
 8000db0:	e7e7      	b.n	8000d82 <DataStageIn+0x62>
 8000db2:	bf00      	nop
 8000db4:	200004f0 	.word	0x200004f0
 8000db8:	200004f8 	.word	0x200004f8
 8000dbc:	200004f6 	.word	0x200004f6
 8000dc0:	20000344 	.word	0x20000344
 8000dc4:	40005c50 	.word	0x40005c50
 8000dc8:	20003002 	.word	0x20003002

08000dcc <Standard_SetConfiguration>:
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <Standard_SetConfiguration+0x30>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8000dce:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <Standard_SetConfiguration+0x34>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7851      	ldrb	r1, [r2, #1]
 8000dd4:	78da      	ldrb	r2, [r3, #3]
 8000dd6:	4291      	cmp	r1, r2
 8000dd8:	d201      	bcs.n	8000dde <Standard_SetConfiguration+0x12>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8000dda:	2002      	movs	r0, #2
 8000ddc:	4770      	bx	lr
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8000dde:	7899      	ldrb	r1, [r3, #2]
 8000de0:	2900      	cmp	r1, #0
 8000de2:	d1fa      	bne.n	8000dda <Standard_SetConfiguration+0xe>
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8000de4:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8000de6:	889c      	ldrh	r4, [r3, #4]
 8000de8:	b10c      	cbz	r4, 8000dee <Standard_SetConfiguration+0x22>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8000dea:	2002      	movs	r0, #2
  }
}
 8000dec:	bd10      	pop	{r4, pc}
  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
    pUser_Standard_Requests->User_SetConfiguration();
 8000dee:	4905      	ldr	r1, [pc, #20]	; (8000e04 <Standard_SetConfiguration+0x38>)

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8000df0:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8000df2:	680b      	ldr	r3, [r1, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4798      	blx	r3
    return USB_SUCCESS;
 8000df8:	4620      	mov	r0, r4
 8000dfa:	bd10      	pop	{r4, pc}
 8000dfc:	200004f0 	.word	0x200004f0
 8000e00:	200002f4 	.word	0x200002f4
 8000e04:	200004ec 	.word	0x200004ec

08000e08 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8000e08:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <Standard_SetInterface+0x44>)
 8000e0c:	4c10      	ldr	r4, [pc, #64]	; (8000e50 <Standard_SetInterface+0x48>)
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	7958      	ldrb	r0, [r3, #5]
 8000e14:	78d9      	ldrb	r1, [r3, #3]
 8000e16:	6993      	ldr	r3, [r2, #24]
 8000e18:	4798      	blx	r3

  if (pInformation->Current_Configuration != 0)
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	7a9a      	ldrb	r2, [r3, #10]
 8000e1e:	b90a      	cbnz	r2, 8000e24 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8000e20:	2002      	movs	r0, #2
}
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d1fb      	bne.n	8000e20 <Standard_SetInterface+0x18>
 8000e28:	791a      	ldrb	r2, [r3, #4]
 8000e2a:	2a00      	cmp	r2, #0
 8000e2c:	d1f8      	bne.n	8000e20 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8000e2e:	789d      	ldrb	r5, [r3, #2]
 8000e30:	2d00      	cmp	r5, #0
 8000e32:	d1f5      	bne.n	8000e20 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <Standard_SetInterface+0x4c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8000e40:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8000e42:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8000e44:	731a      	strb	r2, [r3, #12]
 8000e46:	4628      	mov	r0, r5
 8000e48:	bd38      	pop	{r3, r4, r5, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200004c8 	.word	0x200004c8
 8000e50:	200004f0 	.word	0x200004f0
 8000e54:	200004ec 	.word	0x200004ec

08000e58 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8000e58:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <Standard_ClearFeature+0xc8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8000e60:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8000e64:	d003      	beq.n	8000e6e <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8000e66:	2802      	cmp	r0, #2
 8000e68:	d006      	beq.n	8000e78 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8000e6a:	2002      	movs	r0, #2
}
 8000e6c:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8000e6e:	7a5a      	ldrb	r2, [r3, #9]
 8000e70:	f022 0220 	bic.w	r2, r2, #32
 8000e74:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8000e78:	885a      	ldrh	r2, [r3, #2]
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d1f6      	bne.n	8000e6c <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8000e7e:	791a      	ldrb	r2, [r3, #4]
 8000e80:	2a00      	cmp	r2, #0
 8000e82:	d1f3      	bne.n	8000e6c <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8000e84:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 8000e86:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8000e8a:	0084      	lsls	r4, r0, #2
 8000e8c:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8000e90:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8000e92:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8000e96:	4d23      	ldr	r5, [pc, #140]	; (8000f24 <Standard_ClearFeature+0xcc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8000e98:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8000e9a:	782d      	ldrb	r5, [r5, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8000e9c:	bf4c      	ite	mi
 8000e9e:	f001 0130 	andmi.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8000ea2:	f401 5140 	andpl.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8000ea6:	42a8      	cmp	r0, r5
 8000ea8:	d2df      	bcs.n	8000e6a <Standard_ClearFeature+0x12>
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d0dd      	beq.n	8000e6a <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8000eae:	7a9b      	ldrb	r3, [r3, #10]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0da      	beq.n	8000e6a <Standard_ClearFeature+0x12>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8000eb4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000eb8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8000ebc:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8000ebe:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8000ec0:	d509      	bpl.n	8000ed6 <Standard_ClearFeature+0x7e>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8000ec2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000ec6:	2b10      	cmp	r3, #16
 8000ec8:	d01e      	beq.n	8000f08 <Standard_ClearFeature+0xb0>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <Standard_ClearFeature+0xd0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	4798      	blx	r3
    return USB_SUCCESS;
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8000ed6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8000eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ede:	d1f4      	bne.n	8000eca <Standard_ClearFeature+0x72>
      {
        if (Related_Endpoint == ENDP0)
 8000ee0:	b9d8      	cbnz	r0, 8000f1a <Standard_ClearFeature+0xc2>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <Standard_ClearFeature+0xd4>)
 8000ee4:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8000ee8:	f000 feba 	bl	8001c60 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	e7e0      	b.n	8000eca <Standard_ClearFeature+0x72>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8000f08:	b2c4      	uxtb	r4, r0
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f000 fe1a 	bl	8001b44 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8000f10:	4620      	mov	r0, r4
 8000f12:	2130      	movs	r1, #48	; 0x30
 8000f14:	f000 fcca 	bl	80018ac <SetEPTxStatus>
 8000f18:	e7d7      	b.n	8000eca <Standard_ClearFeature+0x72>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8000f1a:	f000 fe01 	bl	8001b20 <ClearDTOG_RX>
 8000f1e:	e7e5      	b.n	8000eec <Standard_ClearFeature+0x94>
 8000f20:	200004f0 	.word	0x200004f0
 8000f24:	200002f4 	.word	0x200002f4
 8000f28:	200004ec 	.word	0x200004ec
 8000f2c:	20000270 	.word	0x20000270

08000f30 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8000f30:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <Standard_SetEndPointFeature+0x8c>)
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	7942      	ldrb	r2, [r0, #5]
  rEP = wIndex0 & ~0x80;
 8000f38:	f022 0180 	bic.w	r1, r2, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8000f3c:	008c      	lsls	r4, r1, #2
 8000f3e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8000f42:	0615      	lsls	r5, r2, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8000f44:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8000f48:	4d1d      	ldr	r5, [pc, #116]	; (8000fc0 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8000f4a:	681b      	ldr	r3, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8000f4c:	782d      	ldrb	r5, [r5, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8000f4e:	bf4c      	ite	mi
 8000f50:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8000f54:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8000f58:	42a9      	cmp	r1, r5
 8000f5a:	d301      	bcc.n	8000f60 <Standard_SetEndPointFeature+0x30>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8000f5c:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8000f5e:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8000f60:	8841      	ldrh	r1, [r0, #2]
 8000f62:	2900      	cmp	r1, #0
 8000f64:	d1fa      	bne.n	8000f5c <Standard_SetEndPointFeature+0x2c>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f8      	beq.n	8000f5c <Standard_SetEndPointFeature+0x2c>
      || pInformation->Current_Configuration == 0)
 8000f6a:	7a83      	ldrb	r3, [r0, #10]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f5      	beq.n	8000f5c <Standard_SetEndPointFeature+0x2c>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8000f70:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000f74:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8000f78:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8000f7a:	6823      	ldr	r3, [r4, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8000f7c:	d511      	bpl.n	8000fa2 <Standard_SetEndPointFeature+0x72>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8000f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f083 0310 	eor.w	r3, r3, #16
 8000f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f94:	6023      	str	r3, [r4, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <Standard_SetEndPointFeature+0x94>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4798      	blx	r3
  return USB_SUCCESS;
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8000fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	e7ec      	b.n	8000f96 <Standard_SetEndPointFeature+0x66>
 8000fbc:	200004f0 	.word	0x200004f0
 8000fc0:	200002f4 	.word	0x200002f4
 8000fc4:	200004ec 	.word	0x200004ec

08000fc8 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8000fc8:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 8000fca:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <Standard_SetDeviceFeature+0x1c>)
  pUser_Standard_Requests->User_SetDeviceFeature();
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <Standard_SetDeviceFeature+0x20>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8000fce:	6812      	ldr	r2, [r2, #0]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8000fd0:	6819      	ldr	r1, [r3, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8000fd2:	7a53      	ldrb	r3, [r2, #9]
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	7253      	strb	r3, [r2, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8000fda:	69cb      	ldr	r3, [r1, #28]
 8000fdc:	4798      	blx	r3
  return USB_SUCCESS;
}
 8000fde:	2000      	movs	r0, #0
 8000fe0:	bd08      	pop	{r3, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200004f0 	.word	0x200004f0
 8000fe8:	200004ec 	.word	0x200004ec

08000fec <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <Standard_GetDescriptorData+0x18>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 8000ff2:	b110      	cbz	r0, 8000ffa <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8000ff4:	6808      	ldr	r0, [r1, #0]
 8000ff6:	4418      	add	r0, r3
}
 8000ff8:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8000ffa:	8889      	ldrh	r1, [r1, #4]
 8000ffc:	1acb      	subs	r3, r1, r3
 8000ffe:	8213      	strh	r3, [r2, #16]
    return 0;
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200004f0 	.word	0x200004f0

08001008 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8001008:	b510      	push	{r4, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <Post0_Process+0x34>)
 800100c:	2000      	movs	r0, #0
 800100e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001012:	f000 fe25 	bl	8001c60 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <Post0_Process+0x38>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	7a18      	ldrb	r0, [r3, #8]
 800101c:	2808      	cmp	r0, #8
 800101e:	d106      	bne.n	800102e <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001020:	4908      	ldr	r1, [pc, #32]	; (8001044 <Post0_Process+0x3c>)
    vSetEPTxStatus(EP_TX_STALL);
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <Post0_Process+0x40>)
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001024:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8001028:	2210      	movs	r2, #16
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 800102a:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800102c:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800102e:	f1a0 0009 	sub.w	r0, r0, #9
 8001032:	fab0 f080 	clz	r0, r0
 8001036:	0940      	lsrs	r0, r0, #5
 8001038:	bd10      	pop	{r4, pc}
 800103a:	bf00      	nop
 800103c:	20000270 	.word	0x20000270
 8001040:	200004f0 	.word	0x200004f0
 8001044:	200004f6 	.word	0x200004f6
 8001048:	200004f8 	.word	0x200004f8

0800104c <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800104e:	4ba9      	ldr	r3, [pc, #676]	; (80012f4 <Setup0_Process+0x2a8>)

  if (pInformation->ControlState != PAUSE)
 8001050:	4ea9      	ldr	r6, [pc, #676]	; (80012f8 <Setup0_Process+0x2ac>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001052:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8001054:	6834      	ldr	r4, [r6, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001056:	4ba9      	ldr	r3, [pc, #676]	; (80012fc <Setup0_Process+0x2b0>)
 8001058:	b292      	uxth	r2, r2
 800105a:	4413      	add	r3, r2

  if (pInformation->ControlState != PAUSE)
 800105c:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800105e:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 8001060:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8001062:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001064:	681d      	ldr	r5, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8001066:	d047      	beq.n	80010f8 <Setup0_Process+0xac>
 8001068:	b2ad      	uxth	r5, r5
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800106a:	006d      	lsls	r5, r5, #1
 800106c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001070:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8001074:	782b      	ldrb	r3, [r5, #0]
 8001076:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8001078:	786b      	ldrb	r3, [r5, #1]
 800107a:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800107c:	88a8      	ldrh	r0, [r5, #4]
 800107e:	f000 ffbd 	bl	8001ffc <ByteSwap>
 8001082:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8001084:	8928      	ldrh	r0, [r5, #8]
 8001086:	6837      	ldr	r7, [r6, #0]
 8001088:	f000 ffb8 	bl	8001ffc <ByteSwap>
 800108c:	80b8      	strh	r0, [r7, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800108e:	6834      	ldr	r4, [r6, #0]
 8001090:	89ab      	ldrh	r3, [r5, #12]
 8001092:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8001094:	2201      	movs	r2, #1
 8001096:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8001098:	2b00      	cmp	r3, #0
 800109a:	d032      	beq.n	8001102 <Setup0_Process+0xb6>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 800109c:	7860      	ldrb	r0, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800109e:	2806      	cmp	r0, #6
 80010a0:	f000 8089 	beq.w	80011b6 <Setup0_Process+0x16a>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d148      	bne.n	800113a <Setup0_Process+0xee>
 80010a8:	8861      	ldrh	r1, [r4, #2]
 80010aa:	2900      	cmp	r1, #0
 80010ac:	f000 8097 	beq.w	80011de <Setup0_Process+0x192>
 80010b0:	4d93      	ldr	r5, [pc, #588]	; (8001300 <Setup0_Process+0x2b4>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80010b2:	682b      	ldr	r3, [r5, #0]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80010b8:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 80010ba:	6833      	ldr	r3, [r6, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 80010bc:	d04d      	beq.n	800115a <Setup0_Process+0x10e>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80010be:	8a1a      	ldrh	r2, [r3, #16]
 80010c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010c4:	428a      	cmp	r2, r1
 80010c6:	d048      	beq.n	800115a <Setup0_Process+0x10e>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80010c8:	2802      	cmp	r0, #2
 80010ca:	d00f      	beq.n	80010ec <Setup0_Process+0xa0>
 80010cc:	b172      	cbz	r2, 80010ec <Setup0_Process+0xa0>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80010ce:	f993 1000 	ldrsb.w	r1, [r3]
 80010d2:	2900      	cmp	r1, #0
 80010d4:	f2c0 80b8 	blt.w	8001248 <Setup0_Process+0x1fc>
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80010d8:	498a      	ldr	r1, [pc, #552]	; (8001304 <Setup0_Process+0x2b8>)
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80010da:	2203      	movs	r2, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80010dc:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80010e0:	8008      	strh	r0, [r1, #0]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80010e2:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 80010e4:	f7ff ff90 	bl	8001008 <Post0_Process>
}
 80010e8:	b003      	add	sp, #12
 80010ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80010ec:	2208      	movs	r2, #8
 80010ee:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 80010f0:	f7ff ff8a 	bl	8001008 <Post0_Process>
}
 80010f4:	b003      	add	sp, #12
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f8:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 80010fa:	2201      	movs	r2, #1
 80010fc:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1cc      	bne.n	800109c <Setup0_Process+0x50>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001102:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8001104:	7865      	ldrb	r5, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001106:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800110a:	d02c      	beq.n	8001166 <Setup0_Process+0x11a>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800110c:	2b01      	cmp	r3, #1
 800110e:	f000 80b0 	beq.w	8001272 <Setup0_Process+0x226>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001112:	2b02      	cmp	r3, #2
 8001114:	f000 80cf 	beq.w	80012b6 <Setup0_Process+0x26a>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8001118:	4b79      	ldr	r3, [pc, #484]	; (8001300 <Setup0_Process+0x2b4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4628      	mov	r0, r5
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001122:	2803      	cmp	r0, #3
 8001124:	f000 8101 	beq.w	800132a <Setup0_Process+0x2de>
 8001128:	6834      	ldr	r4, [r6, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800112a:	2800      	cmp	r0, #0
 800112c:	d034      	beq.n	8001198 <Setup0_Process+0x14c>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 800112e:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001130:	7223      	strb	r3, [r4, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001132:	f7ff ff69 	bl	8001008 <Post0_Process>
}
 8001136:	b003      	add	sp, #12
 8001138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800113a:	2808      	cmp	r0, #8
 800113c:	d161      	bne.n	8001202 <Setup0_Process+0x1b6>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800113e:	7823      	ldrb	r3, [r4, #0]
 8001140:	065b      	lsls	r3, r3, #25
 8001142:	d1b5      	bne.n	80010b0 <Setup0_Process+0x64>
    {
      CopyRoutine = Standard_GetConfiguration;
 8001144:	4b70      	ldr	r3, [pc, #448]	; (8001308 <Setup0_Process+0x2bc>)
  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001146:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001148:	2000      	movs	r0, #0
 800114a:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800114c:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800114e:	6833      	ldr	r3, [r6, #0]
 8001150:	8a1a      	ldrh	r2, [r3, #16]
 8001152:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001156:	428a      	cmp	r2, r1
 8001158:	d1b8      	bne.n	80010cc <Setup0_Process+0x80>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 800115a:	2209      	movs	r2, #9
 800115c:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800115e:	f7ff ff53 	bl	8001008 <Post0_Process>
}
 8001162:	b003      	add	sp, #12
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8001166:	2d09      	cmp	r5, #9
 8001168:	f000 80c0 	beq.w	80012ec <Setup0_Process+0x2a0>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800116c:	2d05      	cmp	r5, #5
 800116e:	f000 8090 	beq.w	8001292 <Setup0_Process+0x246>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8001172:	2d03      	cmp	r5, #3
 8001174:	f000 80a8 	beq.w	80012c8 <Setup0_Process+0x27c>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001178:	2d01      	cmp	r5, #1
 800117a:	d1cd      	bne.n	8001118 <Setup0_Process+0xcc>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800117c:	78e3      	ldrb	r3, [r4, #3]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d1ca      	bne.n	8001118 <Setup0_Process+0xcc>
          && pInformation->USBwIndex == 0
 8001182:	88a3      	ldrh	r3, [r4, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1c7      	bne.n	8001118 <Setup0_Process+0xcc>
          && ValBit(pInformation->Current_Feature, 5))
 8001188:	7a63      	ldrb	r3, [r4, #9]
 800118a:	069f      	lsls	r7, r3, #26
 800118c:	d5c4      	bpl.n	8001118 <Setup0_Process+0xcc>
      {
        Result = Standard_ClearFeature();
 800118e:	f7ff fe63 	bl	8000e58 <Standard_ClearFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8001192:	2800      	cmp	r0, #0
 8001194:	d1c0      	bne.n	8001118 <Setup0_Process+0xcc>
 8001196:	6834      	ldr	r4, [r6, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001198:	4a56      	ldr	r2, [pc, #344]	; (80012f4 <Setup0_Process+0x2a8>)
 800119a:	4b5c      	ldr	r3, [pc, #368]	; (800130c <Setup0_Process+0x2c0>)
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	495c      	ldr	r1, [pc, #368]	; (8001310 <Setup0_Process+0x2c4>)
 80011a0:	b292      	uxth	r2, r2
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2200      	movs	r2, #0
 80011a8:	801a      	strh	r2, [r3, #0]
 80011aa:	805a      	strh	r2, [r3, #2]
 80011ac:	2030      	movs	r0, #48	; 0x30
 80011ae:	2306      	movs	r3, #6
 80011b0:	8008      	strh	r0, [r1, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80011b2:	7223      	strb	r3, [r4, #8]
 80011b4:	e7bd      	b.n	8001132 <Setup0_Process+0xe6>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80011b6:	7823      	ldrb	r3, [r4, #0]
 80011b8:	065d      	lsls	r5, r3, #25
 80011ba:	f47f af79 	bne.w	80010b0 <Setup0_Process+0x64>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 80011be:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80011c0:	4d4f      	ldr	r5, [pc, #316]	; (8001300 <Setup0_Process+0x2b4>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	f000 80ae 	beq.w	8001324 <Setup0_Process+0x2d8>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d05f      	beq.n	800128c <Setup0_Process+0x240>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	f47f af70 	bne.w	80010b2 <Setup0_Process+0x66>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1b5      	bne.n	8001146 <Setup0_Process+0xfa>
 80011da:	2006      	movs	r0, #6
 80011dc:	e769      	b.n	80010b2 <Setup0_Process+0x66>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80011de:	6863      	ldr	r3, [r4, #4]
 80011e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80011e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011e8:	f47f af62 	bne.w	80010b0 <Setup0_Process+0x64>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80011ec:	7820      	ldrb	r0, [r4, #0]
 80011ee:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80011f2:	f040 809e 	bne.w	8001332 <Setup0_Process+0x2e6>
        && (pInformation->USBwIndex == 0))
 80011f6:	88a3      	ldrh	r3, [r4, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f47f af59 	bne.w	80010b0 <Setup0_Process+0x64>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 80011fe:	4b45      	ldr	r3, [pc, #276]	; (8001314 <Setup0_Process+0x2c8>)
 8001200:	e7a1      	b.n	8001146 <Setup0_Process+0xfa>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8001202:	280a      	cmp	r0, #10
 8001204:	f47f af54 	bne.w	80010b0 <Setup0_Process+0x64>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001208:	7823      	ldrb	r3, [r4, #0]
 800120a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800120e:	2b01      	cmp	r3, #1
 8001210:	f47f af4e 	bne.w	80010b0 <Setup0_Process+0x64>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001214:	7aa3      	ldrb	r3, [r4, #10]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f43f af4a 	beq.w	80010b0 <Setup0_Process+0x64>
 800121c:	8861      	ldrh	r1, [r4, #2]
 800121e:	2900      	cmp	r1, #0
 8001220:	f47f af46 	bne.w	80010b0 <Setup0_Process+0x64>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001224:	6863      	ldr	r3, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001226:	4d36      	ldr	r5, [pc, #216]	; (8001300 <Setup0_Process+0x2b4>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	f47f af3f 	bne.w	80010b2 <Setup0_Process+0x66>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	7960      	ldrb	r0, [r4, #5]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4798      	blx	r3
 800123c:	2800      	cmp	r0, #0
 800123e:	f040 80b7 	bne.w	80013b0 <Setup0_Process+0x364>
 8001242:	6834      	ldr	r4, [r6, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8001244:	4b34      	ldr	r3, [pc, #208]	; (8001318 <Setup0_Process+0x2cc>)
 8001246:	e77e      	b.n	8001146 <Setup0_Process+0xfa>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8001248:	88d9      	ldrh	r1, [r3, #6]
 800124a:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800124c:	9801      	ldr	r0, [sp, #4]
 800124e:	4282      	cmp	r2, r0
 8001250:	d815      	bhi.n	800127e <Setup0_Process+0x232>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001252:	428a      	cmp	r2, r1
 8001254:	d274      	bcs.n	8001340 <Setup0_Process+0x2f4>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001256:	492a      	ldr	r1, [pc, #168]	; (8001300 <Setup0_Process+0x2b4>)
 8001258:	6809      	ldr	r1, [r1, #0]
 800125a:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 800125e:	b281      	uxth	r1, r0
 8001260:	428a      	cmp	r2, r1
 8001262:	d272      	bcs.n	800134a <Setup0_Process+0x2fe>
      {
        Data_Mul_MaxPacketSize = false;
 8001264:	4a2d      	ldr	r2, [pc, #180]	; (800131c <Setup0_Process+0x2d0>)
 8001266:	2000      	movs	r0, #0
 8001268:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = true;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800126a:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 800126c:	f7ff fd58 	bl	8000d20 <DataStageIn>
 8001270:	e73e      	b.n	80010f0 <Setup0_Process+0xa4>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001272:	2d0b      	cmp	r5, #11
 8001274:	f47f af50 	bne.w	8001118 <Setup0_Process+0xcc>
    {
      Result = Standard_SetInterface();
 8001278:	f7ff fdc6 	bl	8000e08 <Standard_SetInterface>
 800127c:	e789      	b.n	8001192 <Setup0_Process+0x146>
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <Setup0_Process+0x2b4>)
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001280:	9901      	ldr	r1, [sp, #4]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	8219      	strh	r1, [r3, #16]
 8001286:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800128a:	e7ee      	b.n	800126a <Setup0_Process+0x21e>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	e7a1      	b.n	80011d6 <Setup0_Process+0x18a>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001292:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f6ff af49 	blt.w	800112e <Setup0_Process+0xe2>
 800129c:	78a3      	ldrb	r3, [r4, #2]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f47f af45 	bne.w	800112e <Setup0_Process+0xe2>
          || (pInformation->USBwIndex != 0)
 80012a4:	88a3      	ldrh	r3, [r4, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f47f af41 	bne.w	800112e <Setup0_Process+0xe2>
          || (pInformation->Current_Configuration != 0))
 80012ac:	7aa3      	ldrb	r3, [r4, #10]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f43f af72 	beq.w	8001198 <Setup0_Process+0x14c>
 80012b4:	e73b      	b.n	800112e <Setup0_Process+0xe2>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80012b6:	2d01      	cmp	r5, #1
 80012b8:	f43f af69 	beq.w	800118e <Setup0_Process+0x142>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 80012bc:	2d03      	cmp	r5, #3
 80012be:	f47f af2b 	bne.w	8001118 <Setup0_Process+0xcc>
    {
      Result = Standard_SetEndPointFeature();
 80012c2:	f7ff fe35 	bl	8000f30 <Standard_SetEndPointFeature>
 80012c6:	e764      	b.n	8001192 <Setup0_Process+0x146>
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 80012c8:	78e3      	ldrb	r3, [r4, #3]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	f47f af24 	bne.w	8001118 <Setup0_Process+0xcc>
          && (pInformation->USBwIndex == 0))
 80012d0:	88a3      	ldrh	r3, [r4, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f47f af20 	bne.w	8001118 <Setup0_Process+0xcc>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 80012d8:	7a63      	ldrb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <Setup0_Process+0x2d4>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 80012dc:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 80012e0:	6812      	ldr	r2, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 80012e2:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80012e4:	69d3      	ldr	r3, [r2, #28]
 80012e6:	4798      	blx	r3
 80012e8:	6834      	ldr	r4, [r6, #0]
 80012ea:	e755      	b.n	8001198 <Setup0_Process+0x14c>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 80012ec:	f7ff fd6e 	bl	8000dcc <Standard_SetConfiguration>
 80012f0:	e74f      	b.n	8001192 <Setup0_Process+0x146>
 80012f2:	bf00      	nop
 80012f4:	40005c50 	.word	0x40005c50
 80012f8:	200004f0 	.word	0x200004f0
 80012fc:	20003004 	.word	0x20003004
 8001300:	200004c8 	.word	0x200004c8
 8001304:	200004f6 	.word	0x200004f6
 8001308:	08000c45 	.word	0x08000c45
 800130c:	20003002 	.word	0x20003002
 8001310:	200004f8 	.word	0x200004f8
 8001314:	08000c95 	.word	0x08000c95
 8001318:	08000c6d 	.word	0x08000c6d
 800131c:	20000344 	.word	0x20000344
 8001320:	200004ec 	.word	0x200004ec
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	e755      	b.n	80011d6 <Setup0_Process+0x18a>
 800132a:	6834      	ldr	r4, [r6, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 800132c:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800132e:	7223      	strb	r3, [r4, #8]
 8001330:	e6ff      	b.n	8001132 <Setup0_Process+0xe6>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001332:	2801      	cmp	r0, #1
 8001334:	d02f      	beq.n	8001396 <Setup0_Process+0x34a>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001336:	2802      	cmp	r0, #2
 8001338:	d011      	beq.n	800135e <Setup0_Process+0x312>
 800133a:	4608      	mov	r0, r1
 800133c:	4d1e      	ldr	r5, [pc, #120]	; (80013b8 <Setup0_Process+0x36c>)
 800133e:	e6b8      	b.n	80010b2 <Setup0_Process+0x66>
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <Setup0_Process+0x36c>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8001348:	e78f      	b.n	800126a <Setup0_Process+0x21e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = false;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800134a:	fb92 f4f0 	sdiv	r4, r2, r0
 800134e:	fb00 2214 	mls	r2, r0, r4, r2
 8001352:	2a00      	cmp	r2, #0
 8001354:	d189      	bne.n	800126a <Setup0_Process+0x21e>
      {
        Data_Mul_MaxPacketSize = true;
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <Setup0_Process+0x370>)
 8001358:	2001      	movs	r0, #1
 800135a:	7010      	strb	r0, [r2, #0]
 800135c:	e785      	b.n	800126a <Setup0_Process+0x21e>
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800135e:	7960      	ldrb	r0, [r4, #5]
 8001360:	f000 020f 	and.w	r2, r0, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001364:	0093      	lsls	r3, r2, #2
 8001366:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 800136a:	0601      	lsls	r1, r0, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800136c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001370:	4913      	ldr	r1, [pc, #76]	; (80013c0 <Setup0_Process+0x374>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001372:	681b      	ldr	r3, [r3, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001374:	7809      	ldrb	r1, [r1, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001376:	bf4c      	ite	mi
 8001378:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800137c:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001380:	428a      	cmp	r2, r1
 8001382:	d206      	bcs.n	8001392 <Setup0_Process+0x346>
 8001384:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 8001388:	d103      	bne.n	8001392 <Setup0_Process+0x346>
          && (Status != 0))
 800138a:	2b00      	cmp	r3, #0
 800138c:	f47f af37 	bne.w	80011fe <Setup0_Process+0x1b2>
 8001390:	e68e      	b.n	80010b0 <Setup0_Process+0x64>
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001392:	2000      	movs	r0, #0
 8001394:	e68c      	b.n	80010b0 <Setup0_Process+0x64>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8001396:	4d08      	ldr	r5, [pc, #32]	; (80013b8 <Setup0_Process+0x36c>)
 8001398:	7960      	ldrb	r0, [r4, #5]
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4798      	blx	r3
 80013a0:	b930      	cbnz	r0, 80013b0 <Setup0_Process+0x364>
          && (pInformation->Current_Configuration != 0))
 80013a2:	6834      	ldr	r4, [r6, #0]
 80013a4:	7aa3      	ldrb	r3, [r4, #10]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f47f af29 	bne.w	80011fe <Setup0_Process+0x1b2>
 80013ac:	7860      	ldrb	r0, [r4, #1]
 80013ae:	e680      	b.n	80010b2 <Setup0_Process+0x66>
 80013b0:	6833      	ldr	r3, [r6, #0]
 80013b2:	7858      	ldrb	r0, [r3, #1]
 80013b4:	e67d      	b.n	80010b2 <Setup0_Process+0x66>
 80013b6:	bf00      	nop
 80013b8:	200004c8 	.word	0x200004c8
 80013bc:	20000344 	.word	0x20000344
 80013c0:	200002f4 	.word	0x200002f4

080013c4 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 80013c6:	4d32      	ldr	r5, [pc, #200]	; (8001490 <Out0_Process+0xcc>)
 80013c8:	682c      	ldr	r4, [r5, #0]
 80013ca:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d007      	beq.n	80013e0 <Out0_Process+0x1c>
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d005      	beq.n	80013e0 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d009      	beq.n	80013ec <Out0_Process+0x28>
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d007      	beq.n	80013ec <Out0_Process+0x28>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d037      	beq.n	8001450 <Out0_Process+0x8c>
 80013e0:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80013e2:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
}
 80013e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80013e8:	f7ff be0e 	b.w	8001008 <Post0_Process>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80013ec:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80013ee:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80013f0:	b1b3      	cbz	r3, 8001420 <Out0_Process+0x5c>
 80013f2:	b1b2      	cbz	r2, 8001422 <Out0_Process+0x5e>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80013f4:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80013f6:	4296      	cmp	r6, r2
 80013f8:	bf28      	it	cs
 80013fa:	4616      	movcs	r6, r2
 80013fc:	4630      	mov	r0, r6
 80013fe:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8001400:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8001402:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8001404:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 8001406:	4433      	add	r3, r6
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001408:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800140a:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800140c:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800140e:	2000      	movs	r0, #0
 8001410:	f000 fbf4 	bl	8001bfc <GetEPRxAddr>
 8001414:	4632      	mov	r2, r6
 8001416:	4601      	mov	r1, r0
 8001418:	4638      	mov	r0, r7
 800141a:	f000 f9d7 	bl	80017cc <PMAToUserBufferCopy>
 800141e:	8a22      	ldrh	r2, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8001420:	b9ea      	cbnz	r2, 800145e <Out0_Process+0x9a>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001422:	8aa3      	ldrh	r3, [r4, #20]
 8001424:	b353      	cbz	r3, 800147c <Out0_Process+0xb8>
 8001426:	491b      	ldr	r1, [pc, #108]	; (8001494 <Out0_Process+0xd0>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001428:	682c      	ldr	r4, [r5, #0]
      USB_StatusIn();
 800142a:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <Out0_Process+0xd4>)
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <Out0_Process+0xd8>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800142e:	2006      	movs	r0, #6
 8001430:	7220      	strb	r0, [r4, #8]
      USB_StatusIn();
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	b292      	uxth	r2, r2
 8001436:	4413      	add	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2200      	movs	r2, #0
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	805a      	strh	r2, [r3, #2]
 8001440:	7a23      	ldrb	r3, [r4, #8]
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8001442:	7223      	strb	r3, [r4, #8]
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8001444:	2230      	movs	r2, #48	; 0x30
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
}
 8001446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 800144a:	800a      	strh	r2, [r1, #0]
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800144c:	f7ff bddc 	b.w	8001008 <Post0_Process>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <Out0_Process+0xdc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	4798      	blx	r3
 8001458:	682c      	ldr	r4, [r5, #0]
 800145a:	2308      	movs	r3, #8
 800145c:	e7c1      	b.n	80013e2 <Out0_Process+0x1e>

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <Out0_Process+0xe0>)
    SetEPTxCount(ENDP0, 0);
 8001460:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001462:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8001466:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001468:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800146a:	f000 fbd7 	bl	8001c1c <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800146e:	8a23      	ldrh	r3, [r4, #16]
 8001470:	8aa2      	ldrh	r2, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <Out0_Process+0xd0>)
 8001474:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001476:	429a      	cmp	r2, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001478:	8008      	strh	r0, [r1, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800147a:	d803      	bhi.n	8001484 <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
 800147c:	682c      	ldr	r4, [r5, #0]
 800147e:	2303      	movs	r3, #3
 8001480:	7223      	strb	r3, [r4, #8]
 8001482:	e7ae      	b.n	80013e2 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0cf      	beq.n	8001428 <Out0_Process+0x64>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8001488:	682c      	ldr	r4, [r5, #0]
 800148a:	2305      	movs	r3, #5
 800148c:	7223      	strb	r3, [r4, #8]
 800148e:	e7a8      	b.n	80013e2 <Out0_Process+0x1e>
 8001490:	200004f0 	.word	0x200004f0
 8001494:	200004f8 	.word	0x200004f8
 8001498:	40005c50 	.word	0x40005c50
 800149c:	20003002 	.word	0x20003002
 80014a0:	200004c8 	.word	0x200004c8
 80014a4:	200004f6 	.word	0x200004f6

080014a8 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 80014a8:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <SetDeviceAddress+0x34>)
 80014ac:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80014ae:	b17e      	cbz	r6, 80014d0 <SetDeviceAddress+0x28>
 80014b0:	4c0b      	ldr	r4, [pc, #44]	; (80014e0 <SetDeviceAddress+0x38>)
 80014b2:	2200      	movs	r2, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80014b4:	6825      	ldr	r5, [r4, #0]
 80014b6:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80014ba:	f640 730f 	movw	r3, #3855	; 0xf0f
 80014be:	402b      	ands	r3, r5
 80014c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80014c4:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80014c6:	430b      	orrs	r3, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80014c8:	4296      	cmp	r6, r2
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80014ca:	f844 3b04 	str.w	r3, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80014ce:	d1f1      	bne.n	80014b4 <SetDeviceAddress+0xc>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SetDeviceAddress+0x3c>)
 80014d2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80014d6:	6018      	str	r0, [r3, #0]
}
 80014d8:	bc70      	pop	{r4, r5, r6}
 80014da:	4770      	bx	lr
 80014dc:	200002f4 	.word	0x200002f4
 80014e0:	40005c00 	.word	0x40005c00
 80014e4:	40005c4c 	.word	0x40005c4c

080014e8 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 80014e8:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 80014ea:	4c18      	ldr	r4, [pc, #96]	; (800154c <In0_Process+0x64>)
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80014f0:	2a02      	cmp	r2, #2
 80014f2:	d017      	beq.n	8001524 <In0_Process+0x3c>
 80014f4:	2a04      	cmp	r2, #4
 80014f6:	d015      	beq.n	8001524 <In0_Process+0x3c>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 80014f8:	2a06      	cmp	r2, #6
 80014fa:	d005      	beq.n	8001508 <In0_Process+0x20>
 80014fc:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80014fe:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
}
 8001500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8001504:	f7ff bd80 	b.w	8001008 <Post0_Process>
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001508:	785a      	ldrb	r2, [r3, #1]
 800150a:	2a05      	cmp	r2, #5
 800150c:	d013      	beq.n	8001536 <In0_Process+0x4e>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <In0_Process+0x68>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4798      	blx	r3
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800151a:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
}
 800151c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8001520:	f7ff bd72 	b.w	8001008 <Post0_Process>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8001524:	f7ff fbfc 	bl	8000d20 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	7a1a      	ldrb	r2, [r3, #8]
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800152c:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
}
 800152e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8001532:	f7ff bd69 	b.w	8001008 <Post0_Process>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8001536:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001538:	0652      	lsls	r2, r2, #25
 800153a:	d1e8      	bne.n	800150e <In0_Process+0x26>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800153c:	78d8      	ldrb	r0, [r3, #3]
 800153e:	f7ff ffb3 	bl	80014a8 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <In0_Process+0x6c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4798      	blx	r3
 800154a:	e7e0      	b.n	800150e <In0_Process+0x26>
 800154c:	200004f0 	.word	0x200004f0
 8001550:	200004c8 	.word	0x200004c8
 8001554:	200004ec 	.word	0x200004ec

08001558 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop

0800155c <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800155c:	b430      	push	{r4, r5}
  pInformation = &Device_Info;
 800155e:	4d07      	ldr	r5, [pc, #28]	; (800157c <USB_Init+0x20>)
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8001562:	4c08      	ldr	r4, [pc, #32]	; (8001584 <USB_Init+0x28>)
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 8001566:	4909      	ldr	r1, [pc, #36]	; (800158c <USB_Init+0x30>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8001568:	602a      	str	r2, [r5, #0]
  pInformation->ControlState = 2;
 800156a:	2502      	movs	r5, #2
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <USB_Init+0x34>)
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 800156e:	7215      	strb	r5, [r2, #8]
  pProperty = &Device_Property;
 8001570:	6023      	str	r3, [r4, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8001572:	6008      	str	r0, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8001574:	681b      	ldr	r3, [r3, #0]
}
 8001576:	bc30      	pop	{r4, r5}
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
  /* Initialize devices one by one */
  pProperty->Init();
 8001578:	4718      	bx	r3
 800157a:	bf00      	nop
 800157c:	200004f0 	.word	0x200004f0
 8001580:	200004d0 	.word	0x200004d0
 8001584:	200004c8 	.word	0x200004c8
 8001588:	20000270 	.word	0x20000270
 800158c:	200004ec 	.word	0x200004ec
 8001590:	200002d0 	.word	0x200002d0

08001594 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8001594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001598:	b082      	sub	sp, #8
  __IO uint16_t wEPVal = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8001700 <CTR_LP+0x16c>
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80015a0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800170c <CTR_LP+0x178>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80015a4:	4d53      	ldr	r5, [pc, #332]	; (80016f4 <CTR_LP+0x160>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80015a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80015aa:	f8d8 2000 	ldr.w	r2, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80015ae:	4c52      	ldr	r4, [pc, #328]	; (80016f8 <CTR_LP+0x164>)
	    SaveTState = SaveRState & EPTX_STAT;
 80015b0:	4e52      	ldr	r6, [pc, #328]	; (80016fc <CTR_LP+0x168>)
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80015b2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8001710 <CTR_LP+0x17c>
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80015b6:	4852      	ldr	r0, [pc, #328]	; (8001700 <CTR_LP+0x16c>)
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80015b8:	4f4e      	ldr	r7, [pc, #312]	; (80016f4 <CTR_LP+0x160>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80015ba:	b291      	uxth	r1, r2
 80015bc:	0412      	lsls	r2, r2, #16
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80015be:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80015c2:	f8a9 1000 	strh.w	r1, [r9]
 80015c6:	f140 808a 	bpl.w	80016de <CTR_LP+0x14a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80015ca:	8802      	ldrh	r2, [r0, #0]
 80015cc:	f002 020f 	and.w	r2, r2, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80015d0:	0091      	lsls	r1, r2, #2
 80015d2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80015d6:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80015da:	f88a 2000 	strb.w	r2, [sl]
    if (EPindex == 0)
 80015de:	bb6a      	cbnz	r2, 800163c <CTR_LP+0xa8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80015e0:	6822      	ldr	r2, [r4, #0]
 80015e2:	b292      	uxth	r2, r2
 80015e4:	802a      	strh	r2, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 80015e6:	882a      	ldrh	r2, [r5, #0]
 80015e8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80015ec:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 80015ee:	882a      	ldrh	r2, [r5, #0]
 80015f0:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80015f4:	802a      	strh	r2, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	4013      	ands	r3, r2
 80015fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80015fe:	f083 0320 	eor.w	r3, r3, #32
 8001602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160a:	6023      	str	r3, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 800160c:	8803      	ldrh	r3, [r0, #0]
 800160e:	06d8      	lsls	r0, r3, #27
 8001610:	d53e      	bpl.n	8001690 <CTR_LP+0xfc>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800161a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800161e:	0519      	lsls	r1, r3, #20
 8001620:	d460      	bmi.n	80016e4 <CTR_LP+0x150>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8001622:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001626:	b21b      	sxth	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	dabe      	bge.n	80015aa <CTR_LP+0x16>
        {
          _ClearEP_CTR_RX(ENDP0);
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001632:	4013      	ands	r3, r2
 8001634:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8001636:	f7ff fec5 	bl	80013c4 <Out0_Process>
 800163a:	e030      	b.n	800169e <CTR_LP+0x10a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800163c:	680b      	ldr	r3, [r1, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8001644:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001648:	b21b      	sxth	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	db15      	blt.n	800167a <CTR_LP+0xe6>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800164e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001652:	0619      	lsls	r1, r3, #24
 8001654:	d5a9      	bpl.n	80015aa <CTR_LP+0x16>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8001656:	f89a 2000 	ldrb.w	r2, [sl]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800165a:	492a      	ldr	r1, [pc, #168]	; (8001704 <CTR_LP+0x170>)
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800165c:	0093      	lsls	r3, r2, #2
 800165e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001662:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8001666:	3a01      	subs	r2, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8001668:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800166a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800166e:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8001672:	4002      	ands	r2, r0
 8001674:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8001676:	4788      	blx	r1
 8001678:	e797      	b.n	80015aa <CTR_LP+0x16>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800167a:	680c      	ldr	r4, [r1, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800167c:	4822      	ldr	r0, [pc, #136]	; (8001708 <CTR_LP+0x174>)
 800167e:	3a01      	subs	r2, #1
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8001680:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001684:	4023      	ands	r3, r4

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8001686:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800168a:	600b      	str	r3, [r1, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800168c:	4790      	blx	r2
 800168e:	e7de      	b.n	800164e <CTR_LP+0xba>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8001696:	4013      	ands	r3, r2
 8001698:	6023      	str	r3, [r4, #0]
        In0_Process();
 800169a:	f7ff ff25 	bl	80014e8 <In0_Process>
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800169e:	6821      	ldr	r1, [r4, #0]
 80016a0:	883a      	ldrh	r2, [r7, #0]
 80016a2:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80016a6:	04d2      	lsls	r2, r2, #19
 80016a8:	883a      	ldrh	r2, [r7, #0]
 80016aa:	ea03 0301 	and.w	r3, r3, r1
 80016ae:	bf48      	it	mi
 80016b0:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 80016b4:	0495      	lsls	r5, r2, #18
 80016b6:	8832      	ldrh	r2, [r6, #0]
 80016b8:	bf48      	it	mi
 80016ba:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 80016be:	06d4      	lsls	r4, r2, #27
 80016c0:	8832      	ldrh	r2, [r6, #0]
 80016c2:	bf48      	it	mi
 80016c4:	f083 0310 	eormi.w	r3, r3, #16
 80016c8:	0690      	lsls	r0, r2, #26
 80016ca:	bf48      	it	mi
 80016cc:	f083 0320 	eormi.w	r3, r3, #32
 80016d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <CTR_LP+0x164>)
 80016da:	b29b      	uxth	r3, r3
 80016dc:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 80016de:	b002      	add	sp, #8
 80016e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 80016e4:	6822      	ldr	r2, [r4, #0]
 80016e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016ea:	4013      	ands	r3, r2
 80016ec:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 80016ee:	f7ff fcad 	bl	800104c <Setup0_Process>
 80016f2:	e7d4      	b.n	800169e <CTR_LP+0x10a>
 80016f4:	200004f6 	.word	0x200004f6
 80016f8:	40005c00 	.word	0x40005c00
 80016fc:	200004f8 	.word	0x200004f8
 8001700:	2000049a 	.word	0x2000049a
 8001704:	2000024c 	.word	0x2000024c
 8001708:	20000230 	.word	0x20000230
 800170c:	40005c44 	.word	0x40005c44
 8001710:	200004cc 	.word	0x200004cc

08001714 <CTR_HP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_HP(void)
{
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	4d1a      	ldr	r5, [pc, #104]	; (8001780 <CTR_HP+0x6c>)
  uint32_t wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8001718:	4c1a      	ldr	r4, [pc, #104]	; (8001784 <CTR_HP+0x70>)
  {
    _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800171a:	4f1b      	ldr	r7, [pc, #108]	; (8001788 <CTR_HP+0x74>)
*******************************************************************************/
void CTR_HP(void)
{
  uint32_t wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800171c:	462e      	mov	r6, r5
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	b29a      	uxth	r2, r3
 8001722:	041b      	lsls	r3, r3, #16
  {
    _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
 8001724:	f647 71ff 	movw	r1, #32767	; 0x7fff
*******************************************************************************/
void CTR_HP(void)
{
  uint32_t wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8001728:	802a      	strh	r2, [r5, #0]
 800172a:	d528      	bpl.n	800177e <CTR_HP+0x6a>
  {
    _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
 800172c:	6021      	str	r1, [r4, #0]
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800172e:	8832      	ldrh	r2, [r6, #0]
 8001730:	f002 020f 	and.w	r2, r2, #15
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
 8001734:	0093      	lsls	r3, r2, #2
 8001736:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800173a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800173e:	703a      	strb	r2, [r7, #0]
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
 8001740:	6819      	ldr	r1, [r3, #0]
    if ((wEPVal & EP_CTR_RX) != 0)
 8001742:	0408      	lsls	r0, r1, #16
 8001744:	d40e      	bmi.n	8001764 <CTR_HP+0x50>

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
 8001746:	0609      	lsls	r1, r1, #24
 8001748:	d5e9      	bpl.n	800171e <CTR_HP+0xa>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
 800174a:	f8d3 e000 	ldr.w	lr, [r3]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
 800174e:	480f      	ldr	r0, [pc, #60]	; (800178c <CTR_HP+0x78>)
 8001750:	3a01      	subs	r2, #1

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
 8001752:	f648 710f 	movw	r1, #36623	; 0x8f0f
 8001756:	ea0e 0101 	and.w	r1, lr, r1

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
 800175a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
 800175e:	6019      	str	r1, [r3, #0]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
 8001760:	4790      	blx	r2
 8001762:	e7dc      	b.n	800171e <CTR_HP+0xa>
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
    if ((wEPVal & EP_CTR_RX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
 8001764:	f8d3 e000 	ldr.w	lr, [r3]

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <CTR_HP+0x7c>)
 800176a:	3a01      	subs	r2, #1
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
    if ((wEPVal & EP_CTR_RX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
 800176c:	f640 718f 	movw	r1, #3983	; 0xf8f
 8001770:	ea0e 0101 	and.w	r1, lr, r1

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
 8001774:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
    if ((wEPVal & EP_CTR_RX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
 8001778:	6019      	str	r1, [r3, #0]

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
 800177a:	4790      	blx	r2
 800177c:	e7cf      	b.n	800171e <CTR_HP+0xa>


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
 800177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001780:	2000049a 	.word	0x2000049a
 8001784:	40005c44 	.word	0x40005c44
 8001788:	200004cc 	.word	0x200004cc
 800178c:	2000024c 	.word	0x2000024c
 8001790:	20000230 	.word	0x20000230

08001794 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001794:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001798:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800179a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800179e:	1052      	asrs	r2, r2, #1
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80017a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 80017a4:	d010      	beq.n	80017c8 <UserToPMABufferCopy+0x34>
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80017a6:	b430      	push	{r4, r5}
 80017a8:	3002      	adds	r0, #2
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80017aa:	2300      	movs	r3, #0
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80017ac:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80017b0:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80017b4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 80017b8:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 80017bc:	3301      	adds	r3, #1
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80017be:	429a      	cmp	r2, r3
 80017c0:	f100 0002 	add.w	r0, r0, #2
 80017c4:	d1f2      	bne.n	80017ac <UserToPMABufferCopy+0x18>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80017c6:	bc30      	pop	{r4, r5}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80017cc:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 80017d0:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80017d2:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 80017d6:	1052      	asrs	r2, r2, #1
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80017d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 80017dc:	d005      	beq.n	80017ea <PMAToUserBufferCopy+0x1e>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80017de:	f851 3b04 	ldr.w	r3, [r1], #4
 80017e2:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80017e6:	3a01      	subs	r2, #1
 80017e8:	d1f9      	bne.n	80017de <PMAToUserBufferCopy+0x12>
 80017ea:	4770      	bx	lr

080017ec <SetCNTR>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetCNTR(uint16_t wRegValue)
{
  _SetCNTR(wRegValue);
 80017ec:	4b01      	ldr	r3, [pc, #4]	; (80017f4 <SetCNTR+0x8>)
 80017ee:	6018      	str	r0, [r3, #0]
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40005c40 	.word	0x40005c40

080017f8 <GetCNTR>:
* Output         : None.
* Return         : CNTR register Value.
*******************************************************************************/
uint16_t GetCNTR(void)
{
  return(_GetCNTR());
 80017f8:	4b01      	ldr	r3, [pc, #4]	; (8001800 <GetCNTR+0x8>)
 80017fa:	6818      	ldr	r0, [r3, #0]
}
 80017fc:	b280      	uxth	r0, r0
 80017fe:	4770      	bx	lr
 8001800:	40005c40 	.word	0x40005c40

08001804 <SetISTR>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetISTR(uint16_t wRegValue)
{
  _SetISTR(wRegValue);
 8001804:	4b01      	ldr	r3, [pc, #4]	; (800180c <SetISTR+0x8>)
 8001806:	6018      	str	r0, [r3, #0]
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40005c44 	.word	0x40005c44

08001810 <GetISTR>:
* Output         : None.
* Return         : ISTR register Value
*******************************************************************************/
uint16_t GetISTR(void)
{
  return(_GetISTR());
 8001810:	4b01      	ldr	r3, [pc, #4]	; (8001818 <GetISTR+0x8>)
 8001812:	6818      	ldr	r0, [r3, #0]
}
 8001814:	b280      	uxth	r0, r0
 8001816:	4770      	bx	lr
 8001818:	40005c44 	.word	0x40005c44

0800181c <GetFNR>:
* Output         : None.
* Return         : FNR register Value
*******************************************************************************/
uint16_t GetFNR(void)
{
  return(_GetFNR());
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <GetFNR+0x8>)
 800181e:	6818      	ldr	r0, [r3, #0]
}
 8001820:	b280      	uxth	r0, r0
 8001822:	4770      	bx	lr
 8001824:	40005c48 	.word	0x40005c48

08001828 <SetDADDR>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDADDR(uint16_t wRegValue)
{
  _SetDADDR(wRegValue);
 8001828:	4b01      	ldr	r3, [pc, #4]	; (8001830 <SetDADDR+0x8>)
 800182a:	6018      	str	r0, [r3, #0]
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40005c4c 	.word	0x40005c4c

08001834 <GetDADDR>:
* Output         : None.
* Return         : DADDR register Value
*******************************************************************************/
uint16_t GetDADDR(void)
{
  return(_GetDADDR());
 8001834:	4b01      	ldr	r3, [pc, #4]	; (800183c <GetDADDR+0x8>)
 8001836:	6818      	ldr	r0, [r3, #0]
}
 8001838:	b280      	uxth	r0, r0
 800183a:	4770      	bx	lr
 800183c:	40005c4c 	.word	0x40005c4c

08001840 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8001840:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001844:	4a01      	ldr	r2, [pc, #4]	; (800184c <SetBTABLE+0xc>)
 8001846:	4003      	ands	r3, r0
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4770      	bx	lr
 800184c:	40005c50 	.word	0x40005c50

08001850 <GetBTABLE>:
* Output         : None.
* Return         : BTABLE address.
*******************************************************************************/
uint16_t GetBTABLE(void)
{
  return(_GetBTABLE());
 8001850:	4b01      	ldr	r3, [pc, #4]	; (8001858 <GetBTABLE+0x8>)
 8001852:	6818      	ldr	r0, [r3, #0]
}
 8001854:	b280      	uxth	r0, r0
 8001856:	4770      	bx	lr
 8001858:	40005c50 	.word	0x40005c50

0800185c <SetENDPOINT>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetENDPOINT(uint8_t bEpNum, uint16_t wRegValue)
{
  _SetENDPOINT(bEpNum, wRegValue);
 800185c:	0080      	lsls	r0, r0, #2
 800185e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001862:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001866:	6001      	str	r1, [r0, #0]
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <GetENDPOINT>:
* Output         : None.
* Return         : Endpoint register value.
*******************************************************************************/
uint16_t GetENDPOINT(uint8_t bEpNum)
{
  return(_GetENDPOINT(bEpNum));
 800186c:	0080      	lsls	r0, r0, #2
 800186e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001872:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001876:	6800      	ldr	r0, [r0, #0]
}
 8001878:	b280      	uxth	r0, r0
 800187a:	4770      	bx	lr

0800187c <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800187c:	0080      	lsls	r0, r0, #2
 800187e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001882:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001886:	6803      	ldr	r3, [r0, #0]
 8001888:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800188c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001890:	4319      	orrs	r1, r3
 8001892:	b289      	uxth	r1, r1
 8001894:	6001      	str	r1, [r0, #0]
 8001896:	4770      	bx	lr

08001898 <GetEPType>:
* Output         : None.
* Return         : Endpoint Type
*******************************************************************************/
uint16_t GetEPType(uint8_t bEpNum)
{
  return(_GetEPType(bEpNum));
 8001898:	0080      	lsls	r0, r0, #2
 800189a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800189e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80018a2:	6800      	ldr	r0, [r0, #0]
}
 80018a4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 80018ac:	0080      	lsls	r0, r0, #2
 80018ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80018b2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80018b6:	06ca      	lsls	r2, r1, #27
 80018b8:	6803      	ldr	r3, [r0, #0]
 80018ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	bf48      	it	mi
 80018c6:	f083 0310 	eormi.w	r3, r3, #16
 80018ca:	068a      	lsls	r2, r1, #26
 80018cc:	bf48      	it	mi
 80018ce:	f083 0320 	eormi.w	r3, r3, #32
 80018d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018da:	6003      	str	r3, [r0, #0]
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 80018e0:	0080      	lsls	r0, r0, #2
 80018e2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80018e6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80018ea:	04ca      	lsls	r2, r1, #19
 80018ec:	6803      	ldr	r3, [r0, #0]
 80018ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	bf48      	it	mi
 80018fa:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 80018fe:	048a      	lsls	r2, r1, #18
 8001900:	bf48      	it	mi
 8001902:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8001906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190e:	6003      	str	r3, [r0, #0]
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <SetDouBleBuffEPStall>:
* Output         : None.
* Return         : Endpoint register value.
*******************************************************************************/
uint16_t GetENDPOINT(uint8_t bEpNum)
{
  return(_GetENDPOINT(bEpNum));
 8001914:	0080      	lsls	r0, r0, #2
 8001916:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800191a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
*******************************************************************************/
void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
{
  uint16_t Endpoint_DTOG_Status;
  Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
  if (bDir == EP_DBUF_OUT)
 800191e:	2901      	cmp	r1, #1
* Output         : None.
* Return         : Endpoint register value.
*******************************************************************************/
uint16_t GetENDPOINT(uint8_t bEpNum)
{
  return(_GetENDPOINT(bEpNum));
 8001920:	6803      	ldr	r3, [r0, #0]
*******************************************************************************/
void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
{
  uint16_t Endpoint_DTOG_Status;
  Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
  if (bDir == EP_DBUF_OUT)
 8001922:	d007      	beq.n	8001934 <SetDouBleBuffEPStall+0x20>
  { /* OUT double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
  }
  else if (bDir == EP_DBUF_IN)
 8001924:	2902      	cmp	r1, #2
 8001926:	d000      	beq.n	800192a <SetDouBleBuffEPStall+0x16>
 8001928:	4770      	bx	lr
  { /* IN double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
 800192a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800192e:	401a      	ands	r2, r3
 8001930:	6002      	str	r2, [r0, #0]
 8001932:	4770      	bx	lr
{
  uint16_t Endpoint_DTOG_Status;
  Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
  if (bDir == EP_DBUF_OUT)
  { /* OUT double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
 8001934:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8001938:	401a      	ands	r2, r3
 800193a:	6002      	str	r2, [r0, #0]
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop

08001940 <GetEPTxStatus>:
* Output         : None.
* Return         : Endpoint TX Status
*******************************************************************************/
uint16_t GetEPTxStatus(uint8_t bEpNum)
{
  return(_GetEPTxStatus(bEpNum));
 8001940:	0080      	lsls	r0, r0, #2
 8001942:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001946:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800194a:	6800      	ldr	r0, [r0, #0]
}
 800194c:	f000 0030 	and.w	r0, r0, #48	; 0x30
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop

08001954 <GetEPRxStatus>:
* Output         : None.
* Return         : Endpoint RX Status
*******************************************************************************/
uint16_t GetEPRxStatus(uint8_t bEpNum)
{
  return(_GetEPRxStatus(bEpNum));
 8001954:	0080      	lsls	r0, r0, #2
 8001956:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800195a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800195e:	6800      	ldr	r0, [r0, #0]
}
 8001960:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop

08001968 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8001968:	0080      	lsls	r0, r0, #2
 800196a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800196e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001972:	6803      	ldr	r3, [r0, #0]
 8001974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800197c:	b29b      	uxth	r3, r3
 800197e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198a:	6003      	str	r3, [r0, #0]
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8001990:	0080      	lsls	r0, r0, #2
 8001992:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001996:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800199a:	6803      	ldr	r3, [r0, #0]
 800199c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80019aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b2:	6003      	str	r3, [r0, #0]
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <SetEP_KIND>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEP_KIND(uint8_t bEpNum)
{
  _SetEP_KIND(bEpNum);
 80019b8:	0080      	lsls	r0, r0, #2
 80019ba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80019be:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80019c2:	f640 620f 	movw	r2, #3599	; 0xe0f
 80019c6:	6803      	ldr	r3, [r0, #0]
 80019c8:	4013      	ands	r3, r2
 80019ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80019ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d2:	6003      	str	r3, [r0, #0]
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <ClearEP_KIND>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_KIND(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80019d8:	0080      	lsls	r0, r0, #2
 80019da:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80019de:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80019e2:	f640 620f 	movw	r2, #3599	; 0xe0f
 80019e6:	6803      	ldr	r3, [r0, #0]
 80019e8:	4013      	ands	r3, r2
 80019ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f2:	6003      	str	r3, [r0, #0]
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80019f8:	0080      	lsls	r0, r0, #2
 80019fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80019fe:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001a02:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001a06:	6803      	ldr	r3, [r0, #0]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a12:	6003      	str	r3, [r0, #0]
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop

08001a18 <Set_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Status_Out(uint8_t bEpNum)
{
  _SetEP_KIND(bEpNum);
 8001a18:	0080      	lsls	r0, r0, #2
 8001a1a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001a1e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001a22:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001a26:	6803      	ldr	r3, [r0, #0]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a32:	6003      	str	r3, [r0, #0]
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <SetEPDoubleBuff>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDoubleBuff(uint8_t bEpNum)
{
  _SetEP_KIND(bEpNum);
 8001a38:	0080      	lsls	r0, r0, #2
 8001a3a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001a3e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001a42:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001a46:	6803      	ldr	r3, [r0, #0]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a52:	6003      	str	r3, [r0, #0]
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <ClearEPDoubleBuff>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEPDoubleBuff(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8001a58:	0080      	lsls	r0, r0, #2
 8001a5a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001a5e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001a62:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001a66:	6803      	ldr	r3, [r0, #0]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a72:	6003      	str	r3, [r0, #0]
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <GetTxStallStatus>:
* Output         : None.
* Return         : Tx Stall status.
*******************************************************************************/
uint16_t GetTxStallStatus(uint8_t bEpNum)
{
  return(_GetTxStallStatus(bEpNum));
 8001a78:	0080      	lsls	r0, r0, #2
 8001a7a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001a7e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001a82:	6800      	ldr	r0, [r0, #0]
 8001a84:	f000 0030 	and.w	r0, r0, #48	; 0x30
}
 8001a88:	f1a0 0010 	sub.w	r0, r0, #16
 8001a8c:	fab0 f080 	clz	r0, r0
 8001a90:	0940      	lsrs	r0, r0, #5
 8001a92:	4770      	bx	lr

08001a94 <GetRxStallStatus>:
* Output         : None.
* Return         : Rx Stall status.
*******************************************************************************/
uint16_t GetRxStallStatus(uint8_t bEpNum)
{
  return(_GetRxStallStatus(bEpNum));
 8001a94:	0080      	lsls	r0, r0, #2
 8001a96:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001a9a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001a9e:	6800      	ldr	r0, [r0, #0]
 8001aa0:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
}
 8001aa4:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 8001aa8:	fab0 f080 	clz	r0, r0
 8001aac:	0940      	lsrs	r0, r0, #5
 8001aae:	4770      	bx	lr

08001ab0 <ClearEP_CTR_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_CTR_RX(uint8_t bEpNum)
{
  _ClearEP_CTR_RX(bEpNum);
 8001ab0:	0080      	lsls	r0, r0, #2
 8001ab2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001ab6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001aba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001abe:	6802      	ldr	r2, [r0, #0]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	6003      	str	r3, [r0, #0]
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <ClearEP_CTR_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_CTR_TX(uint8_t bEpNum)
{
  _ClearEP_CTR_TX(bEpNum);
 8001ac8:	0080      	lsls	r0, r0, #2
 8001aca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001ace:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001ad2:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8001ad6:	6802      	ldr	r2, [r0, #0]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	6003      	str	r3, [r0, #0]
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <ToggleDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ToggleDTOG_RX(uint8_t bEpNum)
{
  _ToggleDTOG_RX(bEpNum);
 8001ae0:	0080      	lsls	r0, r0, #2
 8001ae2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001ae6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001aea:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001aee:	6802      	ldr	r2, [r0, #0]
 8001af0:	4013      	ands	r3, r2
 8001af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afa:	6003      	str	r3, [r0, #0]
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop

08001b00 <ToggleDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ToggleDTOG_TX(uint8_t bEpNum)
{
  _ToggleDTOG_TX(bEpNum);
 8001b00:	0080      	lsls	r0, r0, #2
 8001b02:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001b06:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001b0a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001b0e:	6802      	ldr	r2, [r0, #0]
 8001b10:	4013      	ands	r3, r2
 8001b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b1a:	6003      	str	r3, [r0, #0]
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop

08001b20 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8001b20:	0080      	lsls	r0, r0, #2
 8001b22:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001b26:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001b2a:	6803      	ldr	r3, [r0, #0]
 8001b2c:	045b      	lsls	r3, r3, #17
 8001b2e:	d508      	bpl.n	8001b42 <ClearDTOG_RX+0x22>
 8001b30:	6802      	ldr	r2, [r0, #0]
 8001b32:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001b36:	4013      	ands	r3, r2
 8001b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b40:	6003      	str	r3, [r0, #0]
 8001b42:	4770      	bx	lr

08001b44 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8001b44:	0080      	lsls	r0, r0, #2
 8001b46:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001b4a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001b4e:	6803      	ldr	r3, [r0, #0]
 8001b50:	065b      	lsls	r3, r3, #25
 8001b52:	d508      	bpl.n	8001b66 <ClearDTOG_TX+0x22>
 8001b54:	6802      	ldr	r2, [r0, #0]
 8001b56:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b64:	6003      	str	r3, [r0, #0]
 8001b66:	4770      	bx	lr

08001b68 <SetEPAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPAddress(uint8_t bEpNum, uint8_t bAddr)
{
  _SetEPAddress(bEpNum, bAddr);
 8001b68:	0080      	lsls	r0, r0, #2
 8001b6a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001b6e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001b72:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001b76:	6802      	ldr	r2, [r0, #0]
 8001b78:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001b7c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001b80:	4013      	ands	r3, r2
 8001b82:	4319      	orrs	r1, r3
 8001b84:	6001      	str	r1, [r0, #0]
 8001b86:	4770      	bx	lr

08001b88 <GetEPAddress>:
* Output         : None.
* Return         : Endpoint address.
*******************************************************************************/
uint8_t GetEPAddress(uint8_t bEpNum)
{
  return(_GetEPAddress(bEpNum));
 8001b88:	0080      	lsls	r0, r0, #2
 8001b8a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001b8e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001b92:	6800      	ldr	r0, [r0, #0]
}
 8001b94:	f000 000f 	and.w	r0, r0, #15
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop

08001b9c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SetEPTxAddr+0x1c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001ba6:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8001baa:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8001bae:	0849      	lsrs	r1, r1, #1
 8001bb0:	0040      	lsls	r0, r0, #1
 8001bb2:	0049      	lsls	r1, r1, #1
 8001bb4:	6001      	str	r1, [r0, #0]
 8001bb6:	4770      	bx	lr
 8001bb8:	40005c50 	.word	0x40005c50

08001bbc <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <SetEPRxAddr+0x18>)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SetEPRxAddr+0x1c>)
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001bc8:	4403      	add	r3, r0
 8001bca:	0849      	lsrs	r1, r1, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	0049      	lsls	r1, r1, #1
 8001bd0:	6019      	str	r1, [r3, #0]
 8001bd2:	4770      	bx	lr
 8001bd4:	40005c50 	.word	0x40005c50
 8001bd8:	20003004 	.word	0x20003004

08001bdc <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <GetEPTxAddr+0x1c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001be6:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8001bea:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8001bee:	0040      	lsls	r0, r0, #1
 8001bf0:	6800      	ldr	r0, [r0, #0]
}
 8001bf2:	b280      	uxth	r0, r0
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40005c50 	.word	0x40005c50

08001bfc <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <GetEPRxAddr+0x18>)
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <GetEPRxAddr+0x1c>)
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	b292      	uxth	r2, r2
 8001c04:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001c08:	4403      	add	r3, r0
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	6818      	ldr	r0, [r3, #0]
}
 8001c0e:	b280      	uxth	r0, r0
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40005c50 	.word	0x40005c50
 8001c18:	20003004 	.word	0x20003004

08001c1c <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <SetEPTxCount+0x14>)
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SetEPTxCount+0x18>)
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	b292      	uxth	r2, r2
 8001c24:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001c28:	4403      	add	r3, r0
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	6019      	str	r1, [r3, #0]
 8001c2e:	4770      	bx	lr
 8001c30:	40005c50 	.word	0x40005c50
 8001c34:	20003002 	.word	0x20003002

08001c38 <SetEPCountRxReg>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPCountRxReg(uint32_t *pdwReg, uint16_t wCount)
{
  _SetEPCountRxReg(dwReg, wCount);
 8001c38:	293e      	cmp	r1, #62	; 0x3e
 8001c3a:	d90a      	bls.n	8001c52 <SetEPCountRxReg+0x1a>
 8001c3c:	094b      	lsrs	r3, r1, #5
 8001c3e:	06c9      	lsls	r1, r1, #27
 8001c40:	bf04      	itt	eq
 8001c42:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8001c46:	b29b      	uxtheq	r3, r3
 8001c48:	029b      	lsls	r3, r3, #10
 8001c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4e:	6003      	str	r3, [r0, #0]
 8001c50:	4770      	bx	lr
 8001c52:	084b      	lsrs	r3, r1, #1
 8001c54:	07ca      	lsls	r2, r1, #31
 8001c56:	bf48      	it	mi
 8001c58:	3301      	addmi	r3, #1
 8001c5a:	029b      	lsls	r3, r3, #10
 8001c5c:	6003      	str	r3, [r0, #0]
 8001c5e:	4770      	bx	lr

08001c60 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <SetEPRxCount+0x3c>)
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <SetEPRxCount+0x40>)
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	b292      	uxth	r2, r2
 8001c68:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001c6c:	4403      	add	r3, r0
 8001c6e:	293e      	cmp	r1, #62	; 0x3e
 8001c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001c74:	d90a      	bls.n	8001c8c <SetEPRxCount+0x2c>
 8001c76:	094a      	lsrs	r2, r1, #5
 8001c78:	06c8      	lsls	r0, r1, #27
 8001c7a:	bf04      	itt	eq
 8001c7c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001c80:	b292      	uxtheq	r2, r2
 8001c82:	0292      	lsls	r2, r2, #10
 8001c84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	4770      	bx	lr
 8001c8c:	084a      	lsrs	r2, r1, #1
 8001c8e:	07c9      	lsls	r1, r1, #31
 8001c90:	bf48      	it	mi
 8001c92:	3201      	addmi	r2, #1
 8001c94:	0292      	lsls	r2, r2, #10
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40005c50 	.word	0x40005c50
 8001ca0:	20003006 	.word	0x20003006

08001ca4 <GetEPTxCount>:
* Output         : None
* Return         : Tx count value.
*******************************************************************************/
uint16_t GetEPTxCount(uint8_t bEpNum)
{
  return(_GetEPTxCount(bEpNum));
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <GetEPTxCount+0x18>)
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <GetEPTxCount+0x1c>)
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	b292      	uxth	r2, r2
 8001cac:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001cb0:	4403      	add	r3, r0
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	6818      	ldr	r0, [r3, #0]
}
 8001cb6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001cba:	4770      	bx	lr
 8001cbc:	40005c50 	.word	0x40005c50
 8001cc0:	20003002 	.word	0x20003002

08001cc4 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <GetEPRxCount+0x18>)
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <GetEPRxCount+0x1c>)
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001cd0:	4403      	add	r3, r0
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	6818      	ldr	r0, [r3, #0]
}
 8001cd6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001cda:	4770      	bx	lr
 8001cdc:	40005c50 	.word	0x40005c50
 8001ce0:	20003006 	.word	0x20003006

08001ce4 <SetEPDblBuffAddr>:
*                  wBuf1Addr: new address of buffer 1.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
{
 8001ce4:	b430      	push	{r4, r5}
  _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 8001ce6:	4d0c      	ldr	r5, [pc, #48]	; (8001d18 <SetEPDblBuffAddr+0x34>)
 8001ce8:	4c0c      	ldr	r4, [pc, #48]	; (8001d1c <SetEPDblBuffAddr+0x38>)
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	682d      	ldr	r5, [r5, #0]
 8001cee:	00c0      	lsls	r0, r0, #3
 8001cf0:	fa10 f383 	uxtah	r3, r0, r3
 8001cf4:	fa10 f585 	uxtah	r5, r0, r5
 8001cf8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001cfc:	442c      	add	r4, r5
 8001cfe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001d02:	0064      	lsls	r4, r4, #1
 8001d04:	0849      	lsrs	r1, r1, #1
 8001d06:	0852      	lsrs	r2, r2, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	0049      	lsls	r1, r1, #1
 8001d0c:	0052      	lsls	r2, r2, #1
 8001d0e:	6019      	str	r1, [r3, #0]
 8001d10:	6022      	str	r2, [r4, #0]
}
 8001d12:	bc30      	pop	{r4, r5}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40005c50 	.word	0x40005c50
 8001d1c:	20003004 	.word	0x20003004

08001d20 <SetEPDblBuf0Addr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Addr(uint8_t bEpNum, uint16_t wBuf0Addr)
{
  _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <SetEPDblBuf0Addr+0x1c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001d2a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8001d2e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8001d32:	0849      	lsrs	r1, r1, #1
 8001d34:	0040      	lsls	r0, r0, #1
 8001d36:	0049      	lsls	r1, r1, #1
 8001d38:	6001      	str	r1, [r0, #0]
 8001d3a:	4770      	bx	lr
 8001d3c:	40005c50 	.word	0x40005c50

08001d40 <SetEPDblBuf1Addr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Addr(uint8_t bEpNum, uint16_t wBuf1Addr)
{
  _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <SetEPDblBuf1Addr+0x18>)
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <SetEPDblBuf1Addr+0x1c>)
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	b292      	uxth	r2, r2
 8001d48:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001d4c:	4403      	add	r3, r0
 8001d4e:	0849      	lsrs	r1, r1, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	0049      	lsls	r1, r1, #1
 8001d54:	6019      	str	r1, [r3, #0]
 8001d56:	4770      	bx	lr
 8001d58:	40005c50 	.word	0x40005c50
 8001d5c:	20003004 	.word	0x20003004

08001d60 <GetEPDblBuf0Addr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
uint16_t GetEPDblBuf0Addr(uint8_t bEpNum)
{
  return(_GetEPDblBuf0Addr(bEpNum));
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <GetEPDblBuf0Addr+0x1c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001d6a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8001d6e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8001d72:	0040      	lsls	r0, r0, #1
 8001d74:	6800      	ldr	r0, [r0, #0]
}
 8001d76:	b280      	uxth	r0, r0
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40005c50 	.word	0x40005c50

08001d80 <GetEPDblBuf1Addr>:
* Output         : None.
* Return         : Address of the Buffer 1.
*******************************************************************************/
uint16_t GetEPDblBuf1Addr(uint8_t bEpNum)
{
  return(_GetEPDblBuf1Addr(bEpNum));
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <GetEPDblBuf1Addr+0x18>)
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <GetEPDblBuf1Addr+0x1c>)
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	b292      	uxth	r2, r2
 8001d88:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001d8c:	4403      	add	r3, r0
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	6818      	ldr	r0, [r3, #0]
}
 8001d92:	b280      	uxth	r0, r0
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40005c50 	.word	0x40005c50
 8001d9c:	20003004 	.word	0x20003004

08001da0 <SetEPDblBuffCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001da0:	2901      	cmp	r1, #1
* Input          : bEpNum,bDir, wCount
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
 8001da2:	b430      	push	{r4, r5}
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001da4:	d003      	beq.n	8001dae <SetEPDblBuffCount+0xe>
 8001da6:	2902      	cmp	r1, #2
 8001da8:	d020      	beq.n	8001dec <SetEPDblBuffCount+0x4c>
}
 8001daa:	bc30      	pop	{r4, r5}
 8001dac:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001dae:	4c2b      	ldr	r4, [pc, #172]	; (8001e5c <SetEPDblBuffCount+0xbc>)
 8001db0:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <SetEPDblBuffCount+0xc0>)
 8001db2:	6821      	ldr	r1, [r4, #0]
 8001db4:	00c0      	lsls	r0, r0, #3
 8001db6:	fa10 f181 	uxtah	r1, r0, r1
 8001dba:	440b      	add	r3, r1
 8001dbc:	2a3e      	cmp	r2, #62	; 0x3e
 8001dbe:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8001dc2:	d928      	bls.n	8001e16 <SetEPDblBuffCount+0x76>
 8001dc4:	0953      	lsrs	r3, r2, #5
 8001dc6:	06d2      	lsls	r2, r2, #27
 8001dc8:	d13c      	bne.n	8001e44 <SetEPDblBuffCount+0xa4>
 8001dca:	6824      	ldr	r4, [r4, #0]
 8001dcc:	4a25      	ldr	r2, [pc, #148]	; (8001e64 <SetEPDblBuffCount+0xc4>)
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	fa10 f084 	uxtah	r0, r0, r4
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	4402      	add	r2, r0
 8001dda:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8001dde:	0052      	lsls	r2, r2, #1
 8001de0:	6008      	str	r0, [r1, #0]
 8001de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bc30      	pop	{r4, r5}
 8001dea:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <SetEPDblBuffCount+0xbc>)
 8001dee:	681d      	ldr	r5, [r3, #0]
 8001df0:	681c      	ldr	r4, [r3, #0]
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <SetEPDblBuffCount+0xc4>)
 8001df4:	00c0      	lsls	r0, r0, #3
 8001df6:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001dfa:	fa10 f585 	uxtah	r5, r0, r5
 8001dfe:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 8001e02:	fa10 f084 	uxtah	r0, r0, r4
 8001e06:	4429      	add	r1, r5
 8001e08:	4403      	add	r3, r0
 8001e0a:	0049      	lsls	r1, r1, #1
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	600a      	str	r2, [r1, #0]
}
 8001e10:	bc30      	pop	{r4, r5}
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001e12:	601a      	str	r2, [r3, #0]
}
 8001e14:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001e16:	6824      	ldr	r4, [r4, #0]
 8001e18:	f012 0f01 	tst.w	r2, #1
 8001e1c:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8001e20:	fa10 f084 	uxtah	r0, r0, r4
 8001e24:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <SetEPDblBuffCount+0xc4>)
 8001e26:	d007      	beq.n	8001e38 <SetEPDblBuffCount+0x98>
 8001e28:	4402      	add	r2, r0
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	0052      	lsls	r2, r2, #1
 8001e2e:	029b      	lsls	r3, r3, #10
 8001e30:	600b      	str	r3, [r1, #0]
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bc30      	pop	{r4, r5}
 8001e36:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001e38:	4402      	add	r2, r0
 8001e3a:	0052      	lsls	r2, r2, #1
 8001e3c:	029b      	lsls	r3, r3, #10
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e7f7      	b.n	8001e34 <SetEPDblBuffCount+0x94>
 8001e44:	6824      	ldr	r4, [r4, #0]
 8001e46:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <SetEPDblBuffCount+0xc4>)
 8001e48:	fa10 f084 	uxtah	r0, r0, r4
 8001e4c:	029b      	lsls	r3, r3, #10
 8001e4e:	4402      	add	r2, r0
 8001e50:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8001e54:	0052      	lsls	r2, r2, #1
 8001e56:	6008      	str	r0, [r1, #0]
 8001e58:	e7c3      	b.n	8001de2 <SetEPDblBuffCount+0x42>
 8001e5a:	bf00      	nop
 8001e5c:	40005c50 	.word	0x40005c50
 8001e60:	20003002 	.word	0x20003002
 8001e64:	20003006 	.word	0x20003006

08001e68 <SetEPDblBuf0Count>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuf0Count(bEpNum, bDir, wCount);
 8001e68:	2901      	cmp	r1, #1
 8001e6a:	d00c      	beq.n	8001e86 <SetEPDblBuf0Count+0x1e>
 8001e6c:	2902      	cmp	r1, #2
 8001e6e:	d000      	beq.n	8001e72 <SetEPDblBuf0Count+0xa>
 8001e70:	4770      	bx	lr
 8001e72:	4913      	ldr	r1, [pc, #76]	; (8001ec0 <SetEPDblBuf0Count+0x58>)
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <SetEPDblBuf0Count+0x5c>)
 8001e76:	6809      	ldr	r1, [r1, #0]
 8001e78:	b289      	uxth	r1, r1
 8001e7a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8001e7e:	4403      	add	r3, r0
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	4770      	bx	lr
 8001e86:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <SetEPDblBuf0Count+0x58>)
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <SetEPDblBuf0Count+0x5c>)
 8001e8a:	6809      	ldr	r1, [r1, #0]
 8001e8c:	b289      	uxth	r1, r1
 8001e8e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8001e92:	4403      	add	r3, r0
 8001e94:	2a3e      	cmp	r2, #62	; 0x3e
 8001e96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001e9a:	d90a      	bls.n	8001eb2 <SetEPDblBuf0Count+0x4a>
 8001e9c:	0951      	lsrs	r1, r2, #5
 8001e9e:	06d0      	lsls	r0, r2, #27
 8001ea0:	bf04      	itt	eq
 8001ea2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001ea6:	b289      	uxtheq	r1, r1
 8001ea8:	0289      	lsls	r1, r1, #10
 8001eaa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001eae:	6019      	str	r1, [r3, #0]
 8001eb0:	4770      	bx	lr
 8001eb2:	0851      	lsrs	r1, r2, #1
 8001eb4:	07d2      	lsls	r2, r2, #31
 8001eb6:	bf48      	it	mi
 8001eb8:	3101      	addmi	r1, #1
 8001eba:	0289      	lsls	r1, r1, #10
 8001ebc:	6019      	str	r1, [r3, #0]
 8001ebe:	4770      	bx	lr
 8001ec0:	40005c50 	.word	0x40005c50
 8001ec4:	20003002 	.word	0x20003002

08001ec8 <SetEPDblBuf1Count>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuf1Count(bEpNum, bDir, wCount);
 8001ec8:	2901      	cmp	r1, #1
 8001eca:	d00c      	beq.n	8001ee6 <SetEPDblBuf1Count+0x1e>
 8001ecc:	2902      	cmp	r1, #2
 8001ece:	d000      	beq.n	8001ed2 <SetEPDblBuf1Count+0xa>
 8001ed0:	4770      	bx	lr
 8001ed2:	4913      	ldr	r1, [pc, #76]	; (8001f20 <SetEPDblBuf1Count+0x58>)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <SetEPDblBuf1Count+0x5c>)
 8001ed6:	6809      	ldr	r1, [r1, #0]
 8001ed8:	b289      	uxth	r1, r1
 8001eda:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8001ede:	4403      	add	r3, r0
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	4770      	bx	lr
 8001ee6:	490e      	ldr	r1, [pc, #56]	; (8001f20 <SetEPDblBuf1Count+0x58>)
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <SetEPDblBuf1Count+0x5c>)
 8001eea:	6809      	ldr	r1, [r1, #0]
 8001eec:	b289      	uxth	r1, r1
 8001eee:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8001ef2:	4403      	add	r3, r0
 8001ef4:	2a3e      	cmp	r2, #62	; 0x3e
 8001ef6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001efa:	d90a      	bls.n	8001f12 <SetEPDblBuf1Count+0x4a>
 8001efc:	0951      	lsrs	r1, r2, #5
 8001efe:	06d0      	lsls	r0, r2, #27
 8001f00:	bf04      	itt	eq
 8001f02:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001f06:	b289      	uxtheq	r1, r1
 8001f08:	0289      	lsls	r1, r1, #10
 8001f0a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001f0e:	6019      	str	r1, [r3, #0]
 8001f10:	4770      	bx	lr
 8001f12:	0851      	lsrs	r1, r2, #1
 8001f14:	07d2      	lsls	r2, r2, #31
 8001f16:	bf48      	it	mi
 8001f18:	3101      	addmi	r1, #1
 8001f1a:	0289      	lsls	r1, r1, #10
 8001f1c:	6019      	str	r1, [r3, #0]
 8001f1e:	4770      	bx	lr
 8001f20:	40005c50 	.word	0x40005c50
 8001f24:	20003006 	.word	0x20003006

08001f28 <GetEPDblBuf0Count>:
* Output         : None.
* Return         : Endpoint Buffer 0 count
*******************************************************************************/
uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
{
  return(_GetEPDblBuf0Count(bEpNum));
 8001f28:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <GetEPDblBuf0Count+0x18>)
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <GetEPDblBuf0Count+0x1c>)
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	b292      	uxth	r2, r2
 8001f30:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001f34:	4403      	add	r3, r0
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	6818      	ldr	r0, [r3, #0]
}
 8001f3a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001f3e:	4770      	bx	lr
 8001f40:	40005c50 	.word	0x40005c50
 8001f44:	20003002 	.word	0x20003002

08001f48 <GetEPDblBuf1Count>:
* Output         : None.
* Return         : Endpoint Buffer 1 count.
*******************************************************************************/
uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
{
  return(_GetEPDblBuf1Count(bEpNum));
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <GetEPDblBuf1Count+0x18>)
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <GetEPDblBuf1Count+0x1c>)
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001f54:	4403      	add	r3, r0
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	6818      	ldr	r0, [r3, #0]
}
 8001f5a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001f5e:	4770      	bx	lr
 8001f60:	40005c50 	.word	0x40005c50
 8001f64:	20003006 	.word	0x20003006

08001f68 <GetEPDblBufDir>:
* Return         : EP_DBUF_OUT, EP_DBUF_IN,
*                  EP_DBUF_ERR if the endpoint counter not yet programmed.
*******************************************************************************/
EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
{
  if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
 8001f68:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <GetEPDblBufDir+0x38>)
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <GetEPDblBufDir+0x3c>)
 8001f6c:	680a      	ldr	r2, [r1, #0]
 8001f6e:	00c0      	lsls	r0, r0, #3
 8001f70:	fa10 f282 	uxtah	r2, r0, r2
 8001f74:	4413      	add	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f413 4f7c 	tst.w	r3, #64512	; 0xfc00
 8001f7e:	d10d      	bne.n	8001f9c <GetEPDblBufDir+0x34>
    return(EP_DBUF_OUT);
  else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
 8001f80:	680a      	ldr	r2, [r1, #0]
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <GetEPDblBufDir+0x40>)
 8001f84:	fa10 f082 	uxtah	r0, r0, r2
 8001f88:	4403      	add	r3, r0
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f92:	2b00      	cmp	r3, #0
    return(EP_DBUF_IN);
  else
    return(EP_DBUF_ERR);
 8001f94:	bf14      	ite	ne
 8001f96:	2002      	movne	r0, #2
 8001f98:	2000      	moveq	r0, #0
 8001f9a:	4770      	bx	lr
*                  EP_DBUF_ERR if the endpoint counter not yet programmed.
*******************************************************************************/
EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
{
  if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
    return(EP_DBUF_OUT);
 8001f9c:	2001      	movs	r0, #1
  else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
    return(EP_DBUF_IN);
  else
    return(EP_DBUF_ERR);
}
 8001f9e:	4770      	bx	lr
 8001fa0:	40005c50 	.word	0x40005c50
 8001fa4:	20003006 	.word	0x20003006
 8001fa8:	20003002 	.word	0x20003002

08001fac <FreeUserBuffer>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
{
  if (bDir == EP_DBUF_OUT)
 8001fac:	2901      	cmp	r1, #1
 8001fae:	d011      	beq.n	8001fd4 <FreeUserBuffer+0x28>
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
  }
  else if (bDir == EP_DBUF_IN)
 8001fb0:	2902      	cmp	r1, #2
 8001fb2:	d000      	beq.n	8001fb6 <FreeUserBuffer+0xa>
 8001fb4:	4770      	bx	lr
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
 8001fb6:	0080      	lsls	r0, r0, #2
 8001fb8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001fbc:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001fc0:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001fc4:	6802      	ldr	r2, [r0, #0]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	6003      	str	r3, [r0, #0]
 8001fd2:	4770      	bx	lr
*******************************************************************************/
void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
{
  if (bDir == EP_DBUF_OUT)
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
 8001fd4:	0080      	lsls	r0, r0, #2
 8001fd6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001fda:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001fde:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001fe2:	6802      	ldr	r2, [r0, #0]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fee:	6003      	str	r3, [r0, #0]
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <ToWord>:
uint16_t ToWord(uint8_t bh, uint8_t bl)
{
  uint16_t wRet;
  wRet = (uint16_t)bl | ((uint16_t)bh << 8);
  return(wRet);
}
 8001ff4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop

08001ffc <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8001ffc:	b2c3      	uxtb	r3, r0
 8001ffe:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8002000:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop

08002008 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8002008:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800200a:	4906      	ldr	r1, [pc, #24]	; (8002024 <USB_SIL_Init+0x1c>)
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800200c:	4c06      	ldr	r4, [pc, #24]	; (8002028 <USB_SIL_Init+0x20>)
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800200e:	4a07      	ldr	r2, [pc, #28]	; (800202c <USB_SIL_Init+0x24>)
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002010:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 8002012:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002016:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8002018:	800b      	strh	r3, [r1, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
  return 0;
}
 800201a:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800201e:	6013      	str	r3, [r2, #0]
  return 0;
}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	200004f4 	.word	0x200004f4
 8002028:	40005c44 	.word	0x40005c44
 800202c:	40005c40 	.word	0x40005c40

08002030 <USB_SIL_Write>:
*                  - wBufferSize: Number of data to be written (in bytes).
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
{
 8002030:	b570      	push	{r4, r5, r6, lr}
  /* Use the memory interface function to write to the selected endpoint */
  UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
 8002032:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8002036:	4628      	mov	r0, r5
*                  - wBufferSize: Number of data to be written (in bytes).
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
{
 8002038:	460e      	mov	r6, r1
  /* Use the memory interface function to write to the selected endpoint */
  UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
 800203a:	b294      	uxth	r4, r2
 800203c:	f7ff fdce 	bl	8001bdc <GetEPTxAddr>
 8002040:	4622      	mov	r2, r4
 8002042:	4601      	mov	r1, r0
 8002044:	4630      	mov	r0, r6
 8002046:	f7ff fba5 	bl	8001794 <UserToPMABufferCopy>

  /* Update the data length in the control register */
  SetEPTxCount((bEpAddr & 0x7F), wBufferSize);
 800204a:	4628      	mov	r0, r5
 800204c:	4621      	mov	r1, r4
 800204e:	f7ff fde5 	bl	8001c1c <SetEPTxCount>
  
  return 0;
}
 8002052:	2000      	movs	r0, #0
 8002054:	bd70      	pop	{r4, r5, r6, pc}
 8002056:	bf00      	nop

08002058 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002058:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800205a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800205e:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002060:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002062:	f7ff fe2f 	bl	8001cc4 <GetEPRxCount>
 8002066:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002068:	4628      	mov	r0, r5
 800206a:	f7ff fdc7 	bl	8001bfc <GetEPRxAddr>
 800206e:	4622      	mov	r2, r4
 8002070:	4601      	mov	r1, r0
 8002072:	4630      	mov	r0, r6
 8002074:	f7ff fbaa 	bl	80017cc <PMAToUserBufferCopy>

  /* Return the number of received data */
  return DataLength;
}
 8002078:	4620      	mov	r0, r4
 800207a:	bd70      	pop	{r4, r5, r6, pc}

0800207c <EP1_IN_Callback>:
* Return         : None.
*******************************************************************************/

void EP1_IN_Callback (void)
{
  packet_sent = 1;
 800207c:	4b01      	ldr	r3, [pc, #4]	; (8002084 <EP1_IN_Callback+0x8>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	4770      	bx	lr
 8002084:	20000210 	.word	0x20000210

08002088 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Receive_length = GetEPRxCount(ENDP3);
 800208a:	2003      	movs	r0, #3
 800208c:	f7ff fe1a 	bl	8001cc4 <GetEPRxCount>
 8002090:	4c17      	ldr	r4, [pc, #92]	; (80020f0 <EP3_OUT_Callback+0x68>)
 8002092:	4602      	mov	r2, r0
  PMAToUserBufferCopy((unsigned char*)Receive_Buffer, ENDP3_RXADDR, Receive_length);
 8002094:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002098:	4816      	ldr	r0, [pc, #88]	; (80020f4 <EP3_OUT_Callback+0x6c>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
  Receive_length = GetEPRxCount(ENDP3);
 800209a:	6022      	str	r2, [r4, #0]
  PMAToUserBufferCopy((unsigned char*)Receive_Buffer, ENDP3_RXADDR, Receive_length);
 800209c:	f7ff fb96 	bl	80017cc <PMAToUserBufferCopy>

  for (int i = 0; i < Receive_length; i++) {
 80020a0:	6825      	ldr	r5, [r4, #0]
 80020a2:	4815      	ldr	r0, [pc, #84]	; (80020f8 <EP3_OUT_Callback+0x70>)
 80020a4:	b195      	cbz	r5, 80020cc <EP3_OUT_Callback+0x44>
 80020a6:	4c15      	ldr	r4, [pc, #84]	; (80020fc <EP3_OUT_Callback+0x74>)
 80020a8:	4f12      	ldr	r7, [pc, #72]	; (80020f4 <EP3_OUT_Callback+0x6c>)
 80020aa:	4e15      	ldr	r6, [pc, #84]	; (8002100 <EP3_OUT_Callback+0x78>)
 80020ac:	2200      	movs	r2, #0
    _vcom_buf[_vcom_buf_tail++] = Receive_Buffer[i];
 80020ae:	7823      	ldrb	r3, [r4, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	1c59      	adds	r1, r3, #1
 80020b4:	b2c9      	uxtb	r1, r1
 80020b6:	7021      	strb	r1, [r4, #0]
 80020b8:	5cb9      	ldrb	r1, [r7, r2]
 80020ba:	b2c9      	uxtb	r1, r1
 80020bc:	54f1      	strb	r1, [r6, r3]
    _vcom_buf_available++;
 80020be:	8803      	ldrh	r3, [r0, #0]
void EP3_OUT_Callback(void)
{
  Receive_length = GetEPRxCount(ENDP3);
  PMAToUserBufferCopy((unsigned char*)Receive_Buffer, ENDP3_RXADDR, Receive_length);

  for (int i = 0; i < Receive_length; i++) {
 80020c0:	3201      	adds	r2, #1
    _vcom_buf[_vcom_buf_tail++] = Receive_Buffer[i];
    _vcom_buf_available++;
 80020c2:	3301      	adds	r3, #1
 80020c4:	b29b      	uxth	r3, r3
void EP3_OUT_Callback(void)
{
  Receive_length = GetEPRxCount(ENDP3);
  PMAToUserBufferCopy((unsigned char*)Receive_Buffer, ENDP3_RXADDR, Receive_length);

  for (int i = 0; i < Receive_length; i++) {
 80020c6:	42aa      	cmp	r2, r5
    _vcom_buf[_vcom_buf_tail++] = Receive_Buffer[i];
    _vcom_buf_available++;
 80020c8:	8003      	strh	r3, [r0, #0]
void EP3_OUT_Callback(void)
{
  Receive_length = GetEPRxCount(ENDP3);
  PMAToUserBufferCopy((unsigned char*)Receive_Buffer, ENDP3_RXADDR, Receive_length);

  for (int i = 0; i < Receive_length; i++) {
 80020ca:	d1f0      	bne.n	80020ae <EP3_OUT_Callback+0x26>
    _vcom_buf[_vcom_buf_tail++] = Receive_Buffer[i];
    _vcom_buf_available++;
  }

  //check if buffer corrupted
  if (_vcom_buf_available > 256) {
 80020cc:	8803      	ldrh	r3, [r0, #0]
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <EP3_OUT_Callback+0x70>)
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d6:	d905      	bls.n	80020e4 <EP3_OUT_Callback+0x5c>
    _vcom_buf_available = 256;
    _vcom_buf_corrupt = 1;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <EP3_OUT_Callback+0x7c>)
    _vcom_buf_available++;
  }

  //check if buffer corrupted
  if (_vcom_buf_available > 256) {
    _vcom_buf_available = 256;
 80020da:	f44f 7080 	mov.w	r0, #256	; 0x100
    _vcom_buf_corrupt = 1;
 80020de:	2101      	movs	r1, #1
    _vcom_buf_available++;
  }

  //check if buffer corrupted
  if (_vcom_buf_available > 256) {
    _vcom_buf_available = 256;
 80020e0:	8010      	strh	r0, [r2, #0]
    _vcom_buf_corrupt = 1;
 80020e2:	7019      	strb	r1, [r3, #0]
  }

  //Reenable receive endpoint
  SetEPRxValid(ENDP3);
 80020e4:	2003      	movs	r0, #3
}
 80020e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _vcom_buf_available = 256;
    _vcom_buf_corrupt = 1;
  }

  //Reenable receive endpoint
  SetEPRxValid(ENDP3);
 80020ea:	f7ff bc51 	b.w	8001990 <SetEPRxValid>
 80020ee:	bf00      	nop
 80020f0:	200004fc 	.word	0x200004fc
 80020f4:	2000034c 	.word	0x2000034c
 80020f8:	20000498 	.word	0x20000498
 80020fc:	20000329 	.word	0x20000329
 8002100:	20000398 	.word	0x20000398
 8002104:	2000032a 	.word	0x2000032a

08002108 <EXTI_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8002108:	b430      	push	{r4, r5}
  EXTI->IMR    = 0x1F800000;
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <EXTI_DeInit+0x30>)
  EXTI->EMR    = 0x00000000;
 800210c:	2200      	movs	r2, #0
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR    = 0x1F800000;
 800210e:	f04f 55fc 	mov.w	r5, #528482304	; 0x1f800000
  EXTI->EMR    = 0x00000000;
  EXTI->RTSR   = 0x00000000;
  EXTI->FTSR   = 0x00000000;
  EXTI->SWIER  = 0x00000000;
  EXTI->PR     = 0xE07FFFFF;
 8002112:	f06f 54fc 	mvn.w	r4, #528482304	; 0x1f800000
  EXTI->IMR2   = 0x0000000C;
 8002116:	200c      	movs	r0, #12
  EXTI->EMR2   = 0x00000000;
  EXTI->RTSR2  = 0x00000000;
  EXTI->FTSR2  = 0x00000000;
  EXTI->SWIER2 = 0x00000000;
  EXTI->PR2    = 0x00000003;
 8002118:	2103      	movs	r1, #3
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR    = 0x1F800000;
 800211a:	601d      	str	r5, [r3, #0]
  EXTI->EMR    = 0x00000000;
 800211c:	605a      	str	r2, [r3, #4]
  EXTI->RTSR   = 0x00000000;
 800211e:	609a      	str	r2, [r3, #8]
  EXTI->FTSR   = 0x00000000;
 8002120:	60da      	str	r2, [r3, #12]
  EXTI->SWIER  = 0x00000000;
 8002122:	611a      	str	r2, [r3, #16]
  EXTI->PR     = 0xE07FFFFF;
 8002124:	615c      	str	r4, [r3, #20]
  EXTI->IMR2   = 0x0000000C;
 8002126:	6218      	str	r0, [r3, #32]
  EXTI->EMR2   = 0x00000000;
  EXTI->RTSR2  = 0x00000000;
  EXTI->FTSR2  = 0x00000000;
  EXTI->SWIER2 = 0x00000000;
  EXTI->PR2    = 0x00000003;
}
 8002128:	bc30      	pop	{r4, r5}
  EXTI->RTSR   = 0x00000000;
  EXTI->FTSR   = 0x00000000;
  EXTI->SWIER  = 0x00000000;
  EXTI->PR     = 0xE07FFFFF;
  EXTI->IMR2   = 0x0000000C;
  EXTI->EMR2   = 0x00000000;
 800212a:	625a      	str	r2, [r3, #36]	; 0x24
  EXTI->RTSR2  = 0x00000000;
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
  EXTI->FTSR2  = 0x00000000;
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
  EXTI->SWIER2 = 0x00000000;
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
  EXTI->PR2    = 0x00000003;
 8002132:	6359      	str	r1, [r3, #52]	; 0x34
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010400 	.word	0x40010400

0800213c <EXTI_Init>:
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800213c:	7983      	ldrb	r3, [r0, #6]
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800213e:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <EXTI_Init+0xbc>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 8002144:	6803      	ldr	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8002146:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8002148:	7944      	ldrb	r4, [r0, #5]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800214a:	f8df e100 	ldr.w	lr, [pc, #256]	; 800224c <EXTI_Init+0x110>
    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    
    tmp = (uint32_t)EXTI_BASE;

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800214e:	4e3d      	ldr	r6, [pc, #244]	; (8002244 <EXTI_Init+0x108>)
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8002150:	4d3d      	ldr	r5, [pc, #244]	; (8002248 <EXTI_Init+0x10c>)
  tmp = (uint32_t)EXTI_BASE;
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 8002152:	f023 011f 	bic.w	r1, r3, #31
 8002156:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800215a:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 800215e:	f003 071f 	and.w	r7, r3, #31
 8002162:	f8d1 c000 	ldr.w	ip, [r1]
 8002166:	2301      	movs	r3, #1
 8002168:	fa03 f707 	lsl.w	r7, r3, r7
 800216c:	ea2c 0707 	bic.w	r7, ip, r7
 8002170:	600f      	str	r7, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8002172:	6801      	ldr	r1, [r0, #0]
 8002174:	f021 0c1f 	bic.w	ip, r1, #31
 8002178:	f001 011f 	and.w	r1, r1, #31
 800217c:	f85c 700e 	ldr.w	r7, [ip, lr]
 8002180:	fa03 f101 	lsl.w	r1, r3, r1
 8002184:	ea27 0101 	bic.w	r1, r7, r1
 8002188:	f84c 100e 	str.w	r1, [ip, lr]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 800218c:	6801      	ldr	r1, [r0, #0]
 800218e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002192:	f021 071f 	bic.w	r7, r1, #31
 8002196:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800219a:	f001 011f 	and.w	r1, r1, #31
 800219e:	f852 e007 	ldr.w	lr, [r2, r7]
 80021a2:	fa03 f101 	lsl.w	r1, r3, r1
 80021a6:	ea4e 0101 	orr.w	r1, lr, r1
 80021aa:	51d1      	str	r1, [r2, r7]
    
    tmp = (uint32_t)EXTI_BASE;

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80021ac:	6802      	ldr	r2, [r0, #0]
 80021ae:	f022 071f 	bic.w	r7, r2, #31
 80021b2:	f002 021f 	and.w	r2, r2, #31
 80021b6:	59b9      	ldr	r1, [r7, r6]
 80021b8:	fa03 f202 	lsl.w	r2, r3, r2
 80021bc:	ea21 0202 	bic.w	r2, r1, r2
 80021c0:	51ba      	str	r2, [r7, r6]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80021c2:	6802      	ldr	r2, [r0, #0]
 80021c4:	f022 071f 	bic.w	r7, r2, #31
 80021c8:	f002 021f 	and.w	r2, r2, #31
 80021cc:	5979      	ldr	r1, [r7, r5]
 80021ce:	fa03 f202 	lsl.w	r2, r3, r2
 80021d2:	ea21 0202 	bic.w	r2, r1, r2
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80021d6:	2c10      	cmp	r4, #16
    
    tmp = (uint32_t)EXTI_BASE;

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80021d8:	517a      	str	r2, [r7, r5]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80021da:	d01f      	beq.n	800221c <EXTI_Init+0xe0>
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
    }
    else
    {
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80021dc:	6801      	ldr	r1, [r0, #0]
 80021de:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80021e2:	f021 001f 	bic.w	r0, r1, #31
 80021e6:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80021ea:	f001 011f 	and.w	r1, r1, #31
 80021ee:	5814      	ldr	r4, [r2, r0]
 80021f0:	408b      	lsls	r3, r1
 80021f2:	4323      	orrs	r3, r4
 80021f4:	5013      	str	r3, [r2, r0]
 80021f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
  }
      
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80021f8:	7903      	ldrb	r3, [r0, #4]
 80021fa:	6802      	ldr	r2, [r0, #0]
 80021fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002200:	f022 041f 	bic.w	r4, r2, #31
 8002204:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8002208:	f002 021f 	and.w	r2, r2, #31
 800220c:	5919      	ldr	r1, [r3, r4]
 800220e:	2001      	movs	r0, #1
 8002210:	fa00 f202 	lsl.w	r2, r0, r2
 8002214:	ea21 0202 	bic.w	r2, r1, r2
 8002218:	511a      	str	r2, [r3, r4]
 800221a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800221c:	6802      	ldr	r2, [r0, #0]
 800221e:	f022 011f 	bic.w	r1, r2, #31
 8002222:	f002 021f 	and.w	r2, r2, #31
 8002226:	598c      	ldr	r4, [r1, r6]
 8002228:	fa03 f202 	lsl.w	r2, r3, r2
 800222c:	4322      	orrs	r2, r4
 800222e:	518a      	str	r2, [r1, r6]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 8002230:	6802      	ldr	r2, [r0, #0]
 8002232:	f022 011f 	bic.w	r1, r2, #31
 8002236:	f002 021f 	and.w	r2, r2, #31
 800223a:	5948      	ldr	r0, [r1, r5]
 800223c:	4093      	lsls	r3, r2
 800223e:	4303      	orrs	r3, r0
 8002240:	514b      	str	r3, [r1, r5]
 8002242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002244:	40010408 	.word	0x40010408
 8002248:	4001040c 	.word	0x4001040c
 800224c:	40010404 	.word	0x40010404

08002250 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8002250:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8002252:	2210      	movs	r2, #16
 8002254:	7142      	strb	r2, [r0, #5]
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8002256:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8002258:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Rising_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800225a:	7183      	strb	r3, [r0, #6]
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop

08002260 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
 8002260:	f020 011f 	bic.w	r1, r0, #31
 8002264:	4a05      	ldr	r2, [pc, #20]	; (800227c <EXTI_GenerateSWInterrupt+0x1c>)
  *         will be generated.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8002266:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
 8002268:	f000 001f 	and.w	r0, r0, #31
 800226c:	588c      	ldr	r4, [r1, r2]
 800226e:	2301      	movs	r3, #1
 8002270:	4083      	lsls	r3, r0
 8002272:	4323      	orrs	r3, r4
 8002274:	508b      	str	r3, [r1, r2]

}
 8002276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40010410 	.word	0x40010410

08002280 <EXTI_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   
  if ((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20)& (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET)
 8002280:	f020 021f 	bic.w	r2, r0, #31
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <EXTI_GetFlagStatus+0x1c>)
 8002286:	f000 001f 	and.w	r0, r0, #31
 800228a:	58d2      	ldr	r2, [r2, r3]
 800228c:	2301      	movs	r3, #1
 800228e:	4083      	lsls	r3, r0
 8002290:	421a      	tst	r2, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002292:	bf14      	ite	ne
 8002294:	2001      	movne	r0, #1
 8002296:	2000      	moveq	r0, #0
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40010414 	.word	0x40010414

080022a0 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));  
 80022a0:	f000 011f 	and.w	r1, r0, #31
 80022a4:	2301      	movs	r3, #1
 80022a6:	f020 001f 	bic.w	r0, r0, #31
 80022aa:	4a02      	ldr	r2, [pc, #8]	; (80022b4 <EXTI_ClearFlag+0x14>)
 80022ac:	408b      	lsls	r3, r1
 80022ae:	5083      	str	r3, [r0, r2]
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40010414 	.word	0x40010414

080022b8 <EXTI_GetITStatus>:
  uint32_t enablestatus = 0;
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 80022b8:	f020 031f 	bic.w	r3, r0, #31
 80022bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022c0:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80022c4:	f000 001f 	and.w	r0, r0, #31
 80022c8:	2201      	movs	r2, #1
 80022ca:	6819      	ldr	r1, [r3, #0]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80022cc:	695b      	ldr	r3, [r3, #20]
  uint32_t enablestatus = 0;
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 80022ce:	4082      	lsls	r2, r0
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80022d0:	ea13 0002 	ands.w	r0, r3, r2
 80022d4:	d003      	beq.n	80022de <EXTI_GetITStatus+0x26>
 80022d6:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 80022d8:	bf14      	ite	ne
 80022da:	2001      	movne	r0, #1
 80022dc:	2000      	moveq	r0, #0
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 80022de:	4770      	bx	lr

080022e0 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 80022e0:	f000 011f 	and.w	r1, r0, #31
 80022e4:	2301      	movs	r3, #1
 80022e6:	f020 001f 	bic.w	r0, r0, #31
 80022ea:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <EXTI_ClearITPendingBit+0x14>)
 80022ec:	408b      	lsls	r3, r1
 80022ee:	5083      	str	r3, [r0, r2]
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40010414 	.word	0x40010414

080022f8 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80022f8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80022fc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80022fe:	d01b      	beq.n	8002338 <GPIO_DeInit+0x40>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <GPIO_DeInit+0xb8>)
 8002302:	4298      	cmp	r0, r3
 8002304:	d024      	beq.n	8002350 <GPIO_DeInit+0x58>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <GPIO_DeInit+0xbc>)
 8002308:	4298      	cmp	r0, r3
 800230a:	d02d      	beq.n	8002368 <GPIO_DeInit+0x70>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <GPIO_DeInit+0xc0>)
 800230e:	4298      	cmp	r0, r3
 8002310:	d036      	beq.n	8002380 <GPIO_DeInit+0x88>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <GPIO_DeInit+0xc4>)
 8002314:	4298      	cmp	r0, r3
 8002316:	d03f      	beq.n	8002398 <GPIO_DeInit+0xa0>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <GPIO_DeInit+0xc8>)
 800231a:	4298      	cmp	r0, r3
 800231c:	d000      	beq.n	8002320 <GPIO_DeInit+0x28>
 800231e:	bd08      	pop	{r3, pc}
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8002320:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002324:	2101      	movs	r1, #1
 8002326:	f000 fbf9 	bl	8002b1c <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 800232a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800232e:	2100      	movs	r1, #0
    }
  }
}
 8002330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8002334:	f000 bbf2 	b.w	8002b1c <RCC_AHBPeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002338:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800233c:	2101      	movs	r1, #1
 800233e:	f000 fbed 	bl	8002b1c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8002342:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002346:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8002348:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 800234c:	f000 bbe6 	b.w	8002b1c <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002350:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002354:	2101      	movs	r1, #1
 8002356:	f000 fbe1 	bl	8002b1c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800235a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800235e:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8002360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8002364:	f000 bbda 	b.w	8002b1c <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8002368:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800236c:	2101      	movs	r1, #1
 800236e:	f000 fbd5 	bl	8002b1c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8002372:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002376:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8002378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 800237c:	f000 bbce 	b.w	8002b1c <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8002380:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002384:	2101      	movs	r1, #1
 8002386:	f000 fbc9 	bl	8002b1c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800238a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800238e:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8002390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8002394:	f000 bbc2 	b.w	8002b1c <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8002398:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800239c:	2101      	movs	r1, #1
 800239e:	f000 fbbd 	bl	8002b1c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 80023a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80023a6:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80023a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 80023ac:	f000 bbb6 	b.w	8002b1c <RCC_AHBPeriphResetCmd>
 80023b0:	48000400 	.word	0x48000400
 80023b4:	48000800 	.word	0x48000800
 80023b8:	48000c00 	.word	0x48000c00
 80023bc:	48001000 	.word	0x48001000
 80023c0:	48001400 	.word	0x48001400

080023c4 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80023c4:	2200      	movs	r2, #0
 80023c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80023ca:	4613      	mov	r3, r2
 80023cc:	f8d1 e000 	ldr.w	lr, [r1]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80023d0:	2701      	movs	r7, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80023d2:	f04f 0c03 	mov.w	ip, #3
 80023d6:	e004      	b.n	80023e2 <GPIO_Init+0x1e>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80023d8:	3301      	adds	r3, #1
 80023da:	2b10      	cmp	r3, #16
 80023dc:	f102 0202 	add.w	r2, r2, #2
 80023e0:	d025      	beq.n	800242e <GPIO_Init+0x6a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80023e2:	fa07 f403 	lsl.w	r4, r7, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80023e6:	ea04 050e 	and.w	r5, r4, lr

    if (currentpin == pos)
 80023ea:	42a5      	cmp	r5, r4
 80023ec:	d1f4      	bne.n	80023d8 <GPIO_Init+0x14>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80023ee:	790e      	ldrb	r6, [r1, #4]
 80023f0:	1e74      	subs	r4, r6, #1
 80023f2:	2c01      	cmp	r4, #1
 80023f4:	fa0c f402 	lsl.w	r4, ip, r2
 80023f8:	d91b      	bls.n	8002432 <GPIO_Init+0x6e>
 80023fa:	43e4      	mvns	r4, r4
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80023fc:	6805      	ldr	r5, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80023fe:	f891 8007 	ldrb.w	r8, [r1, #7]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002402:	402c      	ands	r4, r5
 8002404:	6004      	str	r4, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002406:	6804      	ldr	r4, [r0, #0]
 8002408:	4096      	lsls	r6, r2
 800240a:	4326      	orrs	r6, r4
 800240c:	6006      	str	r6, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800240e:	68c4      	ldr	r4, [r0, #12]
 8002410:	fa0c f502 	lsl.w	r5, ip, r2
 8002414:	ea24 0405 	bic.w	r4, r4, r5
 8002418:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800241a:	68c5      	ldr	r5, [r0, #12]
 800241c:	fa08 f402 	lsl.w	r4, r8, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002420:	3301      	adds	r3, #1

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002422:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002424:	2b10      	cmp	r3, #16

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002426:	60c4      	str	r4, [r0, #12]
 8002428:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800242c:	d1d9      	bne.n	80023e2 <GPIO_Init+0x1e>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800242e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002432:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002436:	f891 8005 	ldrb.w	r8, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800243a:	f891 9006 	ldrb.w	r9, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800243e:	fa0c f402 	lsl.w	r4, ip, r2
 8002442:	43e4      	mvns	r4, r4
 8002444:	ea04 0a0a 	and.w	sl, r4, sl
 8002448:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800244c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002450:	fa08 f802 	lsl.w	r8, r8, r2
 8002454:	ea48 080a 	orr.w	r8, r8, sl
 8002458:	f8c0 8008 	str.w	r8, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800245c:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8002460:	fa1f f888 	uxth.w	r8, r8
 8002464:	ea28 0805 	bic.w	r8, r8, r5
 8002468:	f8a0 8004 	strh.w	r8, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800246c:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8002470:	fa09 f903 	lsl.w	r9, r9, r3
 8002474:	ea49 0508 	orr.w	r5, r9, r8
 8002478:	b2ad      	uxth	r5, r5
 800247a:	8085      	strh	r5, [r0, #4]
 800247c:	e7be      	b.n	80023fc <GPIO_Init+0x38>
 800247e:	bf00      	nop

08002480 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8002480:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002482:	f64f 71ff 	movw	r1, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002486:	2201      	movs	r2, #1
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002488:	6001      	str	r1, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800248a:	7142      	strb	r2, [r0, #5]
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800248c:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800248e:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002490:	71c3      	strb	r3, [r0, #7]
 8002492:	4770      	bx	lr

08002494 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8002494:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002498:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800249a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800249c:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 800249e:	69c3      	ldr	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 80024a0:	69c3      	ldr	r3, [r0, #28]
 80024a2:	4770      	bx	lr

080024a4 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80024a4:	8a03      	ldrh	r3, [r0, #16]
 80024a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80024a8:	bf14      	ite	ne
 80024aa:	2001      	movne	r0, #1
 80024ac:	2000      	moveq	r0, #0
 80024ae:	4770      	bx	lr

080024b0 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80024b0:	8a00      	ldrh	r0, [r0, #16]
}
 80024b2:	b280      	uxth	r0, r0
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80024b8:	8a83      	ldrh	r3, [r0, #20]
 80024ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80024bc:	bf14      	ite	ne
 80024be:	2001      	movne	r0, #1
 80024c0:	2000      	moveq	r0, #0
 80024c2:	4770      	bx	lr

080024c4 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 80024c4:	8a80      	ldrh	r0, [r0, #20]
}
 80024c6:	b280      	uxth	r0, r0
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop

080024cc <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80024cc:	6181      	str	r1, [r0, #24]
 80024ce:	4770      	bx	lr

080024d0 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80024d0:	8501      	strh	r1, [r0, #40]	; 0x28
 80024d2:	4770      	bx	lr

080024d4 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80024d4:	b90a      	cbnz	r2, 80024da <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80024d6:	8501      	strh	r1, [r0, #40]	; 0x28
 80024d8:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	6181      	str	r1, [r0, #24]
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80024e0:	8281      	strh	r1, [r0, #20]
 80024e2:	4770      	bx	lr

080024e4 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80024e4:	08cb      	lsrs	r3, r1, #3
 80024e6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80024ea:	f001 0107 	and.w	r1, r1, #7
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80024ee:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80024f0:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80024f2:	6a04      	ldr	r4, [r0, #32]
 80024f4:	230f      	movs	r3, #15
 80024f6:	408b      	lsls	r3, r1
 80024f8:	ea24 0303 	bic.w	r3, r4, r3
 80024fc:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80024fe:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8002500:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8002504:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002506:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002508:	6203      	str	r3, [r0, #32]
}
 800250a:	4770      	bx	lr

0800250c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800250c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <NVIC_PriorityGroupConfig+0x10>)
 8002512:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8002516:	60d8      	str	r0, [r3, #12]
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002520:	78c3      	ldrb	r3, [r0, #3]
 8002522:	b95b      	cbnz	r3, 800253c <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002524:	7803      	ldrb	r3, [r0, #0]
 8002526:	4818      	ldr	r0, [pc, #96]	; (8002588 <NVIC_Init+0x68>)
 8002528:	095a      	lsrs	r2, r3, #5
 800252a:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002536:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800253a:	4770      	bx	lr
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800253c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800253e:	4a13      	ldr	r2, [pc, #76]	; (800258c <NVIC_Init+0x6c>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002540:	7843      	ldrb	r3, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002542:	68d2      	ldr	r2, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8002544:	7885      	ldrb	r5, [r0, #2]
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002546:	7801      	ldrb	r1, [r0, #0]
 8002548:	4c0f      	ldr	r4, [pc, #60]	; (8002588 <NVIC_Init+0x68>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800254a:	43d2      	mvns	r2, r2
 800254c:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8002550:	260f      	movs	r6, #15
 8002552:	40d6      	lsrs	r6, r2
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
 8002554:	f1c2 0704 	rsb	r7, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002558:	fa03 f207 	lsl.w	r2, r3, r7
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800255c:	ea06 0305 	and.w	r3, r6, r5
 8002560:	4313      	orrs	r3, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002562:	f101 4260 	add.w	r2, r1, #3758096384	; 0xe0000000
 8002566:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
 800256a:	011b      	lsls	r3, r3, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002572:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002574:	2201      	movs	r2, #1
 8002576:	f003 011f 	and.w	r1, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800257a:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800257c:	408a      	lsls	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800257e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002582:	bcf0      	pop	{r4, r5, r6, r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8002590:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8002594:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8002598:	4b01      	ldr	r3, [pc, #4]	; (80025a0 <NVIC_SetVectorTable+0x10>)
 800259a:	4308      	orrs	r0, r1
 800259c:	6098      	str	r0, [r3, #8]
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <NVIC_SystemLPConfig+0x14>)
 80025a6:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80025a8:	b919      	cbnz	r1, 80025b2 <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80025aa:	ea23 0000 	bic.w	r0, r3, r0
 80025ae:	6110      	str	r0, [r2, #16]
 80025b0:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80025b2:	4318      	orrs	r0, r3
 80025b4:	6110      	str	r0, [r2, #16]
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <SysTick_CLKSourceConfig+0x14>)
 80025be:	6813      	ldr	r3, [r2, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80025c0:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80025c2:	bf0c      	ite	eq
 80025c4:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80025c8:	f023 0304 	bicne.w	r3, r3, #4
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4770      	bx	lr
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <RCC_DeInit+0x48>)

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <RCC_DeInit+0x4c>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025d8:	6818      	ldr	r0, [r3, #0]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 80025da:	4912      	ldr	r1, [pc, #72]	; (8002624 <RCC_DeInit+0x50>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025dc:	f040 0001 	orr.w	r0, r0, #1
 80025e0:	6018      	str	r0, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 80025e2:	6858      	ldr	r0, [r3, #4]
 80025e4:	4002      	ands	r2, r0
 80025e6:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80025ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025f2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002602:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 8002604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002606:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800260a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8002610:	6b18      	ldr	r0, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002612:	2200      	movs	r2, #0

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00FCCC;
 8002614:	4001      	ands	r1, r0
 8002616:	6319      	str	r1, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	4770      	bx	lr
 800261c:	40021000 	.word	0x40021000
 8002620:	f8ffc000 	.word	0xf8ffc000
 8002624:	0f00fccc 	.word	0x0f00fccc

08002628 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8002628:	4b02      	ldr	r3, [pc, #8]	; (8002634 <RCC_HSEConfig+0xc>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 800262e:	7018      	strb	r0, [r3, #0]
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021002 	.word	0x40021002

08002638 <RCC_AdjustHSICalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8002638:	4a03      	ldr	r2, [pc, #12]	; (8002648 <RCC_AdjustHSICalibrationValue+0x10>)
 800263a:	6813      	ldr	r3, [r2, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800263c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8002640:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8002644:	6010      	str	r0, [r2, #0]
 8002646:	4770      	bx	lr
 8002648:	40021000 	.word	0x40021000

0800264c <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800264c:	4b01      	ldr	r3, [pc, #4]	; (8002654 <RCC_HSICmd+0x8>)
 800264e:	6018      	str	r0, [r3, #0]
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	42420000 	.word	0x42420000

08002658 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <RCC_LSEConfig+0x1c>)
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	f022 0204 	bic.w	r2, r2, #4
 8002668:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 800266a:	6a1a      	ldr	r2, [r3, #32]
 800266c:	4310      	orrs	r0, r2
 800266e:	6218      	str	r0, [r3, #32]
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000

08002678 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <RCC_LSEDriveConfig+0x14>)
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	f022 0218 	bic.w	r2, r2, #24
 8002680:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	4310      	orrs	r0, r2
 8002686:	6218      	str	r0, [r3, #32]
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8002690:	4b01      	ldr	r3, [pc, #4]	; (8002698 <RCC_LSICmd+0x8>)
 8002692:	6018      	str	r0, [r3, #0]
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	42420480 	.word	0x42420480

0800269c <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <RCC_PLLConfig+0x14>)
 800269e:	6853      	ldr	r3, [r2, #4]
 80026a0:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80026a4:	6053      	str	r3, [r2, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80026a6:	6853      	ldr	r3, [r2, #4]
 80026a8:	4319      	orrs	r1, r3
 80026aa:	4308      	orrs	r0, r1
 80026ac:	6050      	str	r0, [r2, #4]
 80026ae:	4770      	bx	lr
 80026b0:	40021000 	.word	0x40021000

080026b4 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80026b4:	4b01      	ldr	r3, [pc, #4]	; (80026bc <RCC_PLLCmd+0x8>)
 80026b6:	6018      	str	r0, [r3, #0]
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	42420060 	.word	0x42420060

080026c0 <RCC_PREDIV1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80026c0:	4a03      	ldr	r2, [pc, #12]	; (80026d0 <RCC_PREDIV1Config+0x10>)
 80026c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80026c4:	f023 030f 	bic.w	r3, r3, #15

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 80026c8:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80026ca:	62d0      	str	r0, [r2, #44]	; 0x2c
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000

080026d4 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80026d4:	4b01      	ldr	r3, [pc, #4]	; (80026dc <RCC_ClockSecuritySystemCmd+0x8>)
 80026d6:	6018      	str	r0, [r3, #0]
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	4242004c 	.word	0x4242004c

080026e0 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 80026e0:	4b01      	ldr	r3, [pc, #4]	; (80026e8 <RCC_MCOConfig+0x8>)
 80026e2:	7018      	strb	r0, [r3, #0]
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40021007 	.word	0x40021007

080026ec <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 80026ec:	4a03      	ldr	r2, [pc, #12]	; (80026fc <RCC_SYSCLKConfig+0x10>)
 80026ee:	6853      	ldr	r3, [r2, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80026f0:	f023 0303 	bic.w	r3, r3, #3
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80026f4:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80026f6:	6050      	str	r0, [r2, #4]
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000

08002700 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8002700:	4b02      	ldr	r3, [pc, #8]	; (800270c <RCC_GetSYSCLKSource+0xc>)
 8002702:	6858      	ldr	r0, [r3, #4]
}
 8002704:	f000 000c 	and.w	r0, r0, #12
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8002710:	4a03      	ldr	r2, [pc, #12]	; (8002720 <RCC_HCLKConfig+0x10>)
 8002712:	6853      	ldr	r3, [r2, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8002714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8002718:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800271a:	6050      	str	r0, [r2, #4]
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000

08002724 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8002724:	4a03      	ldr	r2, [pc, #12]	; (8002734 <RCC_PCLK1Config+0x10>)
 8002726:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8002728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800272c:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800272e:	6050      	str	r0, [r2, #4]
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8002738:	4a03      	ldr	r2, [pc, #12]	; (8002748 <RCC_PCLK2Config+0x10>)
 800273a:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800273c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8002740:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002744:	6050      	str	r0, [r2, #4]
 8002746:	4770      	bx	lr
 8002748:	40021000 	.word	0x40021000

0800274c <RCC_GetClocksFreq>:
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800274c:	4a9e      	ldr	r2, [pc, #632]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
 800274e:	6853      	ldr	r3, [r2, #4]
 8002750:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8002754:	2b04      	cmp	r3, #4
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002756:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 8002758:	f000 8104 	beq.w	8002964 <RCC_GetClocksFreq+0x218>
 800275c:	2b08      	cmp	r3, #8
 800275e:	f000 80ee 	beq.w	800293e <RCC_GetClocksFreq+0x1f2>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002762:	499a      	ldr	r1, [pc, #616]	; (80029cc <RCC_GetClocksFreq+0x280>)
 8002764:	6001      	str	r1, [r0, #0]
  uint32_t apb2presc = 0, ahbpresc = 0;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 8002766:	b103      	cbz	r3, 800276a <RCC_GetClocksFreq+0x1e>
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8002768:	2300      	movs	r3, #0
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800276a:	4d97      	ldr	r5, [pc, #604]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
  tmp = tmp >> 4;
  ahbpresc = APBAHBPrescTable[tmp]; 
 800276c:	4c98      	ldr	r4, [pc, #608]	; (80029d0 <RCC_GetClocksFreq+0x284>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800276e:	686a      	ldr	r2, [r5, #4]
  tmp = tmp >> 4;
 8002770:	f3c2 1203 	ubfx	r2, r2, #4, #4
  ahbpresc = APBAHBPrescTable[tmp]; 
 8002774:	5ca6      	ldrb	r6, [r4, r2]
 8002776:	b2f6      	uxtb	r6, r6
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8002778:	fa21 f206 	lsr.w	r2, r1, r6
 800277c:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800277e:	686f      	ldr	r7, [r5, #4]
  tmp = tmp >> 8;
 8002780:	f3c7 2702 	ubfx	r7, r7, #8, #3
  presc = APBAHBPrescTable[tmp];
 8002784:	5de7      	ldrb	r7, [r4, r7]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002786:	fa22 fe07 	lsr.w	lr, r2, r7
 800278a:	f8c0 e008 	str.w	lr, [r0, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800278e:	686f      	ldr	r7, [r5, #4]
  tmp = tmp >> 11;
 8002790:	f3c7 27c2 	ubfx	r7, r7, #11, #3
  apb2presc = APBAHBPrescTable[tmp];
 8002794:	5de7      	ldrb	r7, [r4, r7]
 8002796:	b2ff      	uxtb	r7, r7
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8002798:	40fa      	lsrs	r2, r7
 800279a:	60c2      	str	r2, [r0, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800279c:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  tmp = tmp >> 4;
 800279e:	f3c5 1504 	ubfx	r5, r5, #4, #5
  presc = ADCPrescTable[tmp];
 80027a2:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80027a6:	8a2d      	ldrh	r5, [r5, #16]
 80027a8:	b2ad      	uxth	r5, r5
  if ((presc & 0x10) != 0)
 80027aa:	f015 0f10 	tst.w	r5, #16
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80027ae:	bf1c      	itt	ne
 80027b0:	fbb3 f5f5 	udivne	r5, r3, r5
 80027b4:	6105      	strne	r5, [r0, #16]
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80027b6:	4d84      	ldr	r5, [pc, #528]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80027b8:	bf08      	it	eq
 80027ba:	6101      	streq	r1, [r0, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80027bc:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  tmp = tmp >> 9;
 80027be:	f3c5 2544 	ubfx	r5, r5, #9, #5
  presc = ADCPrescTable[tmp];
 80027c2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80027c6:	8a24      	ldrh	r4, [r4, #16]
 80027c8:	b2a4      	uxth	r4, r4
  if ((presc & 0x10) != 0)
 80027ca:	06e5      	lsls	r5, r4, #27
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80027cc:	bf44      	itt	mi
 80027ce:	fbb3 f4f4 	udivmi	r4, r3, r4
 80027d2:	6144      	strmi	r4, [r0, #20]
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80027d4:	4c7c      	ldr	r4, [pc, #496]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80027d6:	bf58      	it	pl
 80027d8:	6141      	strpl	r1, [r0, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80027da:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80027dc:	06e5      	lsls	r5, r4, #27
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80027de:	bf5c      	itt	pl
 80027e0:	4c7a      	ldrpl	r4, [pc, #488]	; (80029cc <RCC_GetClocksFreq+0x280>)
 80027e2:	6184      	strpl	r4, [r0, #24]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80027e4:	4c78      	ldr	r4, [pc, #480]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80027e6:	bf48      	it	mi
 80027e8:	6181      	strmi	r1, [r0, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80027ea:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80027ec:	06a4      	lsls	r4, r4, #26
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80027ee:	bf5c      	itt	pl
 80027f0:	4c76      	ldrpl	r4, [pc, #472]	; (80029cc <RCC_GetClocksFreq+0x280>)
 80027f2:	61c4      	strpl	r4, [r0, #28]
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80027f4:	4c74      	ldr	r4, [pc, #464]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80027f6:	bf48      	it	mi
 80027f8:	61c1      	strmi	r1, [r0, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80027fa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80027fc:	05ed      	lsls	r5, r5, #23
 80027fe:	d53b      	bpl.n	8002878 <RCC_GetClocksFreq+0x12c>
 8002800:	428b      	cmp	r3, r1
 8002802:	f000 80b9 	beq.w	8002978 <RCC_GetClocksFreq+0x22c>
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8002806:	6202      	str	r2, [r0, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8002808:	6b23      	ldr	r3, [r4, #48]	; 0x30
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800280a:	6242      	str	r2, [r0, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800280c:	4b6e      	ldr	r3, [pc, #440]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
 800280e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002810:	07a4      	lsls	r4, r4, #30
 8002812:	f040 8082 	bne.w	800291a <RCC_GetClocksFreq+0x1ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8002816:	6282      	str	r2, [r0, #40]	; 0x28
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8002818:	4b6b      	ldr	r3, [pc, #428]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
 800281a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281c:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8002820:	d166      	bne.n	80028f0 <RCC_GetClocksFreq+0x1a4>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8002822:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8002826:	4b68      	ldr	r3, [pc, #416]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
 8002828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800282a:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 800282e:	d14a      	bne.n	80028c6 <RCC_GetClocksFreq+0x17a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8002830:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8002834:	4b64      	ldr	r3, [pc, #400]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
 8002836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002838:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800283c:	d127      	bne.n	800288e <RCC_GetClocksFreq+0x142>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800283e:	f8c0 e034 	str.w	lr, [r0, #52]	; 0x34
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8002842:	4b61      	ldr	r3, [pc, #388]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
 8002844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002846:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 800284a:	d039      	beq.n	80028c0 <RCC_GetClocksFreq+0x174>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002852:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002856:	f000 809e 	beq.w	8002996 <RCC_GetClocksFreq+0x24a>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002860:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002864:	f000 80ac 	beq.w	80029c0 <RCC_GetClocksFreq+0x274>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800286e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002872:	f000 8092 	beq.w	800299a <RCC_GetClocksFreq+0x24e>
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8002878:	6202      	str	r2, [r0, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800287a:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800287c:	05a5      	lsls	r5, r4, #22
 800287e:	d5c4      	bpl.n	800280a <RCC_GetClocksFreq+0xbe>
 8002880:	428b      	cmp	r3, r1
 8002882:	d1c2      	bne.n	800280a <RCC_GetClocksFreq+0xbe>
  && (apb2presc == ahbpresc))
 8002884:	42b7      	cmp	r7, r6
 8002886:	d1c0      	bne.n	800280a <RCC_GetClocksFreq+0xbe>
 8002888:	004b      	lsls	r3, r1, #1
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 800288a:	6243      	str	r3, [r0, #36]	; 0x24
 800288c:	e7be      	b.n	800280c <RCC_GetClocksFreq+0xc0>
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800288e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002890:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002894:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002898:	d068      	beq.n	800296c <RCC_GetClocksFreq+0x220>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80028a0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80028a4:	d07c      	beq.n	80029a0 <RCC_GetClocksFreq+0x254>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80028ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80028b0:	bf04      	itt	eq
 80028b2:	4b46      	ldreq	r3, [pc, #280]	; (80029cc <RCC_GetClocksFreq+0x280>)
 80028b4:	6343      	streq	r3, [r0, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80028b6:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <RCC_GetClocksFreq+0x27c>)
 80028b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ba:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
 80028be:	d1c5      	bne.n	800284c <RCC_GetClocksFreq+0x100>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80028c0:	f8c0 e038 	str.w	lr, [r0, #56]	; 0x38
 80028c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80028c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c8:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80028cc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80028d0:	d05b      	beq.n	800298a <RCC_GetClocksFreq+0x23e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80028d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d4:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80028d8:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80028dc:	d064      	beq.n	80029a8 <RCC_GetClocksFreq+0x25c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80028e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80028e8:	bf04      	itt	eq
 80028ea:	4b38      	ldreq	r3, [pc, #224]	; (80029cc <RCC_GetClocksFreq+0x280>)
 80028ec:	6303      	streq	r3, [r0, #48]	; 0x30
 80028ee:	e7a1      	b.n	8002834 <RCC_GetClocksFreq+0xe8>
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80028f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80028f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80028fa:	d039      	beq.n	8002970 <RCC_GetClocksFreq+0x224>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80028fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002902:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002906:	d053      	beq.n	80029b0 <RCC_GetClocksFreq+0x264>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800290e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8002912:	bf04      	itt	eq
 8002914:	4b2d      	ldreq	r3, [pc, #180]	; (80029cc <RCC_GetClocksFreq+0x280>)
 8002916:	62c3      	streq	r3, [r0, #44]	; 0x2c
 8002918:	e785      	b.n	8002826 <RCC_GetClocksFreq+0xda>
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800291a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291c:	f002 0203 	and.w	r2, r2, #3
 8002920:	2a01      	cmp	r2, #1
 8002922:	d027      	beq.n	8002974 <RCC_GetClocksFreq+0x228>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8002924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	2a02      	cmp	r2, #2
 800292c:	d044      	beq.n	80029b8 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8002936:	bf04      	itt	eq
 8002938:	4b24      	ldreq	r3, [pc, #144]	; (80029cc <RCC_GetClocksFreq+0x280>)
 800293a:	6283      	streq	r3, [r0, #40]	; 0x28
 800293c:	e76c      	b.n	8002818 <RCC_GetClocksFreq+0xcc>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800293e:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002940:	6854      	ldr	r4, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8002942:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8002946:	1c99      	adds	r1, r3, #2
      
      if (pllsource == 0x00)
 8002948:	03e3      	lsls	r3, r4, #15
 800294a:	d520      	bpl.n	800298e <RCC_GetClocksFreq+0x242>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800294c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <RCC_GetClocksFreq+0x280>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	3301      	adds	r3, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8002956:	fbb2 f3f3 	udiv	r3, r2, r3
 800295a:	fb01 f303 	mul.w	r3, r1, r3
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800295e:	6003      	str	r3, [r0, #0]
      break;
 8002960:	4619      	mov	r1, r3
 8002962:	e702      	b.n	800276a <RCC_GetClocksFreq+0x1e>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002964:	4919      	ldr	r1, [pc, #100]	; (80029cc <RCC_GetClocksFreq+0x280>)
 8002966:	6001      	str	r1, [r0, #0]
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8002968:	2300      	movs	r3, #0
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
 800296a:	e6fe      	b.n	800276a <RCC_GetClocksFreq+0x1e>
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800296c:	6341      	str	r1, [r0, #52]	; 0x34
 800296e:	e768      	b.n	8002842 <RCC_GetClocksFreq+0xf6>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002970:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002972:	e758      	b.n	8002826 <RCC_GetClocksFreq+0xda>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002974:	6281      	str	r1, [r0, #40]	; 0x28
 8002976:	e74f      	b.n	8002818 <RCC_GetClocksFreq+0xcc>
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
  && (apb2presc == ahbpresc)) 
 8002978:	42b7      	cmp	r7, r6
 800297a:	f47f af44 	bne.w	8002806 <RCC_GetClocksFreq+0xba>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800297e:	004b      	lsls	r3, r1, #1
 8002980:	6203      	str	r3, [r0, #32]
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8002982:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8002984:	05a6      	lsls	r6, r4, #22
 8002986:	d480      	bmi.n	800288a <RCC_GetClocksFreq+0x13e>
 8002988:	e73f      	b.n	800280a <RCC_GetClocksFreq+0xbe>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800298a:	6301      	str	r1, [r0, #48]	; 0x30
 800298c:	e752      	b.n	8002834 <RCC_GetClocksFreq+0xe8>
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <RCC_GetClocksFreq+0x288>)
 8002990:	fb03 f301 	mul.w	r3, r3, r1
 8002994:	e7e3      	b.n	800295e <RCC_GetClocksFreq+0x212>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8002996:	6381      	str	r1, [r0, #56]	; 0x38
 8002998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <RCC_GetClocksFreq+0x280>)
 800299c:	6383      	str	r3, [r0, #56]	; 0x38
 800299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80029a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a4:	6343      	str	r3, [r0, #52]	; 0x34
 80029a6:	e74c      	b.n	8002842 <RCC_GetClocksFreq+0xf6>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80029a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ac:	6303      	str	r3, [r0, #48]	; 0x30
 80029ae:	e741      	b.n	8002834 <RCC_GetClocksFreq+0xe8>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80029b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b4:	62c3      	str	r3, [r0, #44]	; 0x2c
 80029b6:	e736      	b.n	8002826 <RCC_GetClocksFreq+0xda>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80029b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029bc:	6283      	str	r3, [r0, #40]	; 0x28
 80029be:	e72b      	b.n	8002818 <RCC_GetClocksFreq+0xcc>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80029c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c4:	6383      	str	r3, [r0, #56]	; 0x38
 80029c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	007a1200 	.word	0x007a1200
 80029d0:	200002f8 	.word	0x200002f8
 80029d4:	003d0900 	.word	0x003d0900

080029d8 <RCC_ADCCLKConfig>:
  tmp = (RCC_PLLCLK >> 28);
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <RCC_ADCCLKConfig+0x1c>)
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 80029da:	0f03      	lsrs	r3, r0, #28
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 80029dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029de:	bf14      	ite	ne
 80029e0:	f423 5378 	bicne.w	r3, r3, #15872	; 0x3e00
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 80029e4:	f423 73f8 	biceq.w	r3, r3, #496	; 0x1f0
 80029e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 80029ea:	4a02      	ldr	r2, [pc, #8]	; (80029f4 <RCC_ADCCLKConfig+0x1c>)
 80029ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029ee:	4318      	orrs	r0, r3
 80029f0:	62d0      	str	r0, [r2, #44]	; 0x2c
 80029f2:	4770      	bx	lr
 80029f4:	40021000 	.word	0x40021000

080029f8 <RCC_I2CCLKConfig>:
  tmp = (RCC_I2CCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp != 0)
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 80029f8:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <RCC_I2CCLKConfig+0x1c>)
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 80029fa:	0f03      	lsrs	r3, r0, #28
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 80029fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029fe:	bf14      	ite	ne
 8002a00:	f023 0320 	bicne.w	r3, r3, #32
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8002a04:	f023 0310 	biceq.w	r3, r3, #16
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 8002a0a:	4a02      	ldr	r2, [pc, #8]	; (8002a14 <RCC_I2CCLKConfig+0x1c>)
 8002a0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a0e:	4318      	orrs	r0, r3
 8002a10:	6310      	str	r0, [r2, #48]	; 0x30
 8002a12:	4770      	bx	lr
 8002a14:	40021000 	.word	0x40021000

08002a18 <RCC_TIMCLKConfig>:
  tmp = (RCC_TIMCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp != 0)
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 8002a18:	4a06      	ldr	r2, [pc, #24]	; (8002a34 <RCC_TIMCLKConfig+0x1c>)
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp != 0)
 8002a1a:	0f03      	lsrs	r3, r0, #28
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 8002a1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a1e:	bf14      	ite	ne
 8002a20:	f423 7300 	bicne.w	r3, r3, #512	; 0x200
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 8002a24:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 8002a2a:	4a02      	ldr	r2, [pc, #8]	; (8002a34 <RCC_TIMCLKConfig+0x1c>)
 8002a2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a2e:	4318      	orrs	r0, r3
 8002a30:	6310      	str	r0, [r2, #48]	; 0x30
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000

08002a38 <RCC_USARTCLKConfig>:
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 8002a38:	0f03      	lsrs	r3, r0, #28

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d809      	bhi.n	8002a54 <RCC_USARTCLKConfig+0x1c>
 8002a40:	e8df f003 	tbb	[pc, r3]
 8002a44:	1f031913 	.word	0x1f031913
 8002a48:	0d          	.byte	0x0d
 8002a49:	00          	.byte	0x00
      break;
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
      break;
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 8002a4a:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <RCC_USARTCLKConfig+0x58>)
 8002a4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a4e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002a52:	6313      	str	r3, [r2, #48]	; 0x30
    default:
      break;
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8002a54:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <RCC_USARTCLKConfig+0x58>)
 8002a56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a58:	4318      	orrs	r0, r3
 8002a5a:	6310      	str	r0, [r2, #48]	; 0x30
 8002a5c:	4770      	bx	lr
      break;
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
      break;
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 8002a5e:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <RCC_USARTCLKConfig+0x58>)
 8002a60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a62:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8002a68:	e7f4      	b.n	8002a54 <RCC_USARTCLKConfig+0x1c>

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <RCC_USARTCLKConfig+0x58>)
 8002a6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8002a74:	e7ee      	b.n	8002a54 <RCC_USARTCLKConfig+0x1c>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8002a76:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <RCC_USARTCLKConfig+0x58>)
 8002a78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a7a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a7e:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8002a80:	e7e8      	b.n	8002a54 <RCC_USARTCLKConfig+0x1c>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
      break;
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 8002a82:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <RCC_USARTCLKConfig+0x58>)
 8002a84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a86:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8002a8c:	e7e2      	b.n	8002a54 <RCC_USARTCLKConfig+0x1c>
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000

08002a94 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8002a94:	4b01      	ldr	r3, [pc, #4]	; (8002a9c <RCC_USBCLKConfig+0x8>)
 8002a96:	6018      	str	r0, [r3, #0]
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	424200d8 	.word	0x424200d8

08002aa0 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8002aa0:	4a02      	ldr	r2, [pc, #8]	; (8002aac <RCC_RTCCLKConfig+0xc>)
 8002aa2:	6a13      	ldr	r3, [r2, #32]
 8002aa4:	4318      	orrs	r0, r3
 8002aa6:	6210      	str	r0, [r2, #32]
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000

08002ab0 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8002ab0:	4b01      	ldr	r3, [pc, #4]	; (8002ab8 <RCC_I2SCLKConfig+0x8>)
 8002ab2:	6018      	str	r0, [r3, #0]
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	424200dc 	.word	0x424200dc

08002abc <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8002abc:	4b01      	ldr	r3, [pc, #4]	; (8002ac4 <RCC_RTCCLKCmd+0x8>)
 8002abe:	6018      	str	r0, [r3, #0]
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	4242043c 	.word	0x4242043c

08002ac8 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8002ac8:	4b01      	ldr	r3, [pc, #4]	; (8002ad0 <RCC_BackupResetCmd+0x8>)
 8002aca:	6018      	str	r0, [r3, #0]
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	42420440 	.word	0x42420440

08002ad4 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <RCC_AHBPeriphClockCmd+0x14>)
 8002ad6:	6953      	ldr	r3, [r2, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002ad8:	b919      	cbnz	r1, 8002ae2 <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002ada:	ea23 0000 	bic.w	r0, r3, r0
 8002ade:	6150      	str	r0, [r2, #20]
 8002ae0:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002ae2:	4318      	orrs	r0, r3
 8002ae4:	6150      	str	r0, [r2, #20]
 8002ae6:	4770      	bx	lr
 8002ae8:	40021000 	.word	0x40021000

08002aec <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <RCC_APB2PeriphClockCmd+0x14>)
 8002aee:	6993      	ldr	r3, [r2, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002af0:	b919      	cbnz	r1, 8002afa <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002af2:	ea23 0000 	bic.w	r0, r3, r0
 8002af6:	6190      	str	r0, [r2, #24]
 8002af8:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002afa:	4318      	orrs	r0, r3
 8002afc:	6190      	str	r0, [r2, #24]
 8002afe:	4770      	bx	lr
 8002b00:	40021000 	.word	0x40021000

08002b04 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <RCC_APB1PeriphClockCmd+0x14>)
 8002b06:	69d3      	ldr	r3, [r2, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b08:	b919      	cbnz	r1, 8002b12 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002b0a:	ea23 0000 	bic.w	r0, r3, r0
 8002b0e:	61d0      	str	r0, [r2, #28]
 8002b10:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002b12:	4318      	orrs	r0, r3
 8002b14:	61d0      	str	r0, [r2, #28]
 8002b16:	4770      	bx	lr
 8002b18:	40021000 	.word	0x40021000

08002b1c <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <RCC_AHBPeriphResetCmd+0x14>)
 8002b1e:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b20:	b919      	cbnz	r1, 8002b2a <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8002b22:	ea23 0000 	bic.w	r0, r3, r0
 8002b26:	6290      	str	r0, [r2, #40]	; 0x28
 8002b28:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8002b2a:	4318      	orrs	r0, r3
 8002b2c:	6290      	str	r0, [r2, #40]	; 0x28
 8002b2e:	4770      	bx	lr
 8002b30:	40021000 	.word	0x40021000

08002b34 <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <RCC_APB2PeriphResetCmd+0x14>)
 8002b36:	68d3      	ldr	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b38:	b919      	cbnz	r1, 8002b42 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002b3a:	ea23 0000 	bic.w	r0, r3, r0
 8002b3e:	60d0      	str	r0, [r2, #12]
 8002b40:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002b42:	4318      	orrs	r0, r3
 8002b44:	60d0      	str	r0, [r2, #12]
 8002b46:	4770      	bx	lr
 8002b48:	40021000 	.word	0x40021000

08002b4c <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <RCC_APB1PeriphResetCmd+0x14>)
 8002b4e:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b50:	b919      	cbnz	r1, 8002b5a <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002b52:	ea23 0000 	bic.w	r0, r3, r0
 8002b56:	6110      	str	r0, [r2, #16]
 8002b58:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002b5a:	4318      	orrs	r0, r3
 8002b5c:	6110      	str	r0, [r2, #16]
 8002b5e:	4770      	bx	lr
 8002b60:	40021000 	.word	0x40021000

08002b64 <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <RCC_ITConfig+0x14>)
 8002b66:	7813      	ldrb	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b68:	b919      	cbnz	r1, 8002b72 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8002b6a:	ea23 0000 	bic.w	r0, r3, r0
 8002b6e:	7010      	strb	r0, [r2, #0]
 8002b70:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8002b72:	4318      	orrs	r0, r3
 8002b74:	7010      	strb	r0, [r2, #0]
 8002b76:	4770      	bx	lr
 8002b78:	40021009 	.word	0x40021009

08002b7c <RCC_GetFlagStatus>:
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
 8002b7c:	0943      	lsrs	r3, r0, #5
 8002b7e:	d108      	bne.n	8002b92 <RCC_GetFlagStatus+0x16>
  {
    statusreg = RCC->CR;
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <RCC_GetFlagStatus+0x44>)
 8002b82:	681a      	ldr	r2, [r3, #0]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002b84:	f000 031f 	and.w	r3, r0, #31
 8002b88:	fa22 f003 	lsr.w	r0, r2, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8002b8c:	f000 0001 	and.w	r0, r0, #1
 8002b90:	4770      	bx	lr

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d00b      	beq.n	8002bae <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 8002b96:	2b04      	cmp	r3, #4
  {
    statusreg = RCC->CFGR;
 8002b98:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <RCC_GetFlagStatus+0x44>)
 8002b9a:	bf0c      	ite	eq
 8002b9c:	685a      	ldreq	r2, [r3, #4]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002b9e:	6a5a      	ldrne	r2, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002ba0:	f000 031f 	and.w	r3, r0, #31
 8002ba4:	fa22 f003 	lsr.w	r0, r2, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8002ba8:	f000 0001 	and.w	r0, r0, #1
 8002bac:	4770      	bx	lr
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <RCC_GetFlagStatus+0x44>)
 8002bb0:	6a1a      	ldr	r2, [r3, #32]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002bb2:	f000 031f 	and.w	r3, r0, #31
 8002bb6:	fa22 f003 	lsr.w	r0, r2, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8002bba:	f000 0001 	and.w	r0, r0, #1
 8002bbe:	4770      	bx	lr
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8002bc4:	b500      	push	{lr}
 8002bc6:	b083      	sub	sp, #12
  __IO uint32_t StartUpCounter = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	e000      	b.n	8002bd0 <RCC_WaitForHSEStartUp+0xc>
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8002bce:	b948      	cbnz	r0, 8002be4 <RCC_WaitForHSEStartUp+0x20>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8002bd0:	2011      	movs	r0, #17
 8002bd2:	f7ff ffd3 	bl	8002b7c <RCC_GetFlagStatus>
    StartUpCounter++;  
 8002bd6:	9b01      	ldr	r3, [sp, #4]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8002bdc:	9b01      	ldr	r3, [sp, #4]
 8002bde:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002be2:	d1f4      	bne.n	8002bce <RCC_WaitForHSEStartUp+0xa>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8002be4:	2011      	movs	r0, #17
 8002be6:	f7ff ffc9 	bl	8002b7c <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }  
  return (status);
}
 8002bea:	3000      	adds	r0, #0
 8002bec:	bf18      	it	ne
 8002bee:	2001      	movne	r0, #1
 8002bf0:	b003      	add	sp, #12
 8002bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bf6:	bf00      	nop

08002bf8 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8002bf8:	4a02      	ldr	r2, [pc, #8]	; (8002c04 <RCC_ClearFlag+0xc>)
 8002bfa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c00:	6253      	str	r3, [r2, #36]	; 0x24
 8002c02:	4770      	bx	lr
 8002c04:	40021000 	.word	0x40021000

08002c08 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <RCC_GetITStatus+0x10>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8002c0e:	bf14      	ite	ne
 8002c10:	2001      	movne	r0, #1
 8002c12:	2000      	moveq	r0, #0
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000

08002c1c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8002c1c:	4b01      	ldr	r3, [pc, #4]	; (8002c24 <RCC_ClearITPendingBit+0x8>)
 8002c1e:	7018      	strb	r0, [r3, #0]
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	4002100a 	.word	0x4002100a

08002c28 <IntToUnicode>:
  * @param  pbuf: pointer to buffer.  
  * @param  len: Data length.   
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8002c28:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002c2a:	2400      	movs	r4, #0
 8002c2c:	b2e3      	uxtb	r3, r4
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d20d      	bcs.n	8002c4e <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 8002c32:	0f03      	lsrs	r3, r0, #28
 8002c34:	2b09      	cmp	r3, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002c36:	bf94      	ite	ls
 8002c38:	3330      	addls	r3, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002c3a:	3337      	addhi	r3, #55	; 0x37
 8002c3c:	f801 3014 	strb.w	r3, [r1, r4, lsl #1]
 8002c40:	eb01 0344 	add.w	r3, r1, r4, lsl #1
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002c44:	2500      	movs	r5, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8002c46:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 8002c48:	705d      	strb	r5, [r3, #1]
 8002c4a:	3401      	adds	r4, #1
 8002c4c:	e7ee      	b.n	8002c2c <IntToUnicode+0x4>
  }
}
 8002c4e:	bd30      	pop	{r4, r5, pc}

08002c50 <Set_System>:
  * @brief  Configures Main system clocks & power.
  * @param  None
  * @retval None
  */
void Set_System(void)
{
 8002c50:	b513      	push	{r0, r1, r4, lr}
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f30x.c file
     */ 

 /* Enable the PWR clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8002c52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002c56:	2101      	movs	r1, #1
 8002c58:	f7ff ff54 	bl	8002b04 <RCC_APB1PeriphClockCmd>

  /* Enable the SYSCFG module clock (used for the USB disconnect feature) */
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	4601      	mov	r1, r0
 8002c60:	f7ff ff44 	bl	8002aec <RCC_APB2PeriphClockCmd>

  /* Enable the USB disconnect GPIO clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIO_DISCONNECT, ENABLE);
 8002c64:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002c68:	2101      	movs	r1, #1
 8002c6a:	f7ff ff33 	bl	8002ad4 <RCC_AHBPeriphClockCmd>

 /*Set PA11,12 as IN - USB_DM,DP*/
  
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002c6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c72:	2101      	movs	r1, #1
 8002c74:	f7ff ff2e 	bl	8002ad4 <RCC_AHBPeriphClockCmd>
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;
 8002c78:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c7c:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002c7e:	2303      	movs	r3, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002c80:	2400      	movs	r4, #0

 /*Set PA11,12 as IN - USB_DM,DP*/
  
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002c82:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002c86:	4669      	mov	r1, sp
 /*Set PA11,12 as IN - USB_DM,DP*/
  
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002c88:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 /*Set PA11,12 as IN - USB_DM,DP*/
  
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002c8e:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002c92:	f88d 4006 	strb.w	r4, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002c96:	f88d 4007 	strb.w	r4, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002c9a:	f7ff fb93 	bl	80023c4 <GPIO_Init>
  
    
  /*SET PA11,12 for USB: USB_DM,DP*/
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_14);
 8002c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca2:	210b      	movs	r1, #11
 8002ca4:	220e      	movs	r2, #14
 8002ca6:	f7ff fc1d 	bl	80024e4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_14);
 8002caa:	210c      	movs	r1, #12
 8002cac:	220e      	movs	r2, #14
 8002cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb2:	f7ff fc17 	bl	80024e4 <GPIO_PinAFConfig>
  
  // /* Configure the Key button in EXTI mode */
  // STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);
  
  /* Configure the EXTI line 18 connected internally to the USB IP */
  EXTI_ClearITPendingBit(EXTI_Line18);
 8002cb6:	2012      	movs	r0, #18
 8002cb8:	f7ff fb12 	bl	80022e0 <EXTI_ClearITPendingBit>
  EXTI_InitStructure.EXTI_Line = EXTI_Line18; /*USB resume from suspend mode*/
 8002cbc:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <Set_System+0x84>)
 8002cbe:	2312      	movs	r3, #18
 8002cc0:	6003      	str	r3, [r0, #0]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	7143      	strb	r3, [r0, #5]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002cc6:	2301      	movs	r3, #1
  // STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);
  
  /* Configure the EXTI line 18 connected internally to the USB IP */
  EXTI_ClearITPendingBit(EXTI_Line18);
  EXTI_InitStructure.EXTI_Line = EXTI_Line18; /*USB resume from suspend mode*/
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8002cc8:	7104      	strb	r4, [r0, #4]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002cca:	7183      	strb	r3, [r0, #6]
  EXTI_Init(&EXTI_InitStructure);
 8002ccc:	f7ff fa36 	bl	800213c <EXTI_Init>
 
  // EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
}
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd10      	pop	{r4, pc}
 8002cd4:	2000038c 	.word	0x2000038c

08002cd8 <Set_USBClock>:
  * @brief  Configures USB Clock input (48MHz).
  * @param  None
  * @retval None
  */
void Set_USBClock(void)
{
 8002cd8:	b508      	push	{r3, lr}
  /* USBCLK = PLLCLK = 48 MHz */
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7ff feda 	bl	8002a94 <RCC_USBCLKConfig>
  
  /* Enable USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8002ce0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002ce4:	2101      	movs	r1, #1
}
 8002ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USBCLK = PLLCLK = 48 MHz */
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
  
  /* Enable USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8002cea:	f7ff bf0b 	b.w	8002b04 <RCC_APB1PeriphClockCmd>
	...

08002cf0 <Leave_LowPowerMode>:
  * @brief  Restores system clocks and power while exiting suspend mode.
  * @param  None
  * @retval None
  */
void Leave_LowPowerMode(void)
{
 8002cf0:	b508      	push	{r3, lr}
  DEVICE_INFO *pInfo = &Device_Info;

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f7ff fc98 	bl	8002628 <RCC_HSEConfig>

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8002cf8:	f7ff ff64 	bl	8002bc4 <RCC_WaitForHSEStartUp>
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <Leave_LowPowerMode+0x4c>)
 8002cfe:	7018      	strb	r0, [r3, #0]


  /* Wait till HSE is ready */
  while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET)
 8002d00:	2011      	movs	r0, #17
 8002d02:	f7ff ff3b 	bl	8002b7c <RCC_GetFlagStatus>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d0fa      	beq.n	8002d00 <Leave_LowPowerMode+0x10>
  {}
   
  /* Enable PLL1 */
  RCC_PLLCmd(ENABLE);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f7ff fcd2 	bl	80026b4 <RCC_PLLCmd>

  /* Wait till PLL1 is ready */
  while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 8002d10:	2019      	movs	r0, #25
 8002d12:	f7ff ff33 	bl	8002b7c <RCC_GetFlagStatus>
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d0fa      	beq.n	8002d10 <Leave_LowPowerMode+0x20>
  {}

  /* Select PLL as system clock source */
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8002d1a:	2002      	movs	r0, #2
 8002d1c:	f7ff fce6 	bl	80026ec <RCC_SYSCLKConfig>

  /* Wait till PLL is used as system clock source */ 
  while (RCC_GetSYSCLKSource() != 0x08)
 8002d20:	f7ff fcee 	bl	8002700 <RCC_GetSYSCLKSource>
 8002d24:	2808      	cmp	r0, #8
 8002d26:	d1fb      	bne.n	8002d20 <Leave_LowPowerMode+0x30>
  {}  

 /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <Leave_LowPowerMode+0x50>)
 8002d2a:	7a9a      	ldrb	r2, [r3, #10]
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <Leave_LowPowerMode+0x54>)
 8002d2e:	b10a      	cbz	r2, 8002d34 <Leave_LowPowerMode+0x44>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002d30:	2205      	movs	r2, #5
 8002d32:	e000      	b.n	8002d36 <Leave_LowPowerMode+0x46>
  }
  else
  {
    bDeviceState = ATTACHED;
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	bd08      	pop	{r3, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000348 	.word	0x20000348
 8002d40:	200004d0 	.word	0x200004d0
 8002d44:	20000340 	.word	0x20000340

08002d48 <USB_Interrupts_Config>:
  * @brief  Configures the USB interrupts.
  * @param  None
  * @retval None
  */
void USB_Interrupts_Config(void)
{
 8002d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  NVIC_InitTypeDef NVIC_InitStructure;

  /* 2 bit for pre-emption priority, 2 bits for subpriority */
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8002d4a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002d4e:	f7ff fbdd 	bl	800250c <NVIC_PriorityGroupConfig>

  /* Enable the USB interrupt */
#if defined (USB_INT_DEFAULT)
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8002d52:	2314      	movs	r3, #20
#if defined (USB_INT_REMAP)
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQn;
#endif 
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002d54:	2401      	movs	r4, #1
  /* 2 bit for pre-emption priority, 2 bits for subpriority */
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  /* Enable the USB interrupt */
#if defined (USB_INT_DEFAULT)
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8002d56:	f88d 3004 	strb.w	r3, [sp, #4]
#endif
#if defined (USB_INT_REMAP)
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQn;
#endif 
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002d5a:	2500      	movs	r5, #0
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
#endif
#if defined (USB_INT_REMAP)
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQn;
#endif 
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8002d5c:	2302      	movs	r3, #2
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 8002d5e:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
#endif
#if defined (USB_INT_REMAP)
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQn;
#endif 
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8002d60:	f88d 3005 	strb.w	r3, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002d64:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002d68:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002d6c:	f7ff fbd8 	bl	8002520 <NVIC_Init>
  
  /* Enable the USB Wake-up interrupt */
#if defined (USB_INT_DEFAULT)
  NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_IRQn;
 8002d70:	232a      	movs	r3, #42	; 0x2a
#if defined (USB_INT_REMAP)  
  NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_RMP_IRQn;
#endif  
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);      
 8002d72:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  /* Enable the USB Wake-up interrupt */
#if defined (USB_INT_DEFAULT)
  NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_IRQn;
 8002d74:	f88d 3004 	strb.w	r3, [sp, #4]
#endif
#if defined (USB_INT_REMAP)  
  NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_RMP_IRQn;
#endif  
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8002d78:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002d7c:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);      
 8002d80:	f7ff fbce 	bl	8002520 <NVIC_Init>

  /* Enable the Key EXTI line Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USER_BUTTON_EXTI_IRQn;
 8002d84:	2306      	movs	r3, #6
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_Init(&NVIC_InitStructure);
 8002d86:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);      

  /* Enable the Key EXTI line Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USER_BUTTON_EXTI_IRQn;
 8002d88:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002d8c:	f88d 5005 	strb.w	r5, [sp, #5]
  NVIC_Init(&NVIC_InitStructure);
 8002d90:	f7ff fbc6 	bl	8002520 <NVIC_Init>
}
 8002d94:	b003      	add	sp, #12
 8002d96:	bd30      	pop	{r4, r5, pc}

08002d98 <USB_Cable_Config>:
  * @param  None
  * @retval None
  */
void USB_Cable_Config (FunctionalState NewState)
{
  if (NewState != DISABLE)
 8002d98:	b120      	cbz	r0, 8002da4 <USB_Cable_Config+0xc>
  {
    GPIO_ResetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
 8002d9a:	4805      	ldr	r0, [pc, #20]	; (8002db0 <USB_Cable_Config+0x18>)
 8002d9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002da0:	f7ff bb96 	b.w	80024d0 <GPIO_ResetBits>
  }
  else
  {
    GPIO_SetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <USB_Cable_Config+0x18>)
 8002da6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002daa:	f7ff bb8f 	b.w	80024cc <GPIO_SetBits>
 8002dae:	bf00      	nop
 8002db0:	48001000 	.word	0x48001000

08002db4 <Get_SerialNum>:
  */
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <Get_SerialNum+0x28>)
  * @brief  Create the serial number string descriptor.
  * @param  None.
  * @retval None
  */
void Get_SerialNum(void)
{
 8002db6:	b510      	push	{r4, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
 8002db8:	6818      	ldr	r0, [r3, #0]
  Device_Serial1 = *(__IO uint32_t*)(0x1FFFF7EC);
 8002dba:	685c      	ldr	r4, [r3, #4]
  Device_Serial2 = *(__IO uint32_t*)(0x1FFFF7F0);
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	681b      	ldr	r3, [r3, #0]

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8002dc0:	1818      	adds	r0, r3, r0
 8002dc2:	d00a      	beq.n	8002dda <Get_SerialNum+0x26>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8002dc4:	4906      	ldr	r1, [pc, #24]	; (8002de0 <Get_SerialNum+0x2c>)
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	f7ff ff2e 	bl	8002c28 <IntToUnicode>
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8002dcc:	4620      	mov	r0, r4
 8002dce:	4905      	ldr	r1, [pc, #20]	; (8002de4 <Get_SerialNum+0x30>)
 8002dd0:	2204      	movs	r2, #4
  }
}
 8002dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8002dd6:	f7ff bf27 	b.w	8002c28 <IntToUnicode>
 8002dda:	bd10      	pop	{r4, pc}
 8002ddc:	1ffff7e8 	.word	0x1ffff7e8
 8002de0:	20000216 	.word	0x20000216
 8002de4:	20000226 	.word	0x20000226

08002de8 <CDC_Send_DATA>:
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
  /*if max buffer is Not reached*/
  if(Send_length < VIRTUAL_COM_PORT_DATA_SIZE)
 8002de8:	293f      	cmp	r1, #63	; 0x3f
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 8002dea:	b510      	push	{r4, lr}
 8002dec:	f04f 0300 	mov.w	r3, #0
  /*if max buffer is Not reached*/
  if(Send_length < VIRTUAL_COM_PORT_DATA_SIZE)
 8002df0:	d80f      	bhi.n	8002e12 <CDC_Send_DATA+0x2a>
  {
    /*Sent flag*/
    packet_sent = 0;
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <CDC_Send_DATA+0x30>)
    /* send  packet to PMA*/
    UserToPMABufferCopy((unsigned char*)ptrBuffer, ENDP1_TXADDR, Send_length);
 8002df4:	b28c      	uxth	r4, r1
{
  /*if max buffer is Not reached*/
  if(Send_length < VIRTUAL_COM_PORT_DATA_SIZE)
  {
    /*Sent flag*/
    packet_sent = 0;
 8002df6:	6013      	str	r3, [r2, #0]
    /* send  packet to PMA*/
    UserToPMABufferCopy((unsigned char*)ptrBuffer, ENDP1_TXADDR, Send_length);
 8002df8:	21c0      	movs	r1, #192	; 0xc0
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	f7fe fcca 	bl	8001794 <UserToPMABufferCopy>
    SetEPTxCount(ENDP1, Send_length);
 8002e00:	4621      	mov	r1, r4
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7fe ff0a 	bl	8001c1c <SetEPTxCount>
    SetEPTxValid(ENDP1);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f7fe fdad 	bl	8001968 <SetEPTxValid>
  }
  else
  {
    return 0;
  }
  return 1;
 8002e0e:	2001      	movs	r0, #1
 8002e10:	bd10      	pop	{r4, pc}
    SetEPTxCount(ENDP1, Send_length);
    SetEPTxValid(ENDP1);
  }
  else
  {
    return 0;
 8002e12:	4618      	mov	r0, r3
  }
  return 1;
}
 8002e14:	bd10      	pop	{r4, pc}
 8002e16:	bf00      	nop
 8002e18:	20000210 	.word	0x20000210

08002e1c <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 8002e1c:	b508      	push	{r3, lr}
  //Enable endpoint 3 for RX
  SetEPRxValid(ENDP3);
 8002e1e:	2003      	movs	r0, #3
 8002e20:	f7fe fdb6 	bl	8001990 <SetEPRxValid>
  return 1 ;
}
 8002e24:	2001      	movs	r0, #1
 8002e26:	bd08      	pop	{r3, pc}

08002e28 <setup_led_gpio>:
#include "ge_libs.h"


void setup_led_gpio() {
  //Initialize LED pins and set as outputs
  gpio_setup_pin(DISC_LD3, GPIO_OUTPUT, false, false);
 8002e28:	2200      	movs	r2, #0
 * @date  09.2015
 */
#include "ge_libs.h"


void setup_led_gpio() {
 8002e2a:	b510      	push	{r4, lr}
  //Initialize LED pins and set as outputs
  gpio_setup_pin(DISC_LD3, GPIO_OUTPUT, false, false);
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	2049      	movs	r0, #73	; 0x49
 8002e30:	2101      	movs	r1, #1
 8002e32:	f7fd f9ed 	bl	8000210 <gpio_setup_pin>
  gpio_setup_pin(DISC_LD4, GPIO_OUTPUT, false, false);
 8002e36:	2200      	movs	r2, #0
 8002e38:	4613      	mov	r3, r2
 8002e3a:	2048      	movs	r0, #72	; 0x48
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	f7fd f9e7 	bl	8000210 <gpio_setup_pin>
  gpio_setup_pin(DISC_LD5, GPIO_OUTPUT, false, false);
 8002e42:	2200      	movs	r2, #0
 8002e44:	4613      	mov	r3, r2
 8002e46:	204a      	movs	r0, #74	; 0x4a
 8002e48:	2101      	movs	r1, #1
 8002e4a:	f7fd f9e1 	bl	8000210 <gpio_setup_pin>
  gpio_setup_pin(DISC_LD6, GPIO_OUTPUT, false, false);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4613      	mov	r3, r2
 8002e52:	204f      	movs	r0, #79	; 0x4f
 8002e54:	2101      	movs	r1, #1
 8002e56:	f7fd f9db 	bl	8000210 <gpio_setup_pin>
  gpio_setup_pin(DISC_LD7, GPIO_OUTPUT, false, false);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	204b      	movs	r0, #75	; 0x4b
 8002e60:	2101      	movs	r1, #1
 8002e62:	f7fd f9d5 	bl	8000210 <gpio_setup_pin>
  gpio_setup_pin(DISC_LD8, GPIO_OUTPUT, false, false);
 8002e66:	2200      	movs	r2, #0
 8002e68:	4613      	mov	r3, r2
 8002e6a:	204e      	movs	r0, #78	; 0x4e
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	f7fd f9cf 	bl	8000210 <gpio_setup_pin>
  gpio_setup_pin(DISC_LD9, GPIO_OUTPUT, false, false);
 8002e72:	2200      	movs	r2, #0
 8002e74:	4613      	mov	r3, r2
 8002e76:	204c      	movs	r0, #76	; 0x4c
 8002e78:	2101      	movs	r1, #1
 8002e7a:	f7fd f9c9 	bl	8000210 <gpio_setup_pin>
  gpio_setup_pin(DISC_LD10, GPIO_OUTPUT, false, false);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	204d      	movs	r0, #77	; 0x4d
 8002e82:	2101      	movs	r1, #1
 8002e84:	4613      	mov	r3, r2
}
 8002e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  gpio_setup_pin(DISC_LD5, GPIO_OUTPUT, false, false);
  gpio_setup_pin(DISC_LD6, GPIO_OUTPUT, false, false);
  gpio_setup_pin(DISC_LD7, GPIO_OUTPUT, false, false);
  gpio_setup_pin(DISC_LD8, GPIO_OUTPUT, false, false);
  gpio_setup_pin(DISC_LD9, GPIO_OUTPUT, false, false);
  gpio_setup_pin(DISC_LD10, GPIO_OUTPUT, false, false);
 8002e8a:	f7fd b9c1 	b.w	8000210 <gpio_setup_pin>

08002e8e <led_off>:
}

void led_off() {
 8002e8e:	b508      	push	{r3, lr}
  gpio_write_pin(DISC_LD3, GPIO_LOW);
 8002e90:	2049      	movs	r0, #73	; 0x49
 8002e92:	2100      	movs	r1, #0
 8002e94:	f7fd f9ec 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD4, GPIO_LOW);
 8002e98:	2048      	movs	r0, #72	; 0x48
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	f7fd f9e8 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD5, GPIO_LOW);
 8002ea0:	204a      	movs	r0, #74	; 0x4a
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	f7fd f9e4 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD6, GPIO_LOW);
 8002ea8:	204f      	movs	r0, #79	; 0x4f
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f7fd f9e0 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD7, GPIO_LOW);
 8002eb0:	204b      	movs	r0, #75	; 0x4b
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f7fd f9dc 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD8, GPIO_LOW);
 8002eb8:	204e      	movs	r0, #78	; 0x4e
 8002eba:	2100      	movs	r1, #0
 8002ebc:	f7fd f9d8 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD9, GPIO_LOW);
 8002ec0:	204c      	movs	r0, #76	; 0x4c
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f7fd f9d4 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD10, GPIO_LOW);
 8002ec8:	204d      	movs	r0, #77	; 0x4d
 8002eca:	2100      	movs	r1, #0
}
 8002ecc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  gpio_write_pin(DISC_LD5, GPIO_LOW);
  gpio_write_pin(DISC_LD6, GPIO_LOW);
  gpio_write_pin(DISC_LD7, GPIO_LOW);
  gpio_write_pin(DISC_LD8, GPIO_LOW);
  gpio_write_pin(DISC_LD9, GPIO_LOW);
  gpio_write_pin(DISC_LD10, GPIO_LOW);
 8002ed0:	f7fd b9ce 	b.w	8000270 <gpio_write_pin>

08002ed4 <led_on>:
}

void led_on() {
 8002ed4:	b508      	push	{r3, lr}
  gpio_write_pin(DISC_LD3, GPIO_HIGH);
 8002ed6:	2049      	movs	r0, #73	; 0x49
 8002ed8:	2101      	movs	r1, #1
 8002eda:	f7fd f9c9 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD4, GPIO_HIGH);
 8002ede:	2048      	movs	r0, #72	; 0x48
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	f7fd f9c5 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD5, GPIO_HIGH);
 8002ee6:	204a      	movs	r0, #74	; 0x4a
 8002ee8:	2101      	movs	r1, #1
 8002eea:	f7fd f9c1 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD6, GPIO_HIGH);
 8002eee:	204f      	movs	r0, #79	; 0x4f
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	f7fd f9bd 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD7, GPIO_HIGH);
 8002ef6:	204b      	movs	r0, #75	; 0x4b
 8002ef8:	2101      	movs	r1, #1
 8002efa:	f7fd f9b9 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD8, GPIO_HIGH);
 8002efe:	204e      	movs	r0, #78	; 0x4e
 8002f00:	2101      	movs	r1, #1
 8002f02:	f7fd f9b5 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD9, GPIO_HIGH);
 8002f06:	204c      	movs	r0, #76	; 0x4c
 8002f08:	2101      	movs	r1, #1
 8002f0a:	f7fd f9b1 	bl	8000270 <gpio_write_pin>
  gpio_write_pin(DISC_LD10, GPIO_HIGH);
 8002f0e:	204d      	movs	r0, #77	; 0x4d
 8002f10:	2101      	movs	r1, #1
}
 8002f12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  gpio_write_pin(DISC_LD5, GPIO_HIGH);
  gpio_write_pin(DISC_LD6, GPIO_HIGH);
  gpio_write_pin(DISC_LD7, GPIO_HIGH);
  gpio_write_pin(DISC_LD8, GPIO_HIGH);
  gpio_write_pin(DISC_LD9, GPIO_HIGH);
  gpio_write_pin(DISC_LD10, GPIO_HIGH);
 8002f16:	f7fd b9ab 	b.w	8000270 <gpio_write_pin>
	...

08002f1c <main>:
  * @brief  Main program.
  * @param  None 
  * @retval None
  */
int main(void)
{  
 8002f1c:	b508      	push	{r3, lr}
  //Initialize library
  ge_init();
 8002f1e:	f7fd f9cd 	bl	80002bc <ge_init>

  //Initialize GPIO
  gpio_init();
 8002f22:	f7fd f931 	bl	8000188 <gpio_init>

  setup_led_gpio();
 8002f26:	f7ff ff7f 	bl	8002e28 <setup_led_gpio>

  //Initialize the USER button as an input
  gpio_setup_pin(DISC_PBTN, GPIO_INPUT, false, false);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	4601      	mov	r1, r0
 8002f2e:	4602      	mov	r2, r0
 8002f30:	4603      	mov	r3, r0
 8002f32:	f7fd f96d 	bl	8000210 <gpio_setup_pin>

  //Initialize LCD
  lcd_init();
 8002f36:	f7fd f9b7 	bl	80002a8 <lcd_init>

  // //Print Hello World
  lcd_clear();
 8002f3a:	f7fd f9bd 	bl	80002b8 <lcd_clear>
  lcd_goto(0, 0);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	4601      	mov	r1, r0
 8002f42:	f7fd f9b5 	bl	80002b0 <lcd_goto>
  lcd_puts("Hello, World!");
 8002f46:	480e      	ldr	r0, [pc, #56]	; (8002f80 <main+0x64>)
 8002f48:	f7fd f9b4 	bl	80002b4 <lcd_puts>
   * depressed, it will switch to pulsing the buttons with
   * PWM.
   */
  while (1) {   
    //check if button depressed
    if (!gpio_read_pin(DISC_PBTN)) {
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fd f99f 	bl	8000290 <gpio_read_pin>
 8002f52:	b950      	cbnz	r0, 8002f6a <main+0x4e>
      /* LEDs Off */
      led_off();
 8002f54:	f7ff ff9b 	bl	8002e8e <led_off>
      delay_ms(500); /*500ms - half second*/
 8002f58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f5c:	f7fd f9cc 	bl	80002f8 <delay_ms>
      
      /* LEDs Off */
      led_on();
 8002f60:	f7ff ffb8 	bl	8002ed4 <led_on>
      delay_ms(500); /*500ms - half second*/
 8002f64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f68:	e007      	b.n	8002f7a <main+0x5e>

      // vcom_send("Hi\n");
    } else {
      /* LEDs Off */
      led_off();
 8002f6a:	f7ff ff90 	bl	8002e8e <led_off>
      delay_ms(100); /*500ms - half second*/
 8002f6e:	2064      	movs	r0, #100	; 0x64
 8002f70:	f7fd f9c2 	bl	80002f8 <delay_ms>
      
      /* LEDs Off */
      led_on();
 8002f74:	f7ff ffae 	bl	8002ed4 <led_on>
      delay_ms(100); /*500ms - half second*/
 8002f78:	2064      	movs	r0, #100	; 0x64
 8002f7a:	f7fd f9bd 	bl	80002f8 <delay_ms>
 8002f7e:	e7e5      	b.n	8002f4c <main+0x30>
 8002f80:	08003232 	.word	0x08003232

08002f84 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f84:	4a39      	ldr	r2, [pc, #228]	; (800306c <SystemInit+0xe8>)
 8002f86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <SystemInit+0xec>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002f9c:	6859      	ldr	r1, [r3, #4]
 8002f9e:	4a35      	ldr	r2, [pc, #212]	; (8003074 <SystemInit+0xf0>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002faa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fae:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002fbe:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc2:	f022 020f 	bic.w	r2, r2, #15
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002fc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fca:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <SystemInit+0xf4>)
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fcc:	b082      	sub	sp, #8

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002fce:	400a      	ands	r2, r1
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002fd6:	9200      	str	r2, [sp, #0]
 8002fd8:	9201      	str	r2, [sp, #4]
 #if defined (PLL_SOURCE_HSE)
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 #elif defined (PLL_SOURCE_HSE_BYPASS)
  /* HSE oscillator bypassed with external clock */    
  RCC->CR |= (uint32_t)(RCC_CR_HSEON | RCC_CR_HSEBYP);
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8002fe0:	601a      	str	r2, [r3, #0]
 #endif /* PLL_SOURCE_HSE */
   
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002fe8:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8002fea:	9a00      	ldr	r2, [sp, #0]
 8002fec:	3201      	adds	r2, #1
 8002fee:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002ff0:	9a01      	ldr	r2, [sp, #4]
 8002ff2:	b91a      	cbnz	r2, 8002ffc <SystemInit+0x78>
 8002ff4:	9a00      	ldr	r2, [sp, #0]
 8002ff6:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8002ffa:	d1f2      	bne.n	8002fe2 <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8003002:	bf18      	it	ne
 8003004:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003006:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003008:	9a01      	ldr	r2, [sp, #4]
 800300a:	2a01      	cmp	r2, #1
 800300c:	d005      	beq.n	800301a <SystemInit+0x96>
  SetSysClock();
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <SystemInit+0xe8>)
 8003010:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003014:	609a      	str	r2, [r3, #8]
#endif  
}
 8003016:	b002      	add	sp, #8
 8003018:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 800301a:	4a18      	ldr	r2, [pc, #96]	; (800307c <SystemInit+0xf8>)
 800301c:	2112      	movs	r1, #18
 800301e:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800302e:	605a      	str	r2, [r3, #4]
    
   
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003036:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800303e:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003046:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <SystemInit+0xec>)
 800304c:	0189      	lsls	r1, r1, #6
 800304e:	d5fb      	bpl.n	8003048 <SystemInit+0xc4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003050:	6851      	ldr	r1, [r2, #4]
 8003052:	f021 0103 	bic.w	r1, r1, #3
 8003056:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003058:	6851      	ldr	r1, [r2, #4]
 800305a:	f041 0102 	orr.w	r1, r1, #2
 800305e:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	f002 020c 	and.w	r2, r2, #12
 8003066:	2a08      	cmp	r2, #8
 8003068:	d1fa      	bne.n	8003060 <SystemInit+0xdc>
 800306a:	e7d0      	b.n	800300e <SystemInit+0x8a>
 800306c:	e000ed00 	.word	0xe000ed00
 8003070:	40021000 	.word	0x40021000
 8003074:	f87fc00c 	.word	0xf87fc00c
 8003078:	ff00fccc 	.word	0xff00fccc
 800307c:	40022000 	.word	0x40022000

08003080 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003080:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003082:	e003      	b.n	800308c <LoopCopyDataInit>

08003084 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8003086:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003088:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800308a:	3104      	adds	r1, #4

0800308c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800308c:	480a      	ldr	r0, [pc, #40]	; (80030b8 <LoopForever+0x6>)
	ldr	r3, =_edata
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <LoopForever+0xa>)
	adds	r2, r0, r1
 8003090:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003092:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003094:	d3f6      	bcc.n	8003084 <CopyDataInit>
	ldr	r2, =_sbss
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <LoopForever+0xe>)
	b	LoopFillZerobss
 8003098:	e002      	b.n	80030a0 <LoopFillZerobss>

0800309a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800309a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800309c:	f842 3b04 	str.w	r3, [r2], #4

080030a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <LoopForever+0x12>)
	cmp	r2, r3
 80030a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80030a4:	d3f9      	bcc.n	800309a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030a6:	f7ff ff6d 	bl	8002f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030aa:	f000 f80f 	bl	80030cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030ae:	f7ff ff35 	bl	8002f1c <main>

080030b2 <LoopForever>:

LoopForever:
    b LoopForever
 80030b2:	e7fe      	b.n	80030b2 <LoopForever>
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80030b4:	08003258 	.word	0x08003258
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80030b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80030bc:	20000324 	.word	0x20000324
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80030c0:	20000324 	.word	0x20000324
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80030c4:	20000500 	.word	0x20000500

080030c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030c8:	e7fe      	b.n	80030c8 <ADC1_2_IRQHandler>
	...

080030cc <__libc_init_array>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	4e0f      	ldr	r6, [pc, #60]	; (800310c <__libc_init_array+0x40>)
 80030d0:	4d0f      	ldr	r5, [pc, #60]	; (8003110 <__libc_init_array+0x44>)
 80030d2:	1b76      	subs	r6, r6, r5
 80030d4:	10b6      	asrs	r6, r6, #2
 80030d6:	bf18      	it	ne
 80030d8:	2400      	movne	r4, #0
 80030da:	d005      	beq.n	80030e8 <__libc_init_array+0x1c>
 80030dc:	3401      	adds	r4, #1
 80030de:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e2:	4798      	blx	r3
 80030e4:	42a6      	cmp	r6, r4
 80030e6:	d1f9      	bne.n	80030dc <__libc_init_array+0x10>
 80030e8:	4e0a      	ldr	r6, [pc, #40]	; (8003114 <__libc_init_array+0x48>)
 80030ea:	4d0b      	ldr	r5, [pc, #44]	; (8003118 <__libc_init_array+0x4c>)
 80030ec:	1b76      	subs	r6, r6, r5
 80030ee:	f000 f8a7 	bl	8003240 <_init>
 80030f2:	10b6      	asrs	r6, r6, #2
 80030f4:	bf18      	it	ne
 80030f6:	2400      	movne	r4, #0
 80030f8:	d006      	beq.n	8003108 <__libc_init_array+0x3c>
 80030fa:	3401      	adds	r4, #1
 80030fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003100:	4798      	blx	r3
 8003102:	42a6      	cmp	r6, r4
 8003104:	d1f9      	bne.n	80030fa <__libc_init_array+0x2e>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	bd70      	pop	{r4, r5, r6, pc}
 800310a:	bf00      	nop
	...

0800311c <strlen>:
 800311c:	f020 0103 	bic.w	r1, r0, #3
 8003120:	f010 0003 	ands.w	r0, r0, #3
 8003124:	f1c0 0000 	rsb	r0, r0, #0
 8003128:	f851 3b04 	ldr.w	r3, [r1], #4
 800312c:	f100 0c04 	add.w	ip, r0, #4
 8003130:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003134:	f06f 0200 	mvn.w	r2, #0
 8003138:	bf1c      	itt	ne
 800313a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800313e:	4313      	orrne	r3, r2
 8003140:	f04f 0c01 	mov.w	ip, #1
 8003144:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8003148:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800314c:	eba3 020c 	sub.w	r2, r3, ip
 8003150:	ea22 0203 	bic.w	r2, r2, r3
 8003154:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8003158:	bf04      	itt	eq
 800315a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800315e:	3004      	addeq	r0, #4
 8003160:	d0f4      	beq.n	800314c <strlen+0x30>
 8003162:	f1c2 0100 	rsb	r1, r2, #0
 8003166:	ea02 0201 	and.w	r2, r2, r1
 800316a:	fab2 f282 	clz	r2, r2
 800316e:	f1c2 021f 	rsb	r2, r2, #31
 8003172:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003176:	4770      	bx	lr

08003178 <CSWTCH.14>:
 8003178:	c080 d494                                   ....

0800317c <Virtual_Com_Port_StringProduct>:
 800317c:	0332 0053 0054 004d 0033 0032 0020 0056     2.S.T.M.3.2. .V.
 800318c:	0069 0072 0074 0075 0061 006c 0020 0043     i.r.t.u.a.l. .C.
 800319c:	004f 004d 0020 0050 006f 0072 0074 0020     O.M. .P.o.r.t. .
 80031ac:	0020 0000                                    ...

080031b0 <Virtual_Com_Port_StringVendor>:
 80031b0:	0326 0053 0054 004d 0069 0063 0072 006f     &.S.T.M.i.c.r.o.
 80031c0:	0065 006c 0065 0063 0074 0072 006f 006e     e.l.e.c.t.r.o.n.
 80031d0:	0069 0063 0073 0000                         i.c.s...

080031d8 <Virtual_Com_Port_StringLangID>:
 80031d8:	0304 0409                                   ....

080031dc <Virtual_Com_Port_ConfigDescriptor>:
 80031dc:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
 80031ec:	0001 2405 1000 0501 0124 0100 2404 0202     ...$....$....$..
 80031fc:	2405 0006 0701 8205 0803 ff00 0409 0001     .$..............
 800320c:	0a02 0000 0700 0305 4002 0000 0507 0281     .........@......
 800321c:	0040 0000                                   @...

08003220 <Virtual_Com_Port_DeviceDescriptor>:
 8003220:	0112 0200 0002 4000 0483 5740 0200 0201     .......@..@W....
 8003230:	0103 6548 6c6c 2c6f 5720 726f 646c 0021     ..Hello, World!.

08003240 <_init>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr

0800324c <_fini>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr
